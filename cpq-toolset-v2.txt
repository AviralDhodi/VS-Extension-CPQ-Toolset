

Dir: .
Content:

### File: .vscodeignore


### File: extension.js

const vscode = require('vscode');
const path = require("path");
const { fork, exec } = require("child_process");

function activate(context) {
  // Start the server
  const serverPath = path.join(__dirname, "bundledServer.js");
  const child = fork(serverPath, [], { stdio: "inherit" });

  //  Register the correct command
  const disposable = vscode.commands.registerCommand('cpq-toolset.launch', () => {
    const port = 3030;
    const url = `http://localhost:${port}`;

    const openCmd = process.platform === 'win32' ? `start ${url}` :
                    process.platform === 'darwin' ? `open ${url}` :
                    `xdg-open ${url}`;

    exec(openCmd, (err) => {
      if (err) {
        vscode.window.showErrorMessage(`Failed to open browser: ${err.message}`);
      } else {
        vscode.window.showInformationMessage(`CPQ Toolset opened in browser`);
      }
    });
  });

  // Add both disposables
  context.subscriptions.push(disposable);
  context.subscriptions.push({
    dispose: () => child.kill()
  });
}

module.exports = { activate };

### File: package-lock.json

{
  "name": "cpq-toolset-v2",
  "version": "2.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "cpq-toolset-v2",
      "version": "2.0.0",
      "dependencies": {
        "express": "^5.1.0",
        "open": "^10.1.2"
      },
      "devDependencies": {
        "esbuild": "^0.25.5"
      },
      "engines": {
        "vscode": "^1.70.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      removed to save space
  }
}

### File: package.json

{
  "name": "cpq-toolset-v2",
  "publisher": "aviral",
  "version": "2.0.0",
  "main": "extension.js",
  "engines": {
    "vscode": "^1.70.0"
  },
  "activationEvents": [
    "onCommand:cpq-toolset.launch"
  ],
  "contributes": {
    "commands": [
      {
        "command": "cpq-toolset.launch",
        "title": "CPQ Toolset: Launch Tool"
      }
    ],
    "configuration": {
      "title": "CPQ Toolset",
      "properties": {
        "cpq-toolset.salesforceCliPath": {
          "type": "string",
          "default": "",
          "description": "Full path to Salesforce CLI executable (sf or sfdx). Leave empty for auto-detection.",
          "examples": [
            "C:\\Program Files\\Salesforce CLI\\bin\\sf.exe",
            "/usr/local/bin/sf",
            "/opt/homebrew/bin/sf"
          ],
          "scope": "window"
        },
        "cpq-toolset.enableDebugLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug logging for CPQ Toolset operations",
          "scope": "window"
        },
        "cpq-toolset.defaultTimeout": {
          "type": "number",
          "default": 120000,
          "description": "Default timeout for SFDX commands in milliseconds",
          "minimum": 10000,
          "maximum": 600000,
          "scope": "window"
        }
      }
    }
  },
  "scripts": {
    "build-server": "node scripts/build-server.js",
    "build-extension": "node scripts/build-extension.js"
  },
  "devDependencies": {
    "esbuild": "^0.25.5"
  },
  "dependencies": {
    "express": "^5.1.0",
    "open": "^10.1.2"
  }
}

### File: README.md


### File: server.js

const express = require("express");
const path = require("path");

const app = express();
const port = 3030;

// FIX: Use __dirname (where server.js is) instead of process.cwd() (where VS Code started)
const extensionRoot = __dirname;
console.log(' Extension root:', extensionRoot);

// Change working directory to extension root so all paths resolve correctly
process.chdir(extensionRoot);

// Use your existing routes - they should work now with correct working directory
const routes = require("./shared/routes");
app.use(express.json()); // Add this line
app.use("/", routes);

app.listen(port, async () => {
    console.log(` CPQ Toolset running at http://localhost:${port}`);
    
    // Handle open module
    try {
        const { default: open } = await import('open');
        await open(`http://localhost:${port}`);
    } catch (error) {
        console.log(` Open manually: http://localhost:${port}`);
    }
});

Dir: .vscode
Content:

Dir: apps
Content:

Dir: node_modules
Content:

Dir: scripts
Content:

### File: build-extension.js

const path = require("path");
const { execSync } = require("child_process");

const buildServerScript = path.join(__dirname, "build-server.js");

console.log(" Starting full extension build...");

execSync(`node "${buildServerScript}"`, { stdio: "inherit" });

//  Add more steps later like asset copy, minify, package

console.log(" Extension build complete.");

### File: build-server.js

// build-server.js
const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

const dependenciesFile = path.join(__dirname,"../", "shared", "modules", "node", "dependencies.txt");
const serverEntry = path.join(__dirname,"../", "server.js");
const outputFile = path.join(__dirname, "../","bundledServer.js");

// Step 1: Install dependencies from dependencies.txt
if (fs.existsSync(dependenciesFile)) {
  const deps = fs.readFileSync(dependenciesFile, "utf-8")
    .split(/\r?\n/)
    .filter(Boolean);

  if (deps.length) {
    console.log(" Installing dependencies:", deps.join(", "));
    execSync(`npm install ${deps.join(" ")}`, { stdio: "inherit" });
  }
} else {
  console.error(" No dependencies.txt found.");
  process.exit(1);
}

// Step 2: Bundle server.js
console.log(" Bundling server.js with esbuild...");
execSync(`npx esbuild ${serverEntry} --bundle --platform=node --outfile=${outputFile}`, {
  stdio: "inherit"
});

console.log(" Build complete: bundledServer.js");

Dir: shared
Content:

Dir: apps\data-comparison
Content:

Dir: apps\upcoming-app
Content:

Dir: apps\data-comparison\components
Content:

Dir: apps\data-comparison\routes
Content:

### File: index.js

// apps/data-comparison/routes/index.js - Fixed with proper static serving and dynamic UI
const express = require("express");
const path = require("path");
const fs = require("fs");
const stateManager = require("../state");
const projectRoot = process.cwd();
const shellPath = path.join(projectRoot, "shared", "UI", "appView", "index.html");
const router = express.Router();

console.log('[DataComparison] Initializing routes...');
console.log('[DataComparison] Project root:', projectRoot);
console.log('[DataComparison] Shell path:', shellPath);

// ========================================
// STATIC ASSETS - MUST BE FIRST!
// ========================================
// CRITICAL: Static routes MUST be before dynamic routes to prevent conflicts

// Serve component assets (CSS, JS, images)
router.use("/components", express.static(path.join(projectRoot, "apps", "data-comparison", "components")));

// Serve appView template assets (for shell loading)
router.use("/appView", express.static(path.join(projectRoot, "apps", "data-comparison", "components", "appView")));

console.log('[DataComparison] Static serving configured:');
console.log('  /components -> ', path.join(projectRoot, "apps", "data-comparison", "components"));
console.log('  /appView -> ', path.join(projectRoot, "apps", "data-comparison", "components", "appView"));

// ========================================
// DEBUG MIDDLEWARE
// ========================================
router.use((req, res, next) => {
    console.log(`[DataComparison] ${req.method} ${req.path}`);
    if (Object.keys(req.query).length > 0) {
        console.log(`[DataComparison] Query:`, req.query);
    }
    if (Object.keys(req.params).length > 0) {
        console.log(`[DataComparison] Params:`, req.params);
    }
    next();
});

// ========================================
// MAIN ENTRY POINTS - STATE-DRIVEN SHELL
// ========================================

// Main route "/" = welcome component with shell wrapper
router.get("/", async (req, res) => {
    console.log('[DataComparison]  Main route - setting state to welcome');
    
    try {
        // Set app state to welcome
        stateManager.setState('welcome');
        
        // Read shell HTML
        if (!fs.existsSync(shellPath)) {
            throw new Error(`Shell not found at: ${shellPath}`);
        }
        
        const shellHtml = fs.readFileSync(shellPath, 'utf8');
        
        // Modify shell to point iframe to dynamic welcome UI
        const modifiedShell = shellHtml.replace(
            'src="/"', 
            'src="/data-comparison/welcome-ui"'
        );
        
        console.log('[DataComparison]  Serving shell with iframe -> /data-comparison/welcome-ui');
        res.send(modifiedShell);
        
    } catch (error) {
        console.error('[DataComparison]  Error serving main route:', error);
        res.status(500).send(`Error loading app: ${error.message}`);
    }
});

// Config Generator route
router.get("/config-generator", async (req, res) => {
    console.log('[DataComparison]  Config generator route');
    
    try {
        stateManager.setState('configGenerator');
        const shellHtml = fs.readFileSync(shellPath, 'utf8');
        const modifiedShell = shellHtml.replace(
            'src="/"', 
            'src="/data-comparison/configGenerator-ui"'
        );
        res.send(modifiedShell);
    } catch (error) {
        console.error('[DataComparison]  Error serving config generator:', error);
        res.status(500).send(`Error: ${error.message}`);
    }
});

// Org Selection route
router.get("/org-selection", async (req, res) => {
    console.log('[DataComparison]  Org selection route');
    
    try {
        stateManager.setState('orgSelection');
        const shellHtml = fs.readFileSync(shellPath, 'utf8');
        const modifiedShell = shellHtml.replace(
            'src="/"', 
            'src="/data-comparison/orgSelection-ui"'
        );
        res.send(modifiedShell);
    } catch (error) {
        console.error('[DataComparison]  Error serving org selection:', error);
        res.status(500).send(`Error: ${error.message}`);
    }
});

// ========================================
// DYNAMIC APPVIEW GENERATION
// ========================================

// Dynamic UI generation endpoint: /:state-ui
router.get("/:stateUi", async (req, res) => {
    const { stateUi } = req.params;
    
    // Validate format: state-ui
    if (!stateUi.endsWith('-ui')) {
        return res.status(404).send('Invalid format. Expected: state-ui');
    }
    
    const state = stateUi.replace('-ui', '');
    console.log(`[DataComparison]  Generating dynamic appView for state: ${state}`);
    
    try {
        // Validate state exists
        const validStates = ['welcome', 'configGenerator', 'orgSelection'];
        if (!validStates.includes(state)) {
            throw new Error(`Invalid state: ${state}. Valid states: ${validStates.join(', ')}`);
        }
        
        // Generate dynamic appView HTML
        const appViewHtml = await stateManager.generateAppView(state);
        
        console.log(`[DataComparison]  Generated appView for ${state}, length: ${appViewHtml.length}`);
        
        res.setHeader('Content-Type', 'text/html');
        res.send(appViewHtml);
        
    } catch (error) {
        console.error(`[DataComparison]  Error generating appView for ${state}:`, error);
        res.status(500).send(`
            <html>
                <body style="font-family: system-ui; padding: 2rem; text-align: center;">
                    <h2>Failed to Generate UI</h2>
                    <p>State: ${state}</p>
                    <p>Error: ${error.message}</p>
                    <button onclick="location.reload()">Retry</button>
                </body>
            </html>
        `);
    }
});

// ========================================
// STATE API ENDPOINTS  
// ========================================

router.get("/api/state", (req, res) => {
    console.log('[DataComparison]  State API called');
    
    try {
        const state = stateManager.getState();
        res.json({
            success: true,
            state: state,
            displayName: stateManager.getDisplayName(),
            status: stateManager.getStatus(),
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('[DataComparison]  State API error:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

router.post("/api/state/set", (req, res) => {
    const { component, data } = req.body;
    console.log(`[DataComparison]  Setting state to: ${component}`, data);
    
    try {
        const newState = stateManager.setState(component, data);
        res.json({
            success: true,
            state: newState,
            displayName: stateManager.getDisplayName(),
            status: stateManager.getStatus()
        });
    } catch (error) {
        console.error(`[DataComparison]  Error setting state:`, error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Specific state transitions
router.post("/api/state/welcome", (req, res) => {
    try {
        const state = stateManager.setState('welcome', req.body.data || {});
        res.json({ success: true, state });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

router.post("/api/state/config-generator", (req, res) => {
    try {
        const state = stateManager.setState('configGenerator', req.body.data || {});
        res.json({ success: true, state });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

router.post("/api/state/org-selection", (req, res) => {
    try {
        const state = stateManager.setState('orgSelection', req.body.data || {});
        res.json({ success: true, state });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});


// Add this route to apps/data-comparison/routes/index.js
// Add after the existing routes, before the health check

// ========================================
// CONFIG GENERATION API
// ========================================

router.post("/api/config/generate", async (req, res) => {
    const { filename, config } = req.body;
    
    console.log(`[DataComparison]  Config generation request: ${filename}`);
    
    try {
        // Validate input
        if (!filename || !config) {
            return res.status(400).json({
                success: false,
                error: 'Missing filename or config data'
            });
        }
        
        if (!config.orgs || config.orgs.length < 2) {
            return res.status(400).json({
                success: false,
                error: 'At least 2 organizations required'
            });
        }
        
        // Ensure storage directory exists
        const storageDir = path.join(projectRoot, "apps", "data-comparison", "storage", "config");
        if (!fs.existsSync(storageDir)) {
            fs.mkdirSync(storageDir, { recursive: true });
            console.log(`[DataComparison]  Created storage directory: ${storageDir}`);
        }
        
        // Save config file
        const configPath = path.join(storageDir, filename);
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
        
        console.log(`[DataComparison]  Config saved: ${configPath}`);
        console.log(`[DataComparison]  Config details:`, {
            orgs: config.orgs.length,
            filename: filename,
            size: JSON.stringify(config).length
        });
        
        res.json({
            success: true,
            filename: filename,
            path: configPath,
            message: 'Configuration saved successfully',
            summary: {
                orgs: config.orgs.length,
                orgNames: config.metadata.orgNames,
                created: config.createdAt
            }
        });
        
    } catch (error) {
        console.error(`[DataComparison]  Config generation failed:`, error);
        res.status(500).json({
            success: false,
            error: 'Failed to generate configuration',
            message: error.message
        });
    }
});

// Add this route to apps/data-comparison/routes/index.js
// Add after the config generate route

// ========================================
// ORGS API ENDPOINTS
// ========================================

router.post("/api/orgs/list", async (req, res) => {
    console.log(`[DataComparison]  Orgs list request`);
    
    try {
        // Fix: Correct path to sfdxRunner
        const { getDefaultRunner } = require("../components/modules/sfdxRunner");
        const sfdxRunner = getDefaultRunner();
        
        console.log(`[DataComparison]  Executing: sf org list --json`);
        
        // Execute sf org list command
        const result = await sfdxRunner.runWithJson('org list');
        
        if (result && result.result) {
            // Filter for connected orgs only
            const allOrgs = [
                ...(result.result.nonScratchOrgs || []), 
                ...(result.result.scratchOrgs || [])
            ];
            
            const connectedOrgs = allOrgs.filter(org => 
                org.connectedStatus === 'Connected'
            );
            
            console.log(`[DataComparison]  Orgs loaded:`, {
                total: allOrgs.length,
                connected: connectedOrgs.length,
                orgs: connectedOrgs.map(org => ({
                    username: org.username,
                    alias: org.alias,
                    type: org.orgType
                }))
            });
            
            res.json({
                success: true,
                orgs: connectedOrgs,
                total: connectedOrgs.length,
                message: `Found ${connectedOrgs.length} connected organizations`
            });
            
        } else {
            throw new Error('Invalid response from sf org list command');
        }
        
    } catch (error) {
        console.error(`[DataComparison]  Orgs list failed:`, error);
        
        // Check if it's an SFDX-specific error
        let errorMessage = error.message;
        if (error.name === 'SFDXError') {
            errorMessage = `Salesforce CLI error: ${error.message}`;
        } else if (error.message.includes('sf: command not found') || error.message.includes('sfdx: command not found')) {
            errorMessage = 'Salesforce CLI not found. Please install Salesforce CLI and authenticate with your orgs.';
        }
        
        res.status(500).json({
            success: false,
            error: 'Failed to load organizations',
            message: errorMessage,
            details: error.stderr || error.stack
        });
    }
});

// ========================================
// HEALTH CHECK
// ========================================

router.get("/health", (req, res) => {
    try {
        const state = stateManager.getState();
        res.json({
            app: "data-comparison",
            status: "healthy",
            currentState: state,
            displayName: stateManager.getDisplayName(),
            stateStatus: stateManager.getStatus(),
            timestamp: new Date().toISOString(),
            version: "2.0.0",
            routes: {
                main: "/",
                configGenerator: "/config-generator", 
                orgSelection: "/org-selection",
                dynamicUI: "/:state-ui",
                api: "/api/state"
            }
        });
    } catch (error) {
        res.status(500).json({
            app: "data-comparison",
            status: "error",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

console.log('[DataComparison]  Routes configured successfully');
console.log('[DataComparison] Available routes:');
console.log('  GET  / -> Shell + welcome UI');
console.log('  GET  /config-generator -> Shell + config UI');
console.log('  GET  /org-selection -> Shell + org UI');
console.log('  GET  /:state-ui -> Dynamic appView generation');
console.log('  GET  /api/state -> State info');
console.log('  POST /api/state/set -> Update state');
console.log('  GET  /health -> Health check');

module.exports = router;

Dir: apps\data-comparison\state
Content:

### File: index.js

// apps/data-comparison/state/index.js - Fixed State Manager with Dynamic UI Generation
const path = require('path');
const fs = require('fs');

class DataComparisonStateManager {
    constructor() {
        this.currentState = {
            app: 'data-comparison',
            component: 'welcome',
            data: {},
            timestamp: new Date().toISOString()
        };
        console.log('[StateManager] DataComparisonStateManager initialized');
    }

    setState(component, data = {}) {
        console.log(`[StateManager]  Setting state: ${this.currentState.component}  ${component}`);
        
        this.currentState = {
            app: 'data-comparison',
            component: component,
            data: data,
            timestamp: new Date().toISOString()
        };
        
        console.log(`[StateManager]  State updated:`, this.currentState);
        
        return this.currentState;
    }

    getState() {
        return this.currentState;
    }

    getDisplayName() {
        const names = {
            'welcome': 'Data Comparison - Welcome',
            'configGenerator': 'Data Comparison - Config Generator', 
            'orgSelection': 'Data Comparison - Org Selection',
            'objectSelection': 'Data Comparison - Object Selection',
            'comparison': 'Data Comparison - Running Comparison',
            'results': 'Data Comparison - Results'
        };
        return names[this.currentState.component] || `Data Comparison - ${this.currentState.component}`;
    }

    getStatus() {
        const statuses = {
            'welcome': 'idle',
            'configGenerator': 'loading',
            'orgSelection': 'loading',
            'objectSelection': 'active', 
            'comparison': 'loading',
            'results': 'success'
        };
        return statuses[this.currentState.component] || 'idle';
    }

    // Generate dynamic appView HTML with shell integration
    async generateAppView(component, data = {}) {
        console.log(`[StateManager]  generateAppView called for component: ${component}`);
        
        const projectRoot = process.cwd();
        const componentPath = path.join(projectRoot, 'apps', 'data-comparison', 'components', component);
        
        console.log(`[StateManager]  Project root: ${projectRoot}`);
        console.log(`[StateManager]  Component path: ${componentPath}`);
        console.log(`[StateManager]  Component exists: ${fs.existsSync(componentPath)}`);
        
        // Read component files
        const htmlPath = path.join(componentPath, 'index.html');
        const cssPath = path.join(componentPath, 'index.css');
        const jsPath = path.join(componentPath, 'index.js');
        
        console.log(`[StateManager]  HTML: ${htmlPath} - exists: ${fs.existsSync(htmlPath)}`);
        console.log(`[StateManager]  CSS: ${cssPath} - exists: ${fs.existsSync(cssPath)}`);
        console.log(`[StateManager]  JS: ${jsPath} - exists: ${fs.existsSync(jsPath)}`);
        
        let componentHtml = '';
        let componentCss = '';
        let componentJs = '';
        
        // Extract body content from component HTML
        if (fs.existsSync(htmlPath)) {
            const fullHtml = fs.readFileSync(htmlPath, 'utf8');
            console.log(`[StateManager]  Read HTML file, length: ${fullHtml.length}`);
            
            const bodyMatch = fullHtml.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
            if (bodyMatch) {
                componentHtml = bodyMatch[1];
                console.log(`[StateManager]  Extracted body content, length: ${componentHtml.length}`);
            } else {
                componentHtml = fullHtml;
                console.log(`[StateManager]  No body tag found, using full HTML`);
            }
        } else {
            componentHtml = `
                <div class="component-placeholder" style="padding: 2rem; text-align: center;">
                    <h2>Data Comparison - ${component}</h2>
                    <p>Component content will be loaded here.</p>
                    <p><strong>Debug:</strong> Component files not found at ${componentPath}</p>
                    <div style="margin-top: 1rem; padding: 1rem; background: #f1f5f9; border-radius: 8px;">
                        <p>Expected files:</p>
                        <ul style="text-align: left; display: inline-block;">
                            <li>${htmlPath}</li>
                            <li>${cssPath}</li>
                            <li>${jsPath}</li>
                        </ul>
                    </div>
                </div>
            `;
            console.log(`[StateManager]  HTML file not found, using placeholder`);
        }
        
        // Read component CSS
        if (fs.existsSync(cssPath)) {
            componentCss = fs.readFileSync(cssPath, 'utf8');
            console.log(`[StateManager]  Read CSS file, length: ${componentCss.length}`);
        } else {
            console.log(`[StateManager]  CSS file not found`);
        }
        
        // Read component JS
        if (fs.existsSync(jsPath)) {
            componentJs = fs.readFileSync(jsPath, 'utf8');
            console.log(`[StateManager]  Read JS file, length: ${componentJs.length}`);
            
            // Remove DOMContentLoaded wrappers since we handle initialization differently
            componentJs = componentJs.replace(/document\.addEventListener\(['"]DOMContentLoaded['"],.*?\}\);?\s*$/gs, '');
            console.log(`[StateManager]  Processed JS file, final length: ${componentJs.length}`);
        } else {
            console.log(`[StateManager]  JS file not found`);
        }
        
        // Build complete appView with shell integration
        const appViewHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Comparison - ${component}</title>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /* ========================================
           SHELL THEME INHERITANCE
           ======================================== */
        ${this.getShellThemeCSS()}
        
        /* ========================================
           COMPONENT-SPECIFIC CSS
           ======================================== */
        ${componentCss}
    </style>
</head>
<body data-component="${component}" data-app="data-comparison" data-theme="light">
    <div class="app-container">
        ${componentHtml}
    </div>
    
    <script>
        console.log('[AppView]  Component ${component} script executing');
        
        /* ========================================
           SHELL COMMUNICATION FUNCTIONS
           ======================================== */
        ${this.getShellCommunicationJS()}
        
        /* ========================================
           COMPONENT-SPECIFIC JAVASCRIPT
           ======================================== */
        ${componentJs}
        
        // ========================================
        // INITIALIZATION
        // ========================================
        document.addEventListener('DOMContentLoaded', () => {
            console.log('[AppView]  DOMContentLoaded for component: ${component}');
            
            // Setup shell communication
            setupShellCommunication('${component}');
            
            // Initialize Lucide icons
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
                console.log('[AppView]  Lucide icons initialized');
            }
            
            // Component-specific initialization
            const initFunctionName = 'init' + '${component}'.charAt(0).toUpperCase() + '${component}'.slice(1);
            if (typeof window[initFunctionName] === 'function') {
                try {
                    window[initFunctionName]();
                    console.log('[AppView]  Component init function called:', initFunctionName);
                } catch (error) {
                    console.error('[AppView]  Component init failed:', error);
                }
            }
            
            // Notify shell that app is loaded
            if (window.parent !== window) {
                window.parent.postMessage({
                    type: 'APP_LOADED',
                    data: { 
                        appName: 'Data Comparison - ${component}',
                        component: '${component}',
                        app: 'data-comparison',
                        version: '2.0.0'
                    }
                }, '*');
                console.log('[AppView]  Notified shell that app is loaded');
            }
        });
    </script>
</body>
</html>`;
        
        console.log(`[StateManager]  Generated complete appView HTML, total length: ${appViewHtml.length}`);
        console.log(`[StateManager]  HTML preview (first 200 chars):`);
        console.log(appViewHtml.substring(0, 200) + '...');
        
        return appViewHtml;
    }

    getShellThemeCSS() {
        return `
            /* Theme inheritance from shell */
            :root {
                /* Default fallback values if shell communication fails */
                --app-bg-primary: #ffffff;
                --app-bg-secondary: #f8fafc;
                --app-bg-tertiary: #f1f5f9;
                --app-text-primary: #1e293b;
                --app-text-secondary: #64748b;
                --app-text-tertiary: #94a3b8;
                --app-border: #e2e8f0;
                --app-border-hover: #cbd5e1;
                --app-accent: #3b82f6;
                --app-accent-hover: #2563eb;
                --app-success: #10b981;
                --app-warning: #f59e0b;
                --app-error: #ef4444;
                --app-transition: all 0.3s ease;
                --app-border-radius: 8px;
                --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
            }

            [data-theme="dark"] {
                --app-bg-primary: #0f172a;
                --app-bg-secondary: #1e293b;
                --app-bg-tertiary: #334155;
                --app-text-primary: #f8fafc;
                --app-text-secondary: #cbd5e1;
                --app-text-tertiary: #94a3b8;
                --app-border: #334155;
                --app-border-hover: #475569;
                --app-accent: #60a5fa;
                --app-accent-hover: #3b82f6;
                --app-success: #34d399;
                --app-warning: #fbbf24;
                --app-error: #f87171;
                --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
                --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.4);
            }

            /* Base styles */
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
                background: var(--app-bg-primary);
                color: var(--app-text-primary);
                line-height: 1.6;
                transition: var(--app-transition);
                margin: 0;
                padding: 0;
            }

            .app-container {
                min-height: 100vh;
                background: var(--app-bg-primary);
                transition: var(--app-transition);
            }

            /* Ensure component elements inherit theme */
            .option-card, .feature-card, .generator-state, .card {
                background: var(--app-bg-secondary) !important;
                border-color: var(--app-border) !important;
                color: var(--app-text-primary) !important;
            }

            .btn, button {
                background: var(--app-accent) !important;
                border-color: var(--app-accent) !important;
                color: white !important;
                transition: var(--app-transition) !important;
            }

            .btn:hover, button:hover {
                background: var(--app-accent-hover) !important;
                border-color: var(--app-accent-hover) !important;
            }

            input, select, textarea {
                background: var(--app-bg-primary) !important;
                border-color: var(--app-border) !important;
                color: var(--app-text-primary) !important;
            }
        `;
    }

    getShellCommunicationJS() {
        return `
            // ========================================
            // SHELL COMMUNICATION SETUP
            // ========================================
            function setupShellCommunication(componentName) {
                console.log('[ShellComm]  Setting up communication for:', componentName);
                
                // Listen for theme updates from shell
                window.addEventListener('message', (event) => {
                    // Accept messages from parent (shell) or blob URLs
                    if (event.origin !== window.location.origin && !event.origin.startsWith('blob:')) {
                        return;
                    }
                    
                    const { type, theme, variables } = event.data;
                    
                    if (type === 'THEME_DATA' || type === 'THEME_CHANGED') {
                        console.log('[ShellComm]  Received theme data:', theme);
                        applyTheme(theme, variables);
                    }
                });
                
                // Request theme from shell
                if (window.parent !== window) {
                    window.parent.postMessage({ type: 'REQUEST_THEME' }, '*');
                    console.log('[ShellComm]  Requested theme from shell');
                }
                
                // Global logging function for components
                window.logToShell = function(level, message) {
                    if (window.parent !== window) {
                        window.parent.postMessage({
                            type: 'ADD_LOG',
                            data: {
                                app: 'Data Comparison',
                                level: level,
                                message: message,
                                location: componentName,
                                timestamp: new Date().toISOString()
                            }
                        }, '*');
                    }
                    console.log(\`[\${level.toUpperCase()}] \${message}\`);
                };
                
                // Global state change function for components
                window.changeState = function(newComponent, data = {}) {
                    console.log('[ShellComm]  Changing state to:', newComponent);
                    
                    // Update state via API
                    fetch('/data-comparison/api/state/set', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ component: newComponent, data: data })
                    }).then(response => response.json())
                      .then(result => {
                          if (result.success) {
                              logToShell('info', \`State changed to \${newComponent}\`);
                              
                              // Navigate to new state
                              if (window.parent !== window) {
                                  window.parent.location.href = \`/data-comparison/\${newComponent === 'welcome' ? '' : newComponent}\`;
                              }
                          }
                      })
                      .catch(err => logToShell('error', \`State change failed: \${err.message}\`));
                };
                
                console.log('[ShellComm]  Shell communication setup complete');
            }
            
            // ========================================
            // THEME APPLICATION
            // ========================================
            function applyTheme(theme, variables) {
                console.log('[ShellComm]  Applying theme:', theme);
                
                // Apply theme attribute to body
                document.body.setAttribute('data-theme', theme);
                
                // Apply custom CSS variables if provided
                if (variables) {
                    const root = document.documentElement;
                    let appliedCount = 0;
                    
                    Object.entries(variables).forEach(([key, value]) => {
                        if (value && value.trim()) {
                            root.style.setProperty(\`--app-\${key}\`, value.trim());
                            appliedCount++;
                        }
                    });
                    
                    console.log(\`[ShellComm]  Applied \${appliedCount} theme variables\`);
                }
                
                // Force repaint for immediate visual update
                document.body.style.display = 'none';
                document.body.offsetHeight; // Trigger reflow
                document.body.style.display = '';
                
                console.log(\`[ShellComm]  Theme \${theme} applied successfully\`);
            }
        `;
    }
}

console.log('[StateManager]  Creating DataComparisonStateManager instance');
module.exports = new DataComparisonStateManager();

Dir: apps\data-comparison\storage
Content:

Dir: apps\data-comparison\components\applogger
Content:

Dir: apps\data-comparison\components\appView
Content:

### File: index.css

/* apps/data-comparison/components/appView/index.css */
/* ========================================
   THEME INHERITANCE FROM SHELL
   ======================================== */
:root {
    /* Default fallback values if shell communication fails */
    --app-bg-primary: #ffffff;
    --app-bg-secondary: #f8fafc;
    --app-bg-tertiary: #f1f5f9;
    --app-text-primary: #1e293b;
    --app-text-secondary: #64748b;
    --app-text-tertiary: #94a3b8;
    --app-border: #e2e8f0;
    --app-border-hover: #cbd5e1;
    --app-accent: #3b82f6;
    --app-accent-hover: #2563eb;
    --app-success: #10b981;
    --app-warning: #f59e0b;
    --app-error: #ef4444;
    --app-transition: all 0.3s ease;
    --app-border-radius: 8px;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
}

[data-theme="dark"] {
    --app-bg-primary: #0f172a;
    --app-bg-secondary: #1e293b;
    --app-bg-tertiary: #334155;
    --app-text-primary: #f8fafc;
    --app-text-secondary: #cbd5e1;
    --app-text-tertiary: #94a3b8;
    --app-border: #334155;
    --app-border-hover: #475569;
    --app-accent: #60a5fa;
    --app-accent-hover: #3b82f6;
    --app-success: #34d399;
    --app-warning: #fbbf24;
    --app-error: #f87171;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.4);
}

/* ========================================
   BASE APPVIEW STYLES
   ======================================== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    background: var(--app-bg-primary);
    color: var(--app-text-primary);
    line-height: 1.6;
    transition: var(--app-transition);
    margin: 0;
    padding: 0;
    height: 100vh;
    overflow: hidden;
}

/* ========================================
   LOADING SPINNER OVERLAY
   ======================================== */
.app-loader {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--app-bg-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.app-loader.hidden {
    opacity: 0;
    visibility: hidden;
}

.loader-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    text-align: center;
}

.loader-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid var(--app-border);
    border-top: 4px solid var(--app-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.loader-text {
    font-size: 1.125rem;
    font-weight: 500;
    color: var(--app-text-secondary);
}

.loader-progress {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    width: 200px;
}

.progress-bar {
    width: 100%;
    height: 6px;
    background: var(--app-bg-tertiary);
    border-radius: 3px;
    overflow: hidden;
    border: 1px solid var(--app-border);
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--app-accent), var(--app-accent-hover));
    border-radius: 3px;
    width: 0%;
    transition: width 0.3s ease;
    animation: pulse 1.5s ease-in-out infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

.progress-text {
    font-size: 0.875rem;
    color: var(--app-text-tertiary);
    font-weight: 500;
}

/* ========================================
   COMPONENT CONTAINER
   ======================================== */
.component-container {
    width: 100%;
    height: 100vh;
    overflow: auto;
    background: var(--app-bg-primary);
    opacity: 0;
    transform: translateY(10px);
    transition: var(--app-transition);
}

.component-container.loaded {
    opacity: 1;
    transform: translateY(0);
}

/* Component content wrapper */
.component-content {
    width: 100%;
    min-height: 100vh;
    padding: 2rem;
    background: var(--app-bg-primary);
}

/* ========================================
   ERROR CONTAINER
   ======================================== */
.error-container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--app-bg-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9998;
}

.error-container.hidden {
    display: none;
}

.error-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    text-align: center;
    padding: 2rem;
    background: var(--app-bg-secondary);
    border: 1px solid var(--app-border);
    border-radius: calc(var(--app-border-radius) * 2);
    box-shadow: var(--app-shadow-lg);
}

.error-icon {
    width: 64px;
    height: 64px;
    background: var(--app-error);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
}

.error-icon i {
    width: 28px;
    height: 28px;
}

.error-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
}

.error-message {
    color: var(--app-text-secondary);
    max-width: 400px;
}

.retry-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: var(--app-accent);
    color: white;
    border: none;
    border-radius: var(--app-border-radius);
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: var(--app-transition);
}

.retry-button:hover {
    background: var(--app-accent-hover);
    transform: translateY(-1px);
    box-shadow: var(--app-shadow);
}

.retry-button i {
    width: 16px;
    height: 16px;
}

/* ========================================
   COMPONENT-SPECIFIC OVERRIDES
   ======================================== */

/* Welcome Component Styles */
.component-container .welcome-section {
    background: var(--app-bg-primary);
    color: var(--app-text-primary);
}

.component-container .option-card {
    background: var(--app-bg-secondary);
    border-color: var(--app-border);
}

.component-container .option-card:hover {
    border-color: var(--app-border-hover);
}

/* Config Generator Styles */
.component-container .config-generator {
    background: var(--app-bg-primary);
}

.component-container .generator-state {
    background: var(--app-bg-secondary);
    border-color: var(--app-border);
}

/* Form Elements */
.component-container input,
.component-container select,
.component-container textarea {
    background: var(--app-bg-primary);
    border: 1px solid var(--app-border);
    color: var(--app-text-primary);
    border-radius: var(--app-border-radius);
    transition: var(--app-transition);
}

.component-container input:focus,
.component-container select:focus,
.component-container textarea:focus {
    outline: none;
    border-color: var(--app-accent);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Buttons */
.component-container button {
    transition: var(--app-transition);
}

.component-container .btn-primary {
    background: var(--app-accent);
    border-color: var(--app-accent);
}

.component-container .btn-primary:hover {
    background: var(--app-accent-hover);
    border-color: var(--app-accent-hover);
}

/* ========================================
   RESPONSIVE
   ======================================== */
@media (max-width: 768px) {
    .component-content {
        padding: 1rem;
    }
    
    .loader-progress {
        width: 160px;
    }
    
    .error-content {
        margin: 1rem;
        padding: 1.5rem;
    }
}

/* ========================================
   UTILITIES
   ======================================== */
.hidden {
    display: none !important;
}

.loading {
    pointer-events: none;
    opacity: 0.6;
}

/* Smooth transitions for theme changes */
* {
    transition: background-color 0.3s ease, 
                color 0.3s ease, 
                border-color 0.3s ease,
                box-shadow 0.3s ease;
}

### File: index.js

// apps/data-comparison/components/appView/index.js
class DataComparisonAppView {
    constructor() {
        this.currentComponent = null;
        this.isInExtensionShell = window.parent !== window;
        this.themeReceived = false;
        this.componentCache = new Map();
        
        this.elements = {
            loader: document.getElementById('app-loader'),
            progressFill: document.getElementById('loader-progress-fill'),
            componentContainer: document.getElementById('component-container'),
            errorContainer: document.getElementById('error-container'),
            errorMessage: document.getElementById('error-message'),
            retryButton: document.getElementById('retry-button')
        };

        this.init();
    }

    async init() {
        console.log(' Data Comparison AppView initializing...');
        
        this.setupShellCommunication();
        this.bindEvents();
        this.initializeLucideIcons();
        
        // Request theme from shell
        this.requestThemeData();
        
        // Load initial component based on URL or state
        await this.loadInitialComponent();
        
        this.notifyShellLoaded();
        console.log(' AppView initialized');
    }

    initializeLucideIcons() {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }

    setupShellCommunication() {
        if (!this.isInExtensionShell) {
            console.warn(' Not in extension shell - standalone mode');
            return;
        }

        window.addEventListener('message', (event) => {
            if (event.origin !== window.location.origin) return;

            const { type, theme, variables } = event.data;

            switch (type) {
                case 'THEME_DATA':
                case 'THEME_CHANGED':
                    this.applyTheme(theme, variables);
                    this.themeReceived = true;
                    break;
                    
                default:
                    console.log(' Unknown message from shell:', type);
            }
        });
    }

    requestThemeData() {
        if (this.isInExtensionShell) {
            window.parent.postMessage({ type: 'REQUEST_THEME' }, '*');
            console.log(' Requested theme from shell');
        }
        
        // Fallback if no theme received
        setTimeout(() => {
            if (!this.themeReceived) {
                console.warn(' No theme received, using default');
                this.applyTheme('light', {});
            }
        }, 1000);
    }

    applyTheme(theme, variables) {
        console.log(` Applying theme: ${theme}`, variables);
        
        document.body.setAttribute('data-theme', theme);
        
        if (variables) {
            const root = document.documentElement;
            Object.entries(variables).forEach(([key, value]) => {
                if (value && value.trim()) {
                    root.style.setProperty(`--app-${key}`, value.trim());
                }
            });
        }
        
        // Force repaint
        document.body.style.display = 'none';
        document.body.offsetHeight;
        document.body.style.display = '';
        
        this.sendLogToShell('info', `Theme ${theme} applied`);
    }

    async loadInitialComponent() {
        // Check URL params for component
        const urlParams = new URLSearchParams(window.location.search);
        const component = urlParams.get('component') || 'welcome';
        
        // Check window.INITIAL_COMPONENT (injected by routes)
        const initialComponent = window.INITIAL_COMPONENT || component;
        
        // Check window.APP_STATE for state data
        const appState = window.APP_STATE || {};
        
        console.log(` Loading initial component: ${initialComponent}`, appState);
        
        await this.loadComponent(initialComponent, appState);
    }

    async loadComponent(componentName, stateData = {}) {
        try {
            this.showLoader(`Loading ${componentName}...`);
            this.hideError();
            
            // Update progress
            this.updateLoaderProgress(25, 'Fetching component...');
            
            // Check cache first
            let componentHtml;
            if (this.componentCache.has(componentName)) {
                componentHtml = this.componentCache.get(componentName);
                this.updateLoaderProgress(50, 'Loading from cache...');
            } else {
                // Fetch component HTML
                const response = await fetch(`/data-comparison/components/${componentName}/index.html`);
                if (!response.ok) {
                    throw new Error(`Component ${componentName} not found (${response.status})`);
                }
                
                componentHtml = await response.text();
                this.componentCache.set(componentName, componentHtml);
                this.updateLoaderProgress(50, 'Component fetched...');
            }
            
            // Load into container
            this.elements.componentContainer.innerHTML = componentHtml;
            this.updateLoaderProgress(75, 'Rendering component...');
            
            // Load component assets (CSS/JS)
            await this.loadComponentAssets(componentName);
            this.updateLoaderProgress(100, 'Component ready!');
            
            // Reinitialize icons for new content
            this.initializeLucideIcons();
            
            // Show component with animation
            setTimeout(() => {
                this.elements.componentContainer.classList.add('loaded');
                this.hideLoader();
                this.currentComponent = componentName;
                
                // Initialize component if it has an init function
                this.initializeComponent(componentName, stateData);
                
                this.sendLogToShell('info', `Component ${componentName} loaded successfully`);
            }, 300);
            
        } catch (error) {
            console.error(' Component load failed:', error);
            this.showError(error.message);
            this.sendLogToShell('error', `Failed to load component ${componentName}: ${error.message}`);
        }
    }

    async loadComponentAssets(componentName) {
        const promises = [];
        
        // Load CSS
        const cssPromise = this.loadCSS(`/data-comparison/components/${componentName}/index.css`);
        promises.push(cssPromise);
        
        // Load JS
        const jsPromise = this.loadJS(`/data-comparison/components/${componentName}/index.js`);
        promises.push(jsPromise);
        
        await Promise.allSettled(promises);
    }

    loadCSS(href) {
        return new Promise((resolve, reject) => {
            const existingLink = document.querySelector(`link[href="${href}"]`);
            if (existingLink) {
                resolve();
                return;
            }
            
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = href;
            link.onload = resolve;
            link.onerror = () => {
                console.warn(` CSS not found: ${href}`);
                resolve(); // Don't fail for missing CSS
            };
            document.head.appendChild(link);
        });
    }

    loadJS(src) {
        return new Promise((resolve, reject) => {
            const existingScript = document.querySelector(`script[src="${src}"]`);
            if (existingScript) {
                resolve();
                return;
            }
            
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = () => {
                console.warn(` JS not found: ${src}`);
                resolve(); // Don't fail for missing JS
            };
            document.head.appendChild(script);
        });
    }

    initializeComponent(componentName, stateData) {
        // Try to initialize component-specific functionality
        const initFunctionName = `init${componentName.charAt(0).toUpperCase() + componentName.slice(1)}`;
        
        if (typeof window[initFunctionName] === 'function') {
            try {
                window[initFunctionName](stateData, this);
                console.log(` Component ${componentName} initialized`);
            } catch (error) {
                console.warn(` Component init failed:`, error);
            }
        }
        
        // Generic component setup
        this.setupComponentEventDelegation();
    }

    setupComponentEventDelegation() {
        // Add event delegation for common component interactions
        this.elements.componentContainer.addEventListener('click', (e) => {
            // Handle navigation requests
            if (e.target.dataset.navigate) {
                const component = e.target.dataset.navigate;
                const data = e.target.dataset.navigationData ? 
                    JSON.parse(e.target.dataset.navigationData) : {};
                this.loadComponent(component, data);
            }
            
            // Handle state changes
            if (e.target.dataset.stateChange) {
                const stateChange = JSON.parse(e.target.dataset.stateChange);
                this.notifyStateChange(stateChange.component, stateChange.data);
            }
        });
    }

    showLoader(text = 'Loading...') {
        this.elements.loader.classList.remove('hidden');
        this.elements.componentContainer.classList.remove('loaded');
        this.updateLoaderProgress(0, text);
    }

    hideLoader() {
        this.elements.loader.classList.add('hidden');
    }

    updateLoaderProgress(progress, text) {
        this.elements.progressFill.style.width = `${progress}%`;
        
        const progressText = this.elements.loader.querySelector('.progress-text');
        const loaderText = this.elements.loader.querySelector('.loader-text');
        
        if (progressText) progressText.textContent = `${progress}%`;
        if (loaderText && text) loaderText.textContent = text;
    }

    showError(message) {
        this.elements.errorContainer.classList.remove('hidden');
        this.elements.errorMessage.textContent = message;
        this.hideLoader();
        this.initializeLucideIcons();
    }

    hideError() {
        this.elements.errorContainer.classList.add('hidden');
    }

    bindEvents() {
        // Retry button
        this.elements.retryButton?.addEventListener('click', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const component = urlParams.get('component') || 'welcome';
            this.loadComponent(component);
        });
    }

    // Communication with shell
    sendLogToShell(level, message) {
        if (this.isInExtensionShell) {
            window.parent.postMessage({
                type: 'ADD_LOG',
                data: {
                    app: 'Data Comparison',
                    level: level,
                    message: message,
                    location: 'appView',
                    timestamp: new Date().toISOString()
                }
            }, '*');
        }
    }

    notifyShellLoaded() {
        if (this.isInExtensionShell) {
            window.parent.postMessage({
                type: 'APP_LOADED',
                data: {
                    appName: 'Data Comparison',
                    version: '2.0.0'
                }
            }, '*');
        }
    }

    notifyStateChange(component, data) {
        // Update app state via API
        fetch('/data-comparison/api/state', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ component, data })
        }).then(response => response.json())
          .then(result => {
              if (result.success) {
                  this.sendLogToShell('info', `State changed to ${component}`);
              }
          })
          .catch(err => {
              this.sendLogToShell('error', `State change failed: ${err.message}`);
          });
    }

    // Public API for components
    navigateToComponent(componentName, data = {}) {
        this.loadComponent(componentName, data);
    }

    updateShellState(state, message) {
        if (this.isInExtensionShell) {
            window.parent.postMessage({
                type: 'APP_STATE_CHANGED',
                data: { state, message }
            }, '*');
        }
    }

    showShellLoader(text, progress = 0) {
        if (this.isInExtensionShell) {
            window.parent.postMessage({
                type: 'SHOW_LOADER',
                data: { text, progress }
            }, '*');
        }
    }

    hideShellLoader() {
        if (this.isInExtensionShell) {
            window.parent.postMessage({
                type: 'HIDE_LOADER'
            }, '*');
        }
    }
}

// Initialize AppView
document.addEventListener('DOMContentLoaded', () => {
    console.log(' DOM loaded, initializing AppView...');
    window.dataComparisonAppView = new DataComparisonAppView();
});

// Global API for components
window.AppView = {
    navigate: (component, data) => window.dataComparisonAppView?.navigateToComponent(component, data),
    updateState: (state, message) => window.dataComparisonAppView?.updateShellState(state, message),
    showLoader: (text, progress) => window.dataComparisonAppView?.showShellLoader(text, progress),
    hideLoader: () => window.dataComparisonAppView?.hideShellLoader(),
    log: (level, message) => window.dataComparisonAppView?.sendLogToShell(level, message)
};

Dir: apps\data-comparison\components\modules
Content:

Dir: apps\data-comparison\components\orgSelection
Content:

### File: index.css

/* ========================================
   ORG SELECTION THEME INHERITANCE
   ======================================== */
:root {
    /* Default Light Theme (fallback if shell doesn't provide) */
    --app-bg-primary: #ffffff;
    --app-bg-secondary: #f8fafc;
    --app-bg-tertiary: #f1f5f9;
    --app-text-primary: #1e293b;
    --app-text-secondary: #64748b;
    --app-text-tertiary: #94a3b8;
    --app-border: #e2e8f0;
    --app-border-hover: #cbd5e1;
    --app-accent: #3b82f6;
    --app-accent-hover: #2563eb;
    --app-success: #10b981;
    --app-warning: #f59e0b;
    --app-error: #ef4444;
    --app-transition: all 0.3s ease;
    --app-border-radius: 8px;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
    
    /* Component-specific variables */
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    --spacing-2xl: 3rem;
    
    /* Org Selection specific colors */
    --org-selection-primary: #8b5cf6;
    --org-selection-primary-hover: #7c3aed;
    --org-filter-primary: #06b6d4;
    --org-filter-primary-hover: #0891b2;
}

[data-theme="dark"] {
    --app-bg-primary: #0f172a;
    --app-bg-secondary: #1e293b;
    --app-bg-tertiary: #334155;
    --app-text-primary: #f8fafc;
    --app-text-secondary: #cbd5e1;
    --app-text-tertiary: #94a3b8;
    --app-border: #334155;
    --app-border-hover: #475569;
    --app-accent: #60a5fa;
    --app-accent-hover: #3b82f6;
    --app-success: #34d399;
    --app-warning: #fbbf24;
    --app-error: #f87171;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.4);
}

/* ========================================
   BASE STYLES
   ======================================== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    background: var(--app-bg-primary);
    color: var(--app-text-primary);
    line-height: 1.6;
    transition: var(--app-transition);
    margin: 0;
    padding: 0;
}

.app-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background: var(--app-bg-primary);
}

/* ========================================
   HEADER SECTION
   ======================================== */
.org-selection-header {
    background: var(--app-bg-secondary);
    border-bottom: 1px solid var(--app-border);
    padding: var(--spacing-xl) var(--spacing-lg);
}

.header-content {
    max-width: 1200px;
    margin: 0 auto;
}

.breadcrumb {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    font-size: 0.875rem;
}

.breadcrumb-item {
    color: var(--app-text-secondary);
}

.breadcrumb-item.active {
    color: var(--app-text-primary);
    font-weight: 500;
}

.breadcrumb-separator {
    width: 16px;
    height: 16px;
    color: var(--app-text-tertiary);
}

.page-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.page-description {
    font-size: 1.125rem;
    color: var(--app-text-secondary);
    max-width: 600px;
}

/* ========================================
   PROGRESS STEPS
   ======================================== */
.progress-steps {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-xl) var(--spacing-lg);
    background: var(--app-bg-primary);
    border-bottom: 1px solid var(--app-border);
}

.step {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    padding: var(--spacing-md) var(--spacing-lg);
    border-radius: var(--app-border-radius);
    background: var(--app-bg-secondary);
    border: 2px solid var(--app-border);
    transition: var(--app-transition);
    opacity: 0.6;
    min-width: 200px;
}

.step.active {
    opacity: 1;
    border-color: var(--org-selection-primary);
    background: var(--org-selection-primary);
    color: white;
}

.step.completed {
    opacity: 1;
    border-color: var(--app-success);
    background: var(--app-success);
    color: white;
}

.step-icon {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.2);
    color: inherit;
}

.step:not(.active):not(.completed) .step-icon {
    background: var(--app-bg-tertiary);
    color: var(--app-text-tertiary);
}

.step-content {
    display: flex;
    flex-direction: column;
}

.step-title {
    font-weight: 600;
    font-size: 1rem;
}

.step-description {
    font-size: 0.875rem;
    opacity: 0.8;
}

.step-connector {
    width: 60px;
    height: 2px;
    background: var(--app-border);
    margin: 0 var(--spacing-md);
}

/* ========================================
   MAIN CONTENT
   ======================================== */
.org-selection-main {
    flex: 1;
    padding: var(--spacing-xl) var(--spacing-lg);
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
}

.state-container {
    display: none;
}

.state-container:not(.hidden) {
    display: block;
}

/* ========================================
   LOADING STATE
   ======================================== */
.loading-state {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 400px;
}

.loading-content {
    text-align: center;
    max-width: 400px;
}

.loading-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid var(--app-border);
    border-top: 4px solid var(--org-selection-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto var(--spacing-lg);
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.loading-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.loading-text {
    color: var(--app-text-secondary);
    margin-bottom: var(--spacing-lg);
}

.loading-details {
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;
    font-size: 0.875rem;
    color: var(--app-text-tertiary);
    background: var(--app-bg-tertiary);
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--app-border-radius);
    border: 1px solid var(--app-border);
}

/* ========================================
   ERROR STATE
   ======================================== */
.error-state {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 400px;
}

.error-content {
    text-align: center;
    max-width: 500px;
}

.error-icon {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    background: var(--app-error);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto var(--spacing-lg);
}

.error-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.error-message {
    color: var(--app-text-secondary);
    margin-bottom: var(--spacing-xl);
}

.error-actions {
    display: flex;
    gap: var(--spacing-md);
    justify-content: center;
}

/* ========================================
   ORG SELECTION STATE
   ======================================== */
.selection-header {
    margin-bottom: var(--spacing-xl);
}

.selection-header h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-md);
}

.selection-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-md);
    background: var(--app-bg-tertiary);
    border-radius: var(--app-border-radius);
    border: 1px solid var(--app-border);
}

.selection-info {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-size: 0.875rem;
}

.selection-requirement {
    color: var(--app-text-tertiary);
}

.toolbar-actions {
    display: flex;
    gap: var(--spacing-md);
}

.orgs-container {
    margin-bottom: var(--spacing-xl);
}

.orgs-list {
    display: grid;
    gap: var(--spacing-md);
    max-height: 500px;
    overflow-y: auto;
    padding: var(--spacing-sm);
}

.org-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    padding: var(--spacing-lg);
    background: var(--app-bg-secondary);
    border: 2px solid var(--app-border);
    border-radius: var(--app-border-radius);
    cursor: pointer;
    transition: var(--app-transition);
}

.org-item:hover {
    border-color: var(--app-border-hover);
    background: var(--app-bg-tertiary);
}

.org-item.selected {
    border-color: var(--org-selection-primary);
    background: rgba(139, 92, 246, 0.1);
}

.org-checkbox {
    display: flex;
    align-items: center;
}

.org-checkbox input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: var(--org-selection-primary);
    cursor: pointer;
}

.org-info {
    flex: 1;
}

.org-name {
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-xs);
}

.org-details {
    display: flex;
    gap: var(--spacing-md);
    font-size: 0.875rem;
}

.org-username {
    color: var(--app-text-secondary);
}

.org-status {
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
}

.org-status.connected {
    background: rgba(16, 185, 129, 0.1);
    color: var(--app-success);
}

.org-status.disconnected {
    background: rgba(239, 68, 68, 0.1);
    color: var(--app-error);
}

.org-type {
    padding: 0.25rem 0.75rem;
    background: var(--app-bg-tertiary);
    border-radius: 6px;
    font-size: 0.75rem;
    color: var(--app-text-tertiary);
}

.selection-actions {
    display: flex;
    justify-content: center;
}

/* ========================================
   DATE FILTERS STATE
   ======================================== */
.filters-header {
    text-align: center;
    margin-bottom: var(--spacing-xl);
}

.filters-header h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.filters-header p {
    color: var(--app-text-secondary);
    max-width: 600px;
    margin: 0 auto;
}

.org-filters-container {
    display: grid;
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-xl);
}

.org-filter-card {
    background: var(--app-bg-secondary);
    border: 1px solid var(--app-border);
    border-radius: calc(var(--app-border-radius) * 1.5);
    padding: var(--spacing-xl);
}

.org-filter-header {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
    padding-bottom: var(--spacing-md);
    border-bottom: 1px solid var(--app-border);
}

.org-filter-icon {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--org-filter-primary), var(--org-filter-primary-hover));
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
}

.org-filter-info h4 {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: 0.25rem;
}

.org-filter-info p {
    color: var(--app-text-secondary);
    font-size: 0.875rem;
}

.date-filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--spacing-lg);
}

.date-filter-group {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
}

.date-filter-label {
    font-weight: 500;
    color: var(--app-text-primary);
    font-size: 0.875rem;
}

.date-range {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: var(--spacing-sm);
    align-items: center;
}

.date-input {
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid var(--app-border);
    border-radius: var(--app-border-radius);
    background: var(--app-bg-primary);
    color: var(--app-text-primary);
    font-size: 0.875rem;
    transition: var(--app-transition);
}

.date-input:focus {
    outline: none;
    border-color: var(--org-filter-primary);
    box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
}

.date-separator {
    color: var(--app-text-tertiary);
    font-size: 0.875rem;
    text-align: center;
}

.filters-actions {
    display: flex;
    justify-content: space-between;
    gap: var(--spacing-md);
}

/* ========================================
   CONFIG GENERATION STATE
   ======================================== */
.config-generation-state,
.success-state {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 400px;
}

.generation-content,
.success-content {
    text-align: center;
    max-width: 500px;
}

.generation-icon,
.success-icon {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto var(--spacing-lg);
    color: white;
}

.generation-icon {
    background: var(--org-selection-primary);
    animation: pulse 2s ease-in-out infinite;
}

.success-icon {
    background: var(--app-success);
}

@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.generation-title,
.success-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.generation-text,
.success-text {
    color: var(--app-text-secondary);
    margin-bottom: var(--spacing-xl);
}

.generation-progress {
    margin-bottom: var(--spacing-xl);
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: var(--app-bg-tertiary);
    border-radius: 4px;
    overflow: hidden;
    border: 1px solid var(--app-border);
    margin-bottom: var(--spacing-sm);
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--org-selection-primary), var(--org-selection-primary-hover));
    border-radius: 4px;
    transition: width 0.3s ease;
    animation: progress-pulse 1.5s ease-in-out infinite;
}

@keyframes progress-pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
}

.progress-text {
    color: var(--org-selection-primary);
    font-weight: 600;
    font-size: 0.875rem;
}

.generation-details,
.config-summary {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-xl);
}

.detail-item,
.summary-item {
    display: flex;
    justify-content: space-between;
    padding: var(--spacing-sm) 0;
    border-bottom: 1px solid var(--app-border);
}

.detail-label,
.summary-label {
    color: var(--app-text-secondary);
    font-weight: 500;
}

.detail-value,
.summary-value {
    color: var(--app-text-primary);
    font-weight: 600;
}

.success-actions {
    display: flex;
    gap: var(--spacing-md);
    justify-content: center;
}

/* ========================================
   BUTTONS
   ======================================== */
.btn {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-md) var(--spacing-lg);
    border: none;
    border-radius: var(--app-border-radius);
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: var(--app-transition);
    text-decoration: none;
    white-space: nowrap;
}

.btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.btn-primary {
    background: var(--org-selection-primary);
    color: white;
}

.btn-primary:not(:disabled):hover {
    background: var(--org-selection-primary-hover);
    transform: translateY(-1px);
    box-shadow: var(--app-shadow);
}

.btn-secondary {
    background: var(--org-filter-primary);
    color: white;
}

.btn-secondary:not(:disabled):hover {
    background: var(--org-filter-primary-hover);
    transform: translateY(-1px);
    box-shadow: var(--app-shadow);
}

.btn-outline {
    background: transparent;
    color: var(--app-text-primary);
    border: 2px solid var(--app-border);
}

.btn-outline:hover {
    border-color: var(--app-border-hover);
    background: var(--app-bg-tertiary);
}

.btn-link {
    background: none;
    border: none;
    color: var(--app-accent);
    cursor: pointer;
    font-size: 0.875rem;
    padding: var(--spacing-sm);
    border-radius: 4px;
    transition: var(--app-transition);
}

.btn-link:hover {
    background: rgba(59, 130, 246, 0.1);
    color: var(--app-accent-hover);
}

/* ========================================
   TOAST NOTIFICATIONS
   ======================================== */
.toast-container {
    position: fixed;
    top: var(--spacing-lg);
    right: var(--spacing-lg);
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
}

.toast {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-md) var(--spacing-lg);
    background: var(--app-bg-primary);
    border: 1px solid var(--app-border);
    border-radius: var(--app-border-radius);
    box-shadow: var(--app-shadow-lg);
    min-width: 300px;
    animation: slideIn 0.3s ease;
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.toast-success {
    border-left: 4px solid var(--app-success);
}

.toast-error {
    border-left: 4px solid var(--app-error);
}

.toast-info {
    border-left: 4px solid var(--app-accent);
}

.toast i {
    width: 18px;
    height: 18px;
}

.toast-success i {
    color: var(--app-success);
}

.toast-error i {
    color: var(--app-error);
}

.toast-info i {
    color: var(--app-accent);
}

/* ========================================
   UTILITIES
   ======================================== */
.hidden {
    display: none !important;
}

/* ========================================
   RESPONSIVE
   ======================================== */
@media (max-width: 768px) {
    .org-selection-header {
        padding: var(--spacing-lg) var(--spacing-md);
    }
    
    .org-selection-main {
        padding: var(--spacing-lg) var(--spacing-md);
    }
    
    .page-title {
        font-size: 1.75rem;
    }
    
    .progress-steps {
        flex-direction: column;
        gap: var(--spacing-md);
    }
    
    .step {
        min-width: auto;
        width: 100%;
    }
    
    .step-connector {
        display: none;
    }
    
    .selection-toolbar {
        flex-direction: column;
        gap: var(--spacing-md);
        align-items: stretch;
    }
    
    .toolbar-actions {
        justify-content: center;
    }
    
    .filters-actions,
    .success-actions,
    .error-actions {
        flex-direction: column;
    }
    
    .date-filters-grid {
        grid-template-columns: 1fr;
    }
    
    .date-range {
        grid-template-columns: 1fr;
        gap: var(--spacing-xs);
    }
    
    .date-separator {
        display: none;
    }
}

### File: index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Org Selection - Data Comparison</title>
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
    <div class="app-container">
        <!-- Header Section -->
        <header class="org-selection-header">
            <div class="header-content">
                <div class="breadcrumb">
                    <span class="breadcrumb-item">Data Comparison</span>
                    <i data-lucide="chevron-right" class="breadcrumb-separator"></i>
                    <span class="breadcrumb-item active">Organization Selection</span>
                </div>
                <h1 class="page-title">Select Organizations</h1>
                <p class="page-description">
                    Choose the Salesforce organizations you want to compare for CPQ configuration differences.
                </p>
            </div>
        </header>

        <!-- Progress Steps -->
        <div class="progress-steps">
            <div class="step active" id="step-orgs">
                <div class="step-icon">
                    <i data-lucide="building"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">Select Organizations</div>
                    <div class="step-description">Choose orgs to compare</div>
                </div>
            </div>
            <div class="step-connector"></div>
            <div class="step" id="step-filters">
                <div class="step-icon">
                    <i data-lucide="filter"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">Configure Filters</div>
                    <div class="step-description">Set date filters per org</div>
                </div>
            </div>
            <div class="step-connector"></div>
            <div class="step" id="step-generate">
                <div class="step-icon">
                    <i data-lucide="settings"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">Generate Config</div>
                    <div class="step-description">Create configuration file</div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <main class="org-selection-main">
            <!-- Loading State -->
            <div id="loading-state" class="state-container loading-state">
                <div class="loading-content">
                    <div class="loading-spinner"></div>
                    <h3 class="loading-title">Loading Organizations</h3>
                    <p class="loading-text">Fetching authenticated Salesforce organizations...</p>
                    <div class="loading-details">
                        <span class="loading-step">Executing: sf org list --json</span>
                    </div>
                </div>
            </div>

            <!-- Error State -->
            <div id="error-state" class="state-container error-state hidden">
                <div class="error-content">
                    <div class="error-icon">
                        <i data-lucide="alert-circle"></i>
                    </div>
                    <h3 class="error-title">Failed to Load Organizations</h3>
                    <p class="error-message" id="error-message">An error occurred while loading organizations.</p>
                    <div class="error-actions">
                        <button id="retry-btn" class="btn btn-secondary">
                            <i data-lucide="refresh-cw"></i>
                            Try Again
                        </button>
                        <button id="back-btn" class="btn btn-outline">
                            <i data-lucide="arrow-left"></i>
                            Back to Welcome
                        </button>
                    </div>
                </div>
            </div>

            <!-- Org Selection State -->
            <div id="org-selection-state" class="state-container org-selection-state hidden">
                <div class="selection-header">
                    <h3>Available Organizations</h3>
                    <div class="selection-toolbar">
                        <div class="selection-info">
                            <span id="selection-count">0 organizations selected</span>
                            <span class="selection-requirement">(select 2 or more)</span>
                        </div>
                        <div class="toolbar-actions">
                            <button id="select-all-btn" class="btn-link">
                                <i data-lucide="check-square"></i>
                                Select All
                            </button>
                            <button id="clear-selection-btn" class="btn-link">
                                <i data-lucide="square"></i>
                                Clear
                            </button>
                        </div>
                    </div>
                </div>

                <div id="orgs-container" class="orgs-container">
                    <div id="orgs-list" class="orgs-list">
                        <!-- Organizations will be populated here -->
                    </div>
                </div>

                <div class="selection-actions">
                    <button id="configure-filters-btn" class="btn btn-primary" disabled>
                        <i data-lucide="filter"></i>
                        Configure Date Filters
                    </button>
                </div>
            </div>

            <!-- Date Filters State -->
            <div id="date-filters-state" class="state-container date-filters-state hidden">
                <div class="filters-header">
                    <h3>Configure Date Filters</h3>
                    <p>Set date ranges for each selected organization to filter records during comparison.</p>
                </div>

                <div id="org-filters-container" class="org-filters-container">
                    <!-- Org-specific filters will be populated here -->
                </div>

                <div class="filters-actions">
                    <button id="back-to-orgs-btn" class="btn btn-outline">
                        <i data-lucide="arrow-left"></i>
                        Back to Org Selection
                    </button>
                    <button id="generate-config-btn" class="btn btn-primary">
                        <i data-lucide="save"></i>
                        Generate Configuration
                    </button>
                </div>
            </div>

            <!-- Config Generation State -->
            <div id="config-generation-state" class="state-container config-generation-state hidden">
                <div class="generation-content">
                    <div class="generation-icon">
                        <i data-lucide="settings"></i>
                    </div>
                    <h3 class="generation-title">Generating Configuration</h3>
                    <p class="generation-text">Creating configuration file with selected organizations and filters...</p>
                    
                    <div class="generation-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" id="generation-progress-fill"></div>
                        </div>
                        <div class="progress-text" id="generation-progress-text">0%</div>
                    </div>

                    <div class="generation-details">
                        <div class="detail-item">
                            <span class="detail-label">Organizations:</span>
                            <span id="generation-org-count" class="detail-value">0</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Config File:</span>
                            <span id="generation-filename" class="detail-value">Generating...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Success State -->
            <div id="success-state" class="state-container success-state hidden">
                <div class="success-content">
                    <div class="success-icon">
                        <i data-lucide="check-circle"></i>
                    </div>
                    <h3 class="success-title">Configuration Generated Successfully!</h3>
                    <p class="success-text">Your comparison configuration has been created and saved.</p>
                    
                    <div class="config-summary">
                        <div class="summary-item">
                            <span class="summary-label">Configuration File:</span>
                            <span id="success-filename" class="summary-value">config_xxx.json</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Organizations:</span>
                            <span id="success-org-count" class="summary-value">0</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Created:</span>
                            <span id="success-created-time" class="summary-value">Just now</span>
                        </div>
                    </div>

                    <div class="success-actions">
                        <button id="proceed-to-config-btn" class="btn btn-primary">
                            <i data-lucide="arrow-right"></i>
                            Proceed to Configuration Generator
                        </button>
                        <button id="create-another-btn" class="btn btn-outline">
                            <i data-lucide="plus"></i>
                            Create Another Configuration
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Toast Container -->
    <div id="toast-container" class="toast-container"></div>

</body>
</html>

### File: index.js

/**
 * Org Selection Component - Data Comparison App
 * Handles Salesforce org selection with date filters and config generation
 * Integrates with shell communication and sfdxRunner
 */

class OrgSelection {
    constructor() {
        this.appName = 'Org Selection';
        this.appVersion = '1.0.0';
        this.currentState = 'loading'; // loading, error, org-selection, date-filters, config-generation, success
        this.isInExtensionShell = window.parent !== window;
        this.logger = null;
        this.themeReceived = false;

        // Data state
        this.organizations = [];
        this.selectedOrgs = [];
        this.configData = null;
        this.generatedFilename = null;

        // Elements
        this.elements = {
            // Steps
            stepOrgs: document.getElementById('step-orgs'),
            stepFilters: document.getElementById('step-filters'),
            stepGenerate: document.getElementById('step-generate'),
            
            // States
            loadingState: document.getElementById('loading-state'),
            errorState: document.getElementById('error-state'),
            orgSelectionState: document.getElementById('org-selection-state'),
            dateFiltersState: document.getElementById('date-filters-state'),
            configGenerationState: document.getElementById('config-generation-state'),
            successState: document.getElementById('success-state'),
            
            // Org Selection
            errorMessage: document.getElementById('error-message'),
            retryBtn: document.getElementById('retry-btn'),
            backBtn: document.getElementById('back-btn'),
            selectionCount: document.getElementById('selection-count'),
            selectAllBtn: document.getElementById('select-all-btn'),
            clearSelectionBtn: document.getElementById('clear-selection-btn'),
            orgsList: document.getElementById('orgs-list'),
            configureFiltersBtn: document.getElementById('configure-filters-btn'),
            
            // Date Filters
            orgFiltersContainer: document.getElementById('org-filters-container'),
            backToOrgsBtn: document.getElementById('back-to-orgs-btn'),
            generateConfigBtn: document.getElementById('generate-config-btn'),
            
            // Config Generation
            generationProgressFill: document.getElementById('generation-progress-fill'),
            generationProgressText: document.getElementById('generation-progress-text'),
            generationOrgCount: document.getElementById('generation-org-count'),
            generationFilename: document.getElementById('generation-filename'),
            
            // Success
            successFilename: document.getElementById('success-filename'),
            successOrgCount: document.getElementById('success-org-count'),
            successCreatedTime: document.getElementById('success-created-time'),
            proceedToConfigBtn: document.getElementById('proceed-to-config-btn'),
            createAnotherBtn: document.getElementById('create-another-btn'),
            
            // Toast
            toastContainer: document.getElementById('toast-container')
        };

        this.init();
    }

    async init() {
        console.log(` ${this.appName} initializing...`);
        console.log(` In extension shell: ${this.isInExtensionShell}`);
        
        this.setupLogger();
        this.initializeLucideIcons();
        this.setupExtensionCommunication();
        this.bindEvents();
        this.notifyExtensionLoaded();
        this.setInitialState();
        
        // Start org loading
        await this.loadOrganizations();
        
        this.logger.info('Org Selection component initialized');
    }

    setupLogger() {
        // Browser-compatible logger that communicates with Extension Shell
        this.logger = {
            log: (level, message, data = null) => {
                const timestamp = new Date().toISOString();
                const formatted = `[${timestamp}] [${level.toUpperCase()}] [${this.appName}] ${message}`;
                
                // Console output with colors
                const colors = {
                    error: 'color: #ef4444; font-weight: bold;',
                    warn: 'color: #f59e0b; font-weight: bold;',
                    info: 'color: #3b82f6; font-weight: bold;',
                    debug: 'color: #8b5cf6; font-weight: bold;',
                    trace: 'color: #64748b; font-weight: bold;'
                };

                console.log(`%c${formatted}`, colors[level] || '');
                
                if (data) {
                    console.log('Data:', data);
                }

                // Send to Extension Shell
                this.postMessageToExtension({
                    type: 'ADD_LOG',
                    data: {
                        app: this.appName,
                        level: level,
                        message: data ? `${message} ${JSON.stringify(data)}` : message,
                        location: 'orgSelection/index.js',
                        timestamp: timestamp
                    }
                });
            },
            error: (message, data) => this.logger.log('error', message, data),
            warn: (message, data) => this.logger.log('warn', message, data),
            info: (message, data) => this.logger.log('info', message, data),
            debug: (message, data) => this.logger.log('debug', message, data),
            trace: (message, data) => this.logger.log('trace', message, data)
        };
    }

    initializeLucideIcons() {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
            this.logger.debug('Lucide icons initialized');
        } else {
            this.logger.warn('Lucide icons not available');
        }
    }

    setupExtensionCommunication() {
        if (!this.isInExtensionShell) {
            this.logger.warn('Not running in Extension Shell - standalone mode');
            return;
        }

        this.logger.info('Extension Shell communication established');

        // Listen for messages from Extension Shell
        window.addEventListener('message', (event) => {
            if (event.origin !== window.location.origin) {
                return;
            }

            const { type, theme, variables } = event.data;

            switch (type) {
                case 'THEME_CHANGED':
                    this.logger.info(`Theme changed to: ${theme}`);
                    this.updateTheme(theme, variables);
                    break;
                    
                case 'THEME_DATA':
                    this.logger.info(`Received theme data: ${theme}`, variables);
                    this.updateTheme(theme, variables);
                    this.themeReceived = true;
                    break;
                    
                default:
                    this.logger.trace('Received unknown message type', { type });
            }
        });

        // Request initial theme data
        this.requestThemeData();
    }

    requestThemeData() {
        this.postMessageToExtension({
            type: 'REQUEST_THEME'
        });
        this.logger.debug('Requested theme data from shell');
        
        // Fallback: if no theme received in 2 seconds, apply default
        setTimeout(() => {
            if (!this.themeReceived) {
                this.logger.warn('No theme data received from shell, applying default');
                this.updateTheme('light', {});
            }
        }, 2000);
    }

    updateTheme(theme, variables) {
        this.logger.info(`Applying theme: ${theme}`, variables);

        // Apply theme class to body
        document.body.setAttribute('data-theme', theme);
        
        // Apply theme variables if provided
        if (variables) {
            const root = document.documentElement;
            let appliedCount = 0;
            
            Object.entries(variables).forEach(([key, value]) => {
                if (value && value.trim()) {
                    root.style.setProperty(`--app-${key}`, value.trim());
                    appliedCount++;
                }
            });
            
            this.logger.debug(`Applied ${appliedCount} theme variables`);
        }

        // Force repaint
        document.body.style.display = 'none';
        document.body.offsetHeight; // Trigger reflow
        document.body.style.display = '';
        
        this.logger.info(`Theme ${theme} applied successfully`);
    }

    postMessageToExtension(message) {
        if (this.isInExtensionShell && window.parent) {
            window.parent.postMessage(message, '*');
        }
    }

    notifyExtensionLoaded() {
        this.postMessageToExtension({
            type: 'APP_LOADED',
            data: { 
                appName: this.appName,
                version: this.appVersion
            }
        });
        this.logger.info('Notified Extension Shell of app load');
    }

    setInitialState() {
        this.setAppState('loading', 'Loading organizations');
        this.setState('loading');
        this.logger.debug('Initial state set');
    }

    setAppState(state, message = '') {
        this.postMessageToExtension({
            type: 'APP_STATE_CHANGED',
            data: { state, message: message || this.capitalizeFirst(state) }
        });
        this.logger.debug('App state changed', { state, message });
    }

    showLoader(text, progress = 0) {
        this.postMessageToExtension({
            type: 'SHOW_LOADER',
            data: { text, progress }
        });
    }

    updateLoader(progress, text = null) {
        this.postMessageToExtension({
            type: 'UPDATE_LOADER',
            data: { progress, text }
        });
    }

    hideLoader() {
        this.postMessageToExtension({
            type: 'HIDE_LOADER'
        });
    }

    // ========================================
    // STATE MANAGEMENT
    // ========================================

    setState(newState) {
        this.logger.info(`State transition: ${this.currentState}  ${newState}`);
        
        this.currentState = newState;
        
        // Hide all state containers
        Object.values(this.elements).forEach(element => {
            if (element && element.classList && element.classList.contains('state-container')) {
                element.classList.add('hidden');
            }
        });
        
        // Show current state
        const stateMap = {
            'loading': this.elements.loadingState,
            'error': this.elements.errorState,
            'org-selection': this.elements.orgSelectionState,
            'date-filters': this.elements.dateFiltersState,
            'config-generation': this.elements.configGenerationState,
            'success': this.elements.successState
        };
        
        const currentContainer = stateMap[newState];
        if (currentContainer) {
            currentContainer.classList.remove('hidden');
        }
        
        // Update step indicators
        this.updateStepIndicators();
    }

    updateStepIndicators() {
        const steps = [this.elements.stepOrgs, this.elements.stepFilters, this.elements.stepGenerate];
        
        steps.forEach(step => {
            if (step) {
                step.classList.remove('active', 'completed');
            }
        });
        
        switch (this.currentState) {
            case 'loading':
            case 'error':
            case 'org-selection':
                if (this.elements.stepOrgs) this.elements.stepOrgs.classList.add('active');
                break;
            case 'date-filters':
                if (this.elements.stepOrgs) this.elements.stepOrgs.classList.add('completed');
                if (this.elements.stepFilters) this.elements.stepFilters.classList.add('active');
                break;
            case 'config-generation':
            case 'success':
                if (this.elements.stepOrgs) this.elements.stepOrgs.classList.add('completed');
                if (this.elements.stepFilters) this.elements.stepFilters.classList.add('completed');
                if (this.elements.stepGenerate) this.elements.stepGenerate.classList.add('active');
                break;
        }
    }

    // ========================================
    // ORG LOADING LOGIC
    // ========================================

    async loadOrganizations() {
        this.logger.info(' Loading organizations from Salesforce CLI');
        
        this.setState('loading');
        this.setAppState('loading', 'Loading organizations');
        this.showLoader('Fetching authenticated organizations...', 10);

        try {
            this.updateLoader(25, 'Executing: sf org list --json');
            
            // Execute sf org list via API call (since browser can't use require)
            const response = await fetch('/data-comparison/api/orgs/list', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            this.updateLoader(50, 'Processing org data...');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            
            this.updateLoader(75, 'Filtering active orgs...');
            
            if (result.success && result.orgs) {
                // Orgs are already filtered by the API
                this.organizations = result.orgs;
                
                this.updateLoader(100, 'Organizations loaded!');
                
                setTimeout(() => {
                    this.hideLoader();
                    this.setState('org-selection');
                    this.renderOrganizations();
                    this.setAppState('idle', 'Select organizations');
                    
                    this.logger.info('Organizations loaded successfully', { 
                        connected: this.organizations.length 
                    });
                }, 500);
            } else {
                throw new Error(result.error || 'No organizations found');
            }
            
        } catch (error) {
            this.logger.error('Failed to load organizations', { error: error.message });
            this.showOrgError(error.message);
            this.setAppState('error', 'Failed to load organizations');
            this.hideLoader();
        }
    }

    showOrgError(message) {
        this.setState('error');
        if (this.elements.errorMessage) {
            this.elements.errorMessage.textContent = message;
        }
    }

    renderOrganizations() {
        if (!this.elements.orgsList) return;
        
        this.logger.debug('Rendering organizations list', { count: this.organizations.length });
        
        const html = this.organizations.map((org, index) => `
            <div class="org-item" data-org-index="${index}">
                <div class="org-checkbox">
                    <input type="checkbox" id="org-${index}" data-org-index="${index}">
                </div>
                <div class="org-info">
                    <div class="org-name">${org.alias || org.username}</div>
                    <div class="org-details">
                        <span class="org-username">${org.username}</span>
                        <span class="org-status ${org.connectedStatus === 'Connected' ? 'connected' : 'disconnected'}">
                            ${org.connectedStatus}
                        </span>
                    </div>
                </div>
                <div class="org-actions">
                    <span class="org-type">${org.orgType || 'Production'}</span>
                </div>
            </div>
        `).join('');
        
        this.elements.orgsList.innerHTML = html;
        this.initializeLucideIcons();
        this.updateSelectionCount();
    }

    // ========================================
    // ORG SELECTION LOGIC
    // ========================================

    handleOrgClick(event) {
        const orgItem = event.target.closest('.org-item');
        if (!orgItem || event.target.type === 'checkbox') return;
        
        const checkbox = orgItem.querySelector('input[type="checkbox"]');
        if (checkbox) {
            checkbox.checked = !checkbox.checked;
            this.handleOrgChange({ target: checkbox });
        }
    }

    handleOrgChange(event) {
        if (event.target.type !== 'checkbox') return;
        
        const orgIndex = parseInt(event.target.dataset.orgIndex);
        const isChecked = event.target.checked;
        const orgItem = event.target.closest('.org-item');
        
        orgItem?.classList.toggle('selected', isChecked);
        
        if (isChecked) {
            if (!this.selectedOrgs.some(org => org.username === this.organizations[orgIndex].username)) {
                this.selectedOrgs.push(this.organizations[orgIndex]);
            }
        } else {
            this.selectedOrgs = this.selectedOrgs.filter(
                org => org.username !== this.organizations[orgIndex].username
            );
        }
        
        this.updateSelectionCount();
        this.logger.debug('Org selection changed', { 
            selected: this.selectedOrgs.length,
            org: this.organizations[orgIndex].username,
            action: isChecked ? 'selected' : 'deselected'
        });
    }

    selectAllOrganizations() {
        this.logger.info('Selecting all organizations');
        
        const checkboxes = this.elements.orgsList?.querySelectorAll('input[type="checkbox"]');
        checkboxes?.forEach(checkbox => {
            checkbox.checked = true;
            const orgIndex = parseInt(checkbox.dataset.orgIndex);
            if (!this.selectedOrgs.some(org => org.username === this.organizations[orgIndex].username)) {
                this.selectedOrgs.push(this.organizations[orgIndex]);
            }
            checkbox.closest('.org-item')?.classList.add('selected');
        });
        
        this.updateSelectionCount();
    }

    clearOrgSelection() {
        this.logger.info('Clearing org selection');
        
        const checkboxes = this.elements.orgsList?.querySelectorAll('input[type="checkbox"]');
        checkboxes?.forEach(checkbox => {
            checkbox.checked = false;
            checkbox.closest('.org-item')?.classList.remove('selected');
        });
        
        this.selectedOrgs = [];
        this.updateSelectionCount();
    }

    updateSelectionCount() {
        const count = this.selectedOrgs.length;
        const hasMinimum = count >= 2;
        
        if (this.elements.selectionCount) {
            const text = count === 0 
                ? '0 organizations selected'
                : count === 1
                ? '1 organization selected'
                : `${count} organizations selected`;
            
            this.elements.selectionCount.textContent = text;
        }
        
        // Update button states
        if (this.elements.configureFiltersBtn) {
            this.elements.configureFiltersBtn.disabled = !hasMinimum;
        }
        
        this.logger.debug('Selection count updated', { count, hasMinimum });
    }

    // ========================================
    // DATE FILTERS LOGIC
    // ========================================

    proceedToDateFilters() {
        if (this.selectedOrgs.length < 2) {
            this.showToast('Please select at least 2 organizations', 'error');
            return;
        }

        this.logger.info('Proceeding to date filters', { orgs: this.selectedOrgs.length });
        this.setState('date-filters');
        this.setAppState('active', 'Configure date filters');
        this.renderDateFilters();
    }

    renderDateFilters() {
        if (!this.elements.orgFiltersContainer) return;
        
        this.logger.debug('Rendering date filters for orgs', { count: this.selectedOrgs.length });
        
        const html = this.selectedOrgs.map((org, index) => `
            <div class="org-filter-card" data-org-index="${index}">
                <div class="org-filter-header">
                    <div class="org-filter-icon">
                        <i data-lucide="building"></i>
                    </div>
                    <div class="org-filter-info">
                        <h4>${org.alias || org.username}</h4>
                        <p>${org.username}  ${org.orgType || 'Production'}</p>
                    </div>
                </div>
                
                <div class="date-filters-grid">
                    <div class="date-filter-group">
                        <label class="date-filter-label">Last Modified Between</label>
                        <div class="date-range">
                            <input type="date" class="date-input" data-org="${index}" data-filter="lastModified" data-type="from">
                            <span class="date-separator">to</span>
                            <input type="date" class="date-input" data-org="${index}" data-filter="lastModified" data-type="to">
                        </div>
                    </div>
                    
                    <div class="date-filter-group">
                        <label class="date-filter-label">Created Between</label>
                        <div class="date-range">
                            <input type="date" class="date-input" data-org="${index}" data-filter="created" data-type="from">
                            <span class="date-separator">to</span>
                            <input type="date" class="date-input" data-org="${index}" data-filter="created" data-type="to">
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
        
        this.elements.orgFiltersContainer.innerHTML = html;
        this.initializeLucideIcons();
    }

    // ========================================
    // CONFIG GENERATION LOGIC
    // ========================================

    async generateConfiguration() {
        this.logger.info(' Generating configuration', { orgs: this.selectedOrgs.length });
        
        this.setState('config-generation');
        this.setAppState('loading', 'Generating configuration');
        this.showLoader('Creating configuration file...', 0);
        
        try {
            // Collect date filters
            const dateFilters = this.collectDateFilters();
            
            this.updateGenerationProgress(25, 'Collecting org data...');
            
            // Create config object with org-specific date filters
            const orgIds = this.selectedOrgs.map(org => org.orgId || org.username.split('@')[0]).sort().join('_');
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
            const configFilename = `config_${orgIds}_${timestamp}.json`;
            
            this.updateGenerationProgress(50, 'Building configuration...');
            
            // Create config with org-specific date filters
            const orgsWithFilters = this.selectedOrgs.map((org, index) => ({
                ...org,
                defaultDateFilters: {
                    LastModifiedBetween: dateFilters[index]?.lastModified || { from: null, to: null },
                    CreatedBetween: dateFilters[index]?.created || { from: null, to: null }
                }
            }));
            
            const config = {
                version: '1.0.0',
                createdAt: new Date().toISOString(),
                orgs: orgsWithFilters,
                objects: {}, // Will be populated in next step
                metadata: {
                    totalOrgs: this.selectedOrgs.length,
                    orgNames: this.selectedOrgs.map(org => org.username)
                }
            };
            
            this.updateGenerationProgress(75, 'Saving configuration file...');
            
            // Send to backend to save config
            const response = await fetch('/data-comparison/api/config/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    filename: configFilename,
                    config: config
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.updateGenerationProgress(100, 'Configuration generated!');
                
                this.configData = {
                    filename: configFilename,
                    config: config,
                    path: result.path
                };
                
                setTimeout(() => {
                    this.hideLoader();
                    this.showConfigSuccess();
                    this.setAppState('success', 'Configuration generated');
                    
                    this.logger.info('Configuration generated successfully', { 
                        filename: configFilename,
                        orgs: this.selectedOrgs.length
                    });
                }, 800);
            } else {
                throw new Error(result.error || 'Failed to save configuration');
            }
            
        } catch (error) {
            this.logger.error('Config generation failed', { error: error.message });
            this.showToast(`Configuration generation failed: ${error.message}`, 'error');
            this.setState('date-filters');
            this.setAppState('error', 'Generation failed');
            this.hideLoader();
        }
    }

    collectDateFilters() {
        const filters = [];
        
        this.selectedOrgs.forEach((org, index) => {
            const orgFilters = {
                lastModified: { from: null, to: null },
                created: { from: null, to: null }
            };
            
            // Collect lastModified filters
            const lastModFromInput = document.querySelector(`input[data-org="${index}"][data-filter="lastModified"][data-type="from"]`);
            const lastModToInput = document.querySelector(`input[data-org="${index}"][data-filter="lastModified"][data-type="to"]`);
            
            if (lastModFromInput?.value) orgFilters.lastModified.from = lastModFromInput.value;
            if (lastModToInput?.value) orgFilters.lastModified.to = lastModToInput.value;
            
            // Collect created filters
            const createdFromInput = document.querySelector(`input[data-org="${index}"][data-filter="created"][data-type="from"]`);
            const createdToInput = document.querySelector(`input[data-org="${index}"][data-filter="created"][data-type="to"]`);
            
            if (createdFromInput?.value) orgFilters.created.from = createdFromInput.value;
            if (createdToInput?.value) orgFilters.created.to = createdToInput.value;
            
            filters.push(orgFilters);
        });
        
        return filters;
    }

    updateGenerationProgress(percentage, statusText) {
        if (this.elements.generationProgressFill) {
            this.elements.generationProgressFill.style.width = `${percentage}%`;
        }
        if (this.elements.generationProgressText) {
            this.elements.generationProgressText.textContent = `${percentage}%`;
        }
        if (this.elements.generationOrgCount) {
            this.elements.generationOrgCount.textContent = this.selectedOrgs.length.toString();
        }
        if (statusText && this.elements.generationFilename) {
            this.elements.generationFilename.textContent = statusText;
        }
        
        // Update shell loader
        this.updateLoader(percentage, statusText);
    }

    showConfigSuccess() {
        this.setState('success');
        
        if (this.configData) {
            if (this.elements.successFilename) {
                this.elements.successFilename.textContent = this.configData.filename;
            }
            if (this.elements.successOrgCount) {
                this.elements.successOrgCount.textContent = this.selectedOrgs.length.toString();
            }
            if (this.elements.successCreatedTime) {
                this.elements.successCreatedTime.textContent = new Date().toLocaleString();
            }
        }
    }

    // ========================================
    // NAVIGATION LOGIC
    // ========================================

    proceedToConfigGenerator() {
        this.logger.info(' Proceeding to configuration generator');
        
        if (this.isInExtensionShell && window.parent) {
            window.parent.location.href = '/data-comparison/config-generator';
        } else {
            window.location.href = '/data-comparison/config-generator';
        }
    }

    backToWelcome() {
        this.logger.info(' Returning to welcome page');
        
        if (this.isInExtensionShell && window.parent) {
            window.parent.location.href = '/data-comparison/';
        } else {
            window.location.href = '/data-comparison/';
        }
    }

    createAnotherConfig() {
        this.logger.info(' Creating another configuration');
        
        // Reset state
        this.selectedOrgs = [];
        this.configData = null;
        this.setState('org-selection');
        this.setAppState('idle', 'Select organizations');
        this.renderOrganizations();
    }

    // ========================================
    // EVENT HANDLERS
    // ========================================

    bindEvents() {
        this.logger.debug('Binding event listeners');

        // Error state events
        this.elements.retryBtn?.addEventListener('click', () => this.loadOrganizations());
        this.elements.backBtn?.addEventListener('click', () => this.backToWelcome());

        // Org selection events
        this.elements.selectAllBtn?.addEventListener('click', () => this.selectAllOrganizations());
        this.elements.clearSelectionBtn?.addEventListener('click', () => this.clearOrgSelection());
        this.elements.configureFiltersBtn?.addEventListener('click', () => this.proceedToDateFilters());

        // Date filters events
        this.elements.backToOrgsBtn?.addEventListener('click', () => this.setState('org-selection'));
        this.elements.generateConfigBtn?.addEventListener('click', () => this.generateConfiguration());

        // Success events
        this.elements.proceedToConfigBtn?.addEventListener('click', () => this.proceedToConfigGenerator());
        this.elements.createAnotherBtn?.addEventListener('click', () => this.createAnotherConfig());

        // Org list delegation
        this.elements.orgsList?.addEventListener('click', (e) => this.handleOrgClick(e));
        this.elements.orgsList?.addEventListener('change', (e) => this.handleOrgChange(e));

        this.logger.debug('Event listeners bound');
    }

    // ========================================
    // UTILITY METHODS
    // ========================================

    showToast(message, type = 'info') {
        const toastContainer = this.elements.toastContainer;
        if (!toastContainer) return;
        
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.innerHTML = `
            <i data-lucide="${type === 'success' ? 'check-circle' : type === 'error' ? 'x-circle' : 'info'}"></i>
            <span>${message}</span>
        `;
        
        toastContainer.appendChild(toast);
        this.initializeLucideIcons();
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            toast.remove();
        }, 5000);
        
        this.logger.debug('Toast shown', { message, type });
    }

    capitalizeFirst(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    // Public API for external use
    getAppInfo() {
        return {
            name: this.appName,
            version: this.appVersion,
            state: this.currentState,
            isConnected: this.isInExtensionShell,
            themeReceived: this.themeReceived,
            selectedOrgs: this.selectedOrgs.length,
            configData: this.configData
        };
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log(' DOM loaded, initializing Org Selection...');
    window.orgSelection = new OrgSelection();
});

// Global API
window.OrgSelection = {
    getAppInfo: () => window.orgSelection?.getAppInfo(),
    setTheme: (theme, variables) => window.orgSelection?.updateTheme(theme, variables)
};

Dir: apps\data-comparison\components\welcome
Content:

### File: index.css

/* ========================================
   DATA COMPARISON APP THEME INHERITANCE
   ======================================== */
:root {
    /* Default Light Theme (fallback if shell doesn't provide) */
    --app-bg-primary: #ffffff;
    --app-bg-secondary: #f8fafc;
    --app-bg-tertiary: #f1f5f9;
    --app-text-primary: #1e293b;
    --app-text-secondary: #64748b;
    --app-text-tertiary: #94a3b8;
    --app-border: #e2e8f0;
    --app-border-hover: #cbd5e1;
    --app-accent: #3b82f6;
    --app-accent-hover: #2563eb;
    --app-success: #10b981;
    --app-warning: #f59e0b;
    --app-error: #ef4444;
    --app-transition: all 0.3s ease;
    --app-border-radius: 8px;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
    
    /* App-specific variables */
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    --spacing-2xl: 3rem;
    
    /* Data Comparison specific colors */
    --upload-color: #8b5cf6;
    --upload-color-hover: #7c3aed;
    --create-color: #06b6d4;
    --create-color-hover: #0891b2;
}

/* Dark Theme Override (when data-theme="dark" is set by shell) */
[data-theme="dark"] {
    --app-bg-primary: #0f172a;
    --app-bg-secondary: #1e293b;
    --app-bg-tertiary: #334155;
    --app-text-primary: #f8fafc;
    --app-text-secondary: #cbd5e1;
    --app-text-tertiary: #94a3b8;
    --app-border: #334155;
    --app-border-hover: #475569;
    --app-accent: #60a5fa;
    --app-accent-hover: #3b82f6;
    --app-success: #34d399;
    --app-warning: #fbbf24;
    --app-error: #f87171;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.4);
}

/* ========================================
   BASE STYLES
   ======================================== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    background: var(--app-bg-primary);
    color: var(--app-text-primary);
    line-height: 1.6;
    transition: var(--app-transition);
    margin: 0;
    padding: 0;
}

/* Override app styles - remove duplicate headers/footers when in shell */
.app-header, .app-footer {
    display: none;
}

.app-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    padding: 0;
    margin: 0;
    background: var(--app-bg-primary);
}

.app-main {
    flex: 1;
    padding: var(--spacing-2xl) var(--spacing-xl);
    max-width: 100%;
    margin: 0;
    width: 100%;
    background: var(--app-bg-primary);
}

/* ========================================
   WELCOME SECTION
   ======================================== */
.welcome-section {
    max-width: 900px;
    margin: 0 auto;
}

.welcome-header {
    text-align: center;
    margin-bottom: var(--spacing-2xl);
}

.welcome-title {
    font-size: 2.25rem;
    font-weight: 700;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-md);
}

.welcome-description {
    font-size: 1.125rem;
    color: var(--app-text-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.7;
}

/* ========================================
   OPTIONS CONTAINER
   ======================================== */
.options-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
    gap: var(--spacing-xl);
    margin-bottom: var(--spacing-2xl);
}

.option-card {
    background: var(--app-bg-secondary);
    border: 2px solid var(--app-border);
    border-radius: calc(var(--app-border-radius) * 1.5);
    padding: var(--spacing-xl);
    transition: var(--app-transition);
    position: relative;
    overflow: hidden;
}

.option-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--app-shadow-lg);
    border-color: var(--app-border-hover);
}

.option-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--upload-color), var(--create-color));
    opacity: 0;
    transition: opacity 0.3s ease;
}

.option-card:hover::before {
    opacity: 1;
}

.option-icon {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--spacing-lg);
    color: white;
    position: relative;
}

.upload-icon {
    background: linear-gradient(135deg, var(--upload-color), var(--upload-color-hover));
    box-shadow: 0 4px 20px rgba(139, 92, 246, 0.3);
}

.create-icon {
    background: linear-gradient(135deg, var(--create-color), var(--create-color-hover));
    box-shadow: 0 4px 20px rgba(6, 182, 212, 0.3);
}

.option-icon .icon {
    width: 28px;
    height: 28px;
}

.option-content {
    margin-bottom: var(--spacing-xl);
}

.option-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-md);
}

.option-description {
    color: var(--app-text-secondary);
    line-height: 1.6;
    margin-bottom: var(--spacing-lg);
}

.option-features {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
}

.feature-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-size: 0.875rem;
    color: var(--app-text-secondary);
}

.feature-icon {
    width: 16px;
    height: 16px;
    color: var(--app-accent);
    flex-shrink: 0;
}

.option-button {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-md) var(--spacing-lg);
    border: none;
    border-radius: var(--app-border-radius);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: var(--app-transition);
    position: relative;
    overflow: hidden;
}

.upload-btn {
    background: linear-gradient(135deg, var(--upload-color), var(--upload-color-hover));
    color: white;
}

.create-btn {
    background: linear-gradient(135deg, var(--create-color), var(--create-color-hover));
    color: white;
}

.option-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    position: relative;
}

.option-button:not(:disabled):hover {
    transform: translateY(-2px);
    box-shadow: var(--app-shadow-lg);
}

.button-icon {
    width: 18px;
    height: 18px;
}

.coming-soon {
    position: absolute;
    top: -2px;
    right: var(--spacing-sm);
    background: rgba(255, 255, 255, 0.2);
    color: white;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-weight: 500;
}

/* ========================================
   INFO SECTION
   ======================================== */
.info-section {
    margin-top: var(--spacing-xl);
}

.info-card {
    background: var(--app-bg-tertiary);
    border: 1px solid var(--app-border);
    border-radius: var(--app-border-radius);
    padding: var(--spacing-lg);
    display: flex;
    gap: var(--spacing-md);
    align-items: flex-start;
}

.info-icon {
    width: 40px;
    height: 40px;
    background: var(--app-accent);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    flex-shrink: 0;
}

.info-icon .icon {
    width: 20px;
    height: 20px;
}

.info-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.info-text {
    color: var(--app-text-secondary);
    line-height: 1.6;
}

/* ========================================
   RESPONSIVE
   ======================================== */
@media (max-width: 768px) {
    .app-main {
        padding: var(--spacing-xl) var(--spacing-md);
    }
    
    .welcome-title {
        font-size: 1.875rem;
    }
    
    .welcome-description {
        font-size: 1rem;
    }
    
    .options-container {
        grid-template-columns: 1fr;
        gap: var(--spacing-lg);
    }
    
    .option-card {
        padding: var(--spacing-lg);
    }
}

@media (max-width: 480px) {
    .option-icon {
        width: 56px;
        height: 56px;
    }
    
    .option-icon .icon {
        width: 24px;
        height: 24px;
    }
    
    .option-title {
        font-size: 1.25rem;
    }
}

### File: index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Comparison Tool</title>
    <link rel="stylesheet" href="/data-comparison/index.css">
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
    <div class="app-container">
        <!-- App Header -->
        <header class="app-header">
            <div class="header-content">
                <div class="app-brand">
                    <div class="app-icon">
                        <i data-lucide="git-compare" class="brand-icon"></i>
                    </div>
                    <div class="app-info">
                        <h1 class="app-title">Data Comparison Tool</h1>
                        <p class="app-subtitle">Compare Salesforce CPQ configurations across orgs</p>
                    </div>
                </div>
                <div class="app-status">
                    <div class="status-indicator ready">
                        <i data-lucide="check-circle" class="status-icon"></i>
                        <span class="status-text">Ready</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="app-main">
            <div class="welcome-section">
                <div class="welcome-header">
                    <h2 class="welcome-title">Get Started</h2>
                    <p class="welcome-description">
                        Choose how you'd like to begin comparing your Salesforce CPQ configurations.
                    </p>
                </div>

                <div class="options-container">
                    <!-- Option 1: Upload Configuration -->
                    <div class="option-card" id="upload-option">
                        <div class="option-icon upload-icon">
                            <i data-lucide="upload" class="icon"></i>
                        </div>
                        <div class="option-content">
                            <h3 class="option-title">I have a configuration</h3>
                            <p class="option-description">
                                Upload an existing configuration file to start comparing with other org setups.
                            </p>
                            <div class="option-features">
                                <div class="feature-item">
                                    <i data-lucide="file-text" class="feature-icon"></i>
                                    <span>Support for JSON, CSV, Excel formats</span>
                                </div>
                                <div class="feature-item">
                                    <i data-lucide="zap" class="feature-icon"></i>
                                    <span>Quick comparison analysis</span>
                                </div>
                            </div>
                        </div>
                        <button class="option-button upload-btn" disabled>
                            <i data-lucide="upload-cloud" class="button-icon"></i>
                            Upload Configuration
                            <span class="coming-soon">Coming Soon</span>
                        </button>
                    </div>

                    <!-- Option 2: Create Configuration -->
                    <div class="option-card" id="create-option">
                        <div class="option-icon create-icon">
                            <i data-lucide="plus-circle" class="icon"></i>
                        </div>
                        <div class="option-content">
                            <h3 class="option-title">I want to create one</h3>
                            <p class="option-description">
                                Build a new comparison configuration by connecting to your Salesforce orgs.
                            </p>
                            <div class="option-features">
                                <div class="feature-item">
                                    <i data-lucide="settings" class="feature-icon"></i>
                                    <span>Guided configuration wizard</span>
                                </div>
                                <div class="feature-item">
                                    <i data-lucide="cloud" class="feature-icon"></i>
                                    <span>Direct SFDX integration</span>
                                </div>
                            </div>
                        </div>
                        <button class="option-button create-btn">
                            <i data-lucide="plus" class="button-icon"></i>
                            Create Configuration
                            <span class="coming-soon">Coming Soon</span>
                        </button>
                    </div>
                </div>

                <!-- Additional Info -->
                <div class="info-section">
                    <div class="info-card">
                        <div class="info-icon">
                            <i data-lucide="info" class="icon"></i>
                        </div>
                        <div class="info-content">
                            <h4 class="info-title">What is Configuration Comparison?</h4>
                            <p class="info-text">
                                Compare CPQ settings, price rules, product rules, and other configurations 
                                between different Salesforce orgs to identify differences and ensure consistency.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <!-- App Footer -->
        <footer class="app-footer">
            <div class="footer-content">
                <div class="footer-left">
                    <span class="app-version">v1.0.0</span>
                    <span class="separator"></span>
                    <span class="app-state" id="app-state">Idle</span>
                </div>
                <div class="footer-right">
                    <div class="connection-status">
                        <i data-lucide="wifi" class="connection-icon"></i>
                        <span class="connection-text">Extension Connected</span>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script src="/data-comparison/index.js"></script>
</body>
</html>

### File: index.js

/**
 * Data Comparison App - Welcome Component
 * Main entry point for the data comparison tool
 * FIXED: Proper theme communication with shell
 */

class DataComparisonWelcome {
    constructor() {
        this.appName = 'Data Comparison';
        this.appVersion = '1.0.0';
        this.currentState = 'idle';
        this.isInExtensionShell = window.parent !== window;
        this.logger = null;
        this.themeReceived = false;

        this.elements = {
            uploadOption: document.getElementById('upload-option'),
            createOption: document.getElementById('create-option'),
            uploadBtn: document.querySelector('.upload-btn'),
            createBtn: document.querySelector('.create-btn'),
            appState: document.getElementById('app-state'),
            connectionStatus: document.querySelector('.connection-status')
        };

        this.init();
    }

    init() {
        console.log(` ${this.appName} initializing...`);
        console.log(` In extension shell: ${this.isInExtensionShell}`);
        
        this.setupLogger();
        this.initializeLucideIcons();
        this.setupExtensionCommunication();
        this.bindEvents();
        this.notifyExtensionLoaded();
        this.setInitialState();
        
        this.logger.info('Data Comparison Welcome component initialized');
    }

    setupLogger() {
        // Browser-compatible logger that communicates with Extension Shell
        this.logger = {
            log: (level, message, data = null) => {
                const timestamp = new Date().toISOString();
                const formatted = `[${timestamp}] [${level.toUpperCase()}] [${this.appName}] [welcome/index.js] ${message}`;
                
                // Console output with colors
                const colors = {
                    error: 'color: #ef4444; font-weight: bold;',
                    warn: 'color: #f59e0b; font-weight: bold;',
                    info: 'color: #3b82f6; font-weight: bold;',
                    debug: 'color: #8b5cf6; font-weight: bold;',
                    trace: 'color: #64748b; font-weight: bold;'
                };

                console.log(`%c${formatted}`, colors[level] || '');
                
                if (data) {
                    console.log('Data:', data);
                }

                // Send to Extension Shell
                this.postMessageToExtension({
                    type: 'ADD_LOG',
                    data: {
                        app: this.appName,
                        level: level,
                        message: data ? `${message} ${JSON.stringify(data)}` : message,
                        location: 'welcome/index.js',
                        timestamp: timestamp
                    }
                });
            },
            error: (message, data) => this.logger.log('error', message, data),
            warn: (message, data) => this.logger.log('warn', message, data),
            info: (message, data) => this.logger.log('info', message, data),
            debug: (message, data) => this.logger.log('debug', message, data),
            trace: (message, data) => this.logger.log('trace', message, data)
        };
    }

    initializeLucideIcons() {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
            this.logger.debug('Lucide icons initialized');
        } else {
            this.logger.warn('Lucide icons not available');
        }
    }

    setupExtensionCommunication() {
        if (!this.isInExtensionShell) {
            this.logger.warn('Not running in Extension Shell - standalone mode');
            this.updateConnectionStatus(false);
            return;
        }

        this.updateConnectionStatus(true);
        this.logger.info('Extension Shell communication established');

        // Listen for messages from Extension Shell
        window.addEventListener('message', (event) => {
            if (event.origin !== window.location.origin) {
                return;
            }

            const { type, theme, variables } = event.data;

            switch (type) {
                case 'THEME_CHANGED':
                    this.logger.info(`Theme changed to: ${theme}`);
                    this.updateTheme(theme, variables);
                    break;
                    
                case 'THEME_DATA':
                    this.logger.info(`Received theme data: ${theme}`, variables);
                    this.updateTheme(theme, variables);
                    this.themeReceived = true;
                    break;
                    
                default:
                    this.logger.trace('Received unknown message type', { type });
            }
        });

        // Request initial theme data
        this.requestThemeData();
    }

    requestThemeData() {
        this.postMessageToExtension({
            type: 'REQUEST_THEME'
        });
        this.logger.debug('Requested theme data from shell');
        
        // Fallback: if no theme received in 2 seconds, apply default
        setTimeout(() => {
            if (!this.themeReceived) {
                this.logger.warn('No theme data received from shell, applying default');
                this.updateTheme('light', {});
            }
        }, 2000);
    }

    updateTheme(theme, variables) {
        this.logger.info(`Applying theme: ${theme}`, variables);

        // Apply theme class to body
        document.body.setAttribute('data-theme', theme);
        
        // Apply theme variables if provided
        if (variables) {
            const root = document.documentElement;
            let appliedCount = 0;
            
            Object.entries(variables).forEach(([key, value]) => {
                if (value && value.trim()) {
                    root.style.setProperty(`--app-${key}`, value.trim());
                    appliedCount++;
                }
            });
            
            this.logger.debug(`Applied ${appliedCount} theme variables`);
        }

        // Force repaint
        document.body.style.display = 'none';
        document.body.offsetHeight; // Trigger reflow
        document.body.style.display = '';
        
        this.logger.info(`Theme ${theme} applied successfully`);
    }

    postMessageToExtension(message) {
        if (this.isInExtensionShell && window.parent) {
            window.parent.postMessage(message, '*');
        }
    }

    notifyExtensionLoaded() {
        this.postMessageToExtension({
            type: 'APP_LOADED',
            data: { 
                appName: this.appName,
                version: this.appVersion
            }
        });
        this.logger.info('Notified Extension Shell of app load');
    }

    setInitialState() {
        // Set app to idle state and hide any loaders
        this.setAppState('idle', 'Ready');
        this.hideLoader();
        this.updateAppStateDisplay('Ready');
        this.logger.debug('Initial state set to idle');
    }

    setAppState(state, message = '') {
        this.currentState = state;
        this.postMessageToExtension({
            type: 'APP_STATE_CHANGED',
            data: { state, message: message || this.capitalizeFirst(state) }
        });
        this.logger.debug('App state changed', { state, message });
    }

    updateAppStateDisplay(stateText) {
        if (this.elements.appState) {
            this.elements.appState.textContent = stateText;
        }
    }

    updateConnectionStatus(connected) {
        const statusElement = this.elements.connectionStatus;
        if (!statusElement) return;

        const iconElement = statusElement.querySelector('.connection-icon');
        const textElement = statusElement.querySelector('.connection-text');

        if (connected) {
            iconElement.setAttribute('data-lucide', 'wifi');
            textElement.textContent = 'Extension Connected';
            statusElement.style.color = 'var(--success)';
        } else {
            iconElement.setAttribute('data-lucide', 'wifi-off');
            textElement.textContent = 'Standalone Mode';
            statusElement.style.color = 'var(--warning)';
        }

        this.initializeLucideIcons();
    }

    hideLoader() {
        this.postMessageToExtension({
            type: 'HIDE_LOADER'
        });
    }

    showLoader(text, progress = 0) {
        this.postMessageToExtension({
            type: 'SHOW_LOADER',
            data: { text, progress }
        });
    }

    updateLoader(progress, text = null) {
        this.postMessageToExtension({
            type: 'UPDATE_LOADER',
            data: { progress, text }
        });
    }

    handleUploadConfiguration() {
        this.logger.info('Upload Configuration clicked');
        this.setAppState('loading', 'Processing upload request');
        this.showLoader('Preparing upload...', 0);
        
        // Simulate work
        setTimeout(() => {
            this.updateLoader(50, 'Validating configuration...');
        }, 1000);
        
        setTimeout(() => {
            this.updateLoader(100, 'Upload complete!');
            this.setAppState('success', 'Upload feature ready');
            this.hideLoader();
        }, 2000);
        
        // TODO: Implement upload configuration logic
        this.logger.warn('Upload Configuration feature not yet implemented');
        
        // Show temporary feedback
        this.showTemporaryFeedback('upload', 'Upload feature will be available soon!');
    }

    handleCreateConfiguration() {
        this.logger.info('Create Configuration clicked');
        this.setAppState('loading', 'Initializing configuration wizard');
        this.showLoader('Starting wizard...', 0);
        
        // Simulate work
        setTimeout(() => {
            this.updateLoader(30, 'Connecting to Salesforce...');
        }, 800);
        
        setTimeout(() => {
            this.updateLoader(70, 'Loading org data...');
        }, 1600);
        
        setTimeout(() => {
            this.updateLoader(100, 'Wizard ready!');
            this.setAppState('success', 'Configuration wizard ready');
            this.hideLoader();
        }, 2400);
        
        // TODO: Implement create configuration logic
        this.logger.warn('Create Configuration feature not yet implemented');
        
        // Show temporary feedback
        this.showTemporaryFeedback('create', 'Create feature will be available soon!');
    }

    showTemporaryFeedback(type, message) {
        const button = type === 'upload' ? this.elements.uploadBtn : this.elements.createBtn;
        const originalText = button.innerHTML;
        
        button.innerHTML = `
            <i data-lucide="info" class="button-icon"></i>
            ${message}
        `;
        button.style.opacity = '0.8';
        
        this.initializeLucideIcons();
        
        setTimeout(() => {
            button.innerHTML = originalText;
            button.style.opacity = '1';
            this.initializeLucideIcons();
            this.setAppState('idle', 'Ready');
        }, 3000);
    }

    bindEvents() {
        // Upload Configuration button
        this.elements.uploadBtn?.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleUploadConfiguration();
        });

        // Create Configuration button
        this.elements.createBtn?.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleCreateConfiguration();
        });

        // Option card hover effects
        this.elements.uploadOption?.addEventListener('mouseenter', () => {
            this.logger.trace('Upload option hovered');
        });

        this.elements.createOption?.addEventListener('mouseenter', () => {
            this.logger.trace('Create option hovered');
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch (e.key) {
                    case 'u':
                        e.preventDefault();
                        this.handleUploadConfiguration();
                        break;
                    case 'n':
                        e.preventDefault();
                        this.handleCreateConfiguration();
                        break;
                }
            }
        });

        this.logger.debug('Event listeners bound');
    }

    capitalizeFirst(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    // Public API for external components
    getAppInfo() {
        return {
            name: this.appName,
            version: this.appVersion,
            state: this.currentState,
            isConnected: this.isInExtensionShell,
            themeReceived: this.themeReceived
        };
    }

    handleCreateConfiguration() {
        this.logger.info('Create Configuration clicked - navigating to Org Selection');
        this.setAppState('loading', 'Navigating to org selection');
        this.showLoader('Loading org selection...', 10);
        
        // Navigate to org selection state
        if (this.isInExtensionShell && window.parent) {
            window.parent.location.href = '/data-comparison/org-selection';
        } else {
            window.location.href = '/data-comparison/org-selection';
        }
        
        this.logger.info('Navigating to org selection');
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log(' DOM loaded, initializing Data Comparison Welcome...');
    window.dataComparisonWelcome = new DataComparisonWelcome();
});

// Global API
window.DataComparisonWelcome = {
    getAppInfo: () => window.dataComparisonWelcome?.getAppInfo(),
    setTheme: (theme, variables) => window.dataComparisonWelcome?.updateTheme(theme, variables)
};

Dir: apps\data-comparison\components\modules\comparisonHome
Content:

Dir: apps\data-comparison\components\modules\comparisonViewer
Content:

Dir: apps\data-comparison\components\modules\configGenerator
Content:

### File: index.css

/* ========================================
   CONFIG GENERATOR THEME INHERITANCE
   ======================================== */
:root {
    /* Default Light Theme (fallback if shell doesn't provide) */
    --app-bg-primary: #ffffff;
    --app-bg-secondary: #f8fafc;
    --app-bg-tertiary: #f1f5f9;
    --app-text-primary: #1e293b;
    --app-text-secondary: #64748b;
    --app-text-tertiary: #94a3b8;
    --app-border: #e2e8f0;
    --app-border-hover: #cbd5e1;
    --app-accent: #3b82f6;
    --app-accent-hover: #2563eb;
    --app-success: #10b981;
    --app-warning: #f59e0b;
    --app-error: #ef4444;
    --app-transition: all 0.3s ease;
    --app-border-radius: 8px;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
    
    /* Config Generator specific colors */
    --generator-primary: #8b5cf6;
    --generator-primary-hover: #7c3aed;
    --generator-secondary: #06b6d4;
    --generator-secondary-hover: #0891b2;
}

[data-theme="dark"] {
    --app-bg-primary: #0f172a;
    --app-bg-secondary: #1e293b;
    --app-bg-tertiary: #334155;
    --app-text-primary: #f8fafc;
    --app-text-secondary: #cbd5e1;
    --app-text-tertiary: #94a3b8;
    --app-border: #334155;
    --app-border-hover: #475569;
    --app-accent: #60a5fa;
    --app-accent-hover: #3b82f6;
    --app-success: #34d399;
    --app-warning: #fbbf24;
    --app-error: #f87171;
    --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.4);
}

/* ========================================
   BASE STYLES
   ======================================== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    background: var(--app-bg-primary);
    color: var(--app-text-primary);
    line-height: 1.6;
    transition: var(--app-transition);
    margin: 0;
    padding: 0;
}

.app-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background: var(--app-bg-primary);
}

.app-main {
    flex: 1;
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
}

/* ========================================
   CONFIG GENERATOR LAYOUT
   ======================================== */
.config-generator {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.generator-header {
    text-align: center;
    margin-bottom: 1rem;
}

.generator-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--app-text-primary);
    margin-bottom: 0.5rem;
}

.generator-description {
    font-size: 1.125rem;
    color: var(--app-text-secondary);
    max-width: 600px;
    margin: 0 auto;
}

/* ========================================
   PROGRESS STEPS
   ======================================== */
.progress-steps {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 2rem 0;
    padding: 0 2rem;
}

.step {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 1.5rem;
    border-radius: var(--app-border-radius);
    background: var(--app-bg-secondary);
    border: 2px solid var(--app-border);
    transition: var(--app-transition);
    opacity: 0.6;
}

.step.active {
    opacity: 1;
    border-color: var(--generator-primary);
    background: var(--generator-primary);
    color: white;
}

.step.completed {
    opacity: 1;
    border-color: var(--app-success);
    background: var(--app-success);
    color: white;
}

.step-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.2);
    color: inherit;
}

.step.active .step-icon,
.step.completed .step-icon {
    background: rgba(255, 255, 255, 0.2);
}

.step:not(.active):not(.completed) .step-icon {
    background: var(--app-bg-tertiary);
    color: var(--app-text-tertiary);
}

.step-content {
    display: flex;
    flex-direction: column;
}

.step-title {
    font-weight: 600;
    font-size: 1rem;
}

.step-description {
    font-size: 0.875rem;
    opacity: 0.8;
}

.step-connector {
    width: 60px;
    height: 2px;
    background: var(--app-border);
    margin: 0 1rem;
}

/* ========================================
   GENERATOR STATES
   ======================================== */
.generator-state {
    background: var(--app-bg-secondary);
    border-radius: calc(var(--app-border-radius) * 1.5);
    padding: 2rem;
    border: 1px solid var(--app-border);
    display: none;
}

.generator-state.active {
    display: block;
}

.state-header {
    text-align: center;
    margin-bottom: 2rem;
}

.state-header h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: 0.5rem;
}

.state-header p {
    color: var(--app-text-secondary);
}

/* ========================================
   LOADING STATES
   ======================================== */
.loading-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--app-border);
    border-top: 3px solid var(--generator-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.loading-text {
    color: var(--app-text-secondary);
    font-size: 1rem;
}

/* ========================================
   ERROR STATES
   ======================================== */
.error-state,
.config-error {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    padding: 3rem;
    text-align: center;
}

.error-icon {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    background: var(--app-error);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
}

.error-content h4 {
    color: var(--app-text-primary);
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
}

.error-content p {
    color: var(--app-text-secondary);
    margin-bottom: 1.5rem;
}

/* ========================================
   ORG SELECTION
   ======================================== */
.orgs-content {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.orgs-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: var(--app-bg-tertiary);
    border-radius: var(--app-border-radius);
}

.selection-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
}

.selection-requirement {
    color: var(--app-text-tertiary);
}

.toolbar-actions {
    display: flex;
    gap: 1rem;
}

.orgs-list {
    display: grid;
    gap: 1rem;
    max-height: 400px;
    overflow-y: auto;
}

.org-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--app-bg-primary);
    border: 2px solid var(--app-border);
    border-radius: var(--app-border-radius);
    cursor: pointer;
    transition: var(--app-transition);
}

.org-item:hover {
    border-color: var(--app-border-hover);
    background: var(--app-bg-tertiary);
}

.org-item.selected {
    border-color: var(--generator-primary);
    background: rgba(139, 92, 246, 0.1);
}

.org-checkbox {
    display: flex;
    align-items: center;
}

.org-checkbox input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: var(--generator-primary);
}

.org-info {
    flex: 1;
}

.org-name {
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: 0.25rem;
}

.org-details {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
}

.org-username {
    color: var(--app-text-secondary);
}

.org-status {
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
}

.org-status.connected {
    background: rgba(16, 185, 129, 0.1);
    color: var(--app-success);
}

.org-status.disconnected {
    background: rgba(239, 68, 68, 0.1);
    color: var(--app-error);
}

.org-type {
    padding: 0.25rem 0.75rem;
    background: var(--app-bg-tertiary);
    border-radius: 6px;
    font-size: 0.75rem;
    color: var(--app-text-tertiary);
}

.orgs-actions {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    margin-top: 1rem;
}

/* ========================================
   CONFIG CREATION PROGRESS
   ======================================== */
.config-progress {
    background: var(--app-bg-tertiary);
    border-radius: var(--app-border-radius);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
}

.progress-info {
    margin-bottom: 1rem;
}

.progress-title {
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: 0.25rem;
}

.progress-details {
    color: var(--app-text-secondary);
    font-size: 0.875rem;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: var(--app-border);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.75rem;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--generator-primary), var(--generator-secondary));
    border-radius: 4px;
    transition: width 0.3s ease;
    animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
}

.progress-stats {
    display: flex;
    justify-content: space-between;
    font-size: 0.875rem;
}

.progress-percentage {
    font-weight: 600;
    color: var(--generator-primary);
}

.progress-commands {
    color: var(--app-text-secondary);
}

/* ========================================
   SFDX LOG
   ======================================== */
.sfdx-log {
    background: var(--app-bg-primary);
    border: 1px solid var(--app-border);
    border-radius: var(--app-border-radius);
    margin-bottom: 1.5rem;
}

.log-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--app-border);
}

.log-header h4 {
    font-size: 1rem;
    font-weight: 600;
    color: var(--app-text-primary);
}

.log-content {
    max-height: 200px;
    overflow-y: auto;
    padding: 1rem;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Consolas', monospace;
    font-size: 0.8125rem;
    line-height: 1.4;
}

.log-entry {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    padding: 0.25rem 0;
}

.log-timestamp {
    color: var(--app-text-tertiary);
    font-weight: 500;
    min-width: 70px;
}

.log-message {
    color: var(--app-text-secondary);
    flex: 1;
}

.log-entry.info .log-message {
    color: var(--app-accent);
}

.log-entry.success .log-message {
    color: var(--app-success);
}

.log-entry.error .log-message {
    color: var(--app-error);
}

/* ========================================
   SUCCESS STATE
   ======================================== */
.config-success {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    padding: 3rem;
    text-align: center;
}

.success-icon {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    background: var(--app-success);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
}

.success-content h4 {
    color: var(--app-text-primary);
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.config-summary {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 2rem;
    text-align: left;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--app-border);
}

.summary-label {
    color: var(--app-text-secondary);
    font-weight: 500;
}

.summary-value {
    color: var(--app-text-primary);
    font-weight: 600;
}

.success-actions {
    display: flex;
    gap: 1rem;
}

/* ========================================
   BUTTONS
   ======================================== */
.btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: var(--app-border-radius);
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: var(--app-transition);
    text-decoration: none;
    white-space: nowrap;
}

.btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.btn-primary {
    background: var(--generator-primary);
    color: white;
}

.btn-primary:not(:disabled):hover {
    background: var(--generator-primary-hover);
    transform: translateY(-1px);
    box-shadow: var(--app-shadow);
}

.btn-secondary {
    background: var(--generator-secondary);
    color: white;
}

.btn-secondary:not(:disabled):hover {
    background: var(--generator-secondary-hover);
    transform: translateY(-1px);
    box-shadow: var(--app-shadow);
}

.btn-outline {
    background: transparent;
    color: var(--app-text-primary);
    border: 2px solid var(--app-border);
}

.btn-outline:hover {
    border-color: var(--app-border-hover);
    background: var(--app-bg-tertiary);
}

.btn-link {
    background: none;
    border: none;
    color: var(--app-accent);
    cursor: pointer;
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    transition: var(--app-transition);
}

.btn-link:hover {
    background: rgba(59, 130, 246, 0.1);
    color: var(--app-accent-hover);
}

/* ========================================
   UTILITIES
   ======================================== */
.hidden {
    display: none !important;
}

/* ========================================
   VALIDATION RESULTS
   ======================================== */
.validation-results {
    margin-top: 1.5rem;
    background: var(--app-bg-primary);
    border: 1px solid var(--app-border);
    border-radius: var(--app-border-radius);
    padding: 1.5rem;
}

.validation-results h4 {
    margin-bottom: 1rem;
    color: var(--app-text-primary);
}

#validation-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.validation-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    border-radius: var(--app-border-radius);
    background: var(--app-bg-tertiary);
}

.validation-item.valid {
    background: rgba(16, 185, 129, 0.1);
    border: 1px solid var(--app-success);
}

.validation-item.invalid {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid var(--app-error);
}

.validation-icon {
    width: 20px;
    height: 20px;
}

.validation-item.valid .validation-icon {
    color: var(--app-success);
}

.validation-item.invalid .validation-icon {
    color: var(--app-error);
}

.validation-org {
    font-weight: 600;
    color: var(--app-text-primary);
    min-width: 200px;
}

.validation-message {
    color: var(--app-text-secondary);
    flex: 1;
}

/* ========================================
   RESPONSIVE
   ======================================== */
@media (max-width: 768px) {
    .app-main {
        padding: 1rem;
    }
    
    .generator-title {
        font-size: 1.75rem;
    }
    
    .progress-steps {
        flex-direction: column;
        gap: 1rem;
    }
    
    .step-connector {
        display: none;
    }
    
    .orgs-actions {
        flex-direction: column;
    }
    
    .success-actions {
        flex-direction: column;
        width: 100%;
    }
    
    .error-actions {
        flex-direction: column;
        width: 100%;
    }
}

### File: index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configuration Generator</title>
    <link rel="stylesheet" href="/data-comparison/configGenerator/index.css">
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
    <div class="app-container">
        <!-- Main Content -->
        <main class="app-main">
            <div class="config-generator">
                <!-- Header Section -->
                <div class="generator-header">
                    <h2 class="generator-title">Configuration Generator</h2>
                    <p class="generator-description">
                        Create a new CPQ data comparison configuration by selecting organizations and defining comparison parameters.
                    </p>
                </div>

                <!-- Progress Steps -->
                <div class="progress-steps">
                    <div class="step active" id="step-orgs">
                        <div class="step-icon">
                            <i data-lucide="building"></i>
                        </div>
                        <div class="step-content">
                            <div class="step-title">Select Organizations</div>
                            <div class="step-description">Choose orgs to compare</div>
                        </div>
                    </div>
                    <div class="step-connector"></div>
                    <div class="step" id="step-config">
                        <div class="step-icon">
                            <i data-lucide="settings"></i>
                        </div>
                        <div class="step-content">
                            <div class="step-title">Generate Configuration</div>
                            <div class="step-description">Create config file</div>
                        </div>
                    </div>
                </div>

                <!-- State: Org Selection -->
                <div id="org-selection-state" class="generator-state active">
                    <div class="state-header">
                        <h3>Select Organizations</h3>
                        <p>Choose 2 or more Salesforce organizations to compare</p>
                    </div>

                    <!-- Loading State -->
                    <div id="orgs-loading" class="loading-state">
                        <div class="loading-spinner"></div>
                        <p class="loading-text">Loading authenticated organizations...</p>
                    </div>

                    <!-- Error State -->
                    <div id="orgs-error" class="error-state hidden">
                        <div class="error-icon">
                            <i data-lucide="x-circle"></i>
                        </div>
                        <div class="error-content">
                            <h4>Failed to Load Organizations</h4>
                            <p id="orgs-error-message">An error occurred while loading organizations.</p>
                            <button id="retry-orgs-btn" class="btn btn-secondary">
                                <i data-lucide="refresh-cw"></i>
                                Try Again
                            </button>
                        </div>
                    </div>

                    <!-- Org List -->
                    <div id="orgs-content" class="orgs-content hidden">
                        <div class="orgs-toolbar">
                            <div class="selection-info">
                                <span id="selection-count">0 organizations selected</span>
                                <span class="selection-requirement">(minimum 2 required)</span>
                            </div>
                            <div class="toolbar-actions">
                                <button id="select-all-orgs" class="btn-link">Select All</button>
                                <button id="clear-orgs" class="btn-link">Clear</button>
                            </div>
                        </div>

                        <div id="orgs-list" class="orgs-list">
                            <!-- Organizations will be populated here -->
                        </div>

                        <div class="orgs-actions">
                            <button id="validate-orgs-btn" class="btn btn-secondary" disabled>
                                <i data-lucide="check-circle"></i>
                                Validate Organizations
                            </button>
                            <button id="proceed-config-btn" class="btn btn-primary" disabled>
                                <i data-lucide="arrow-right"></i>
                                Generate Configuration
                            </button>
                        </div>

                        <!-- Validation Results -->
                        <div id="validation-results" class="validation-results hidden">
                            <h4>Validation Results</h4>
                            <div id="validation-list"></div>
                        </div>
                    </div>
                </div>

                <!-- State: Config Creation -->
                <div id="config-creation-state" class="generator-state hidden">
                    <div class="state-header">
                        <h3>Generating Configuration</h3>
                        <p>Creating configuration file with selected organizations</p>
                    </div>

                    <!-- Config Progress -->
                    <div class="config-progress">
                        <div class="progress-info">
                            <div class="progress-title" id="config-progress-title">Initializing...</div>
                            <div class="progress-details" id="config-progress-details">Starting configuration generation process</div>
                        </div>
                        
                        <div class="progress-bar">
                            <div class="progress-fill" id="config-progress-fill" style="width: 0%"></div>
                        </div>
                        
                        <div class="progress-stats">
                            <span class="progress-percentage" id="config-progress-percentage">0%</span>
                            <span class="progress-commands" id="config-progress-commands">0 / 0 commands</span>
                        </div>
                    </div>

                    <!-- SFDX Command Log -->
                    <div class="sfdx-log">
                        <div class="log-header">
                            <h4>SFDX Operations</h4>
                            <button id="toggle-sfdx-log" class="btn-link">
                                <i data-lucide="chevron-down"></i>
                                Show Details
                            </button>
                        </div>
                        <div id="sfdx-log-content" class="log-content hidden">
                            <!-- SFDX command logs will appear here -->
                        </div>
                    </div>

                    <!-- Config Success -->
                    <div id="config-success" class="config-success hidden">
                        <div class="success-icon">
                            <i data-lucide="check-circle"></i>
                        </div>
                        <div class="success-content">
                            <h4>Configuration Generated Successfully!</h4>
                            <div class="config-summary">
                                <div class="summary-item">
                                    <span class="summary-label">Configuration File:</span>
                                    <span class="summary-value" id="config-filename">config_xxx.json</span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Organizations:</span>
                                    <span class="summary-value" id="config-orgs-count">0</span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Created:</span>
                                    <span class="summary-value" id="config-created-time">Just now</span>
                                </div>
                            </div>
                            <div class="success-actions">
                                <button id="start-object-selection-btn" class="btn btn-primary">
                                    <i data-lucide="database"></i>
                                    Start Object Selection
                                </button>
                                <button id="create-another-config-btn" class="btn btn-secondary">
                                    <i data-lucide="plus"></i>
                                    Create Another Configuration
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Config Error -->
                    <div id="config-error" class="config-error hidden">
                        <div class="error-icon">
                            <i data-lucide="x-circle"></i>
                        </div>
                        <div class="error-content">
                            <h4>Configuration Generation Failed</h4>
                            <p id="config-error-message">An error occurred during configuration generation.</p>
                            <div class="error-actions">
                                <button id="retry-config-btn" class="btn btn-secondary">
                                    <i data-lucide="refresh-cw"></i>
                                    Retry Generation
                                </button>
                                <button id="back-to-orgs-btn" class="btn btn-outline">
                                    <i data-lucide="arrow-left"></i>
                                    Back to Org Selection
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script src="/data-comparison/configGenerator/index.js"></script>
</body>
</html>

### File: index.js

/**
 * Configuration Generator - Frontend Logic
 * Integrates with extension shell and orchestrates config creation flow
 */
class ConfigGenerator {
    constructor() {
        this.appName = 'Configuration Generator';
        this.appVersion = '1.0.0';
        this.currentState = 'org-selection'; // org-selection, config-creation
        this.isInExtensionShell = window.parent !== window;
        this.logger = null;
        this.themeReceived = false;

        // Data state
        this.organizations = [];
        this.selectedOrgs = [];
        this.configData = null;
        this.sfdxProgress = {
            current: 0,
            total: 0,
            commands: []
        };

        // Elements
        this.elements = {
            // Steps
            stepOrgs: document.getElementById('step-orgs'),
            stepConfig: document.getElementById('step-config'),
            
            // States
            orgSelectionState: document.getElementById('org-selection-state'),
            configCreationState: document.getElementById('config-creation-state'),
            
            // Org Selection
            orgsLoading: document.getElementById('orgs-loading'),
            orgsError: document.getElementById('orgs-error'),
            orgsContent: document.getElementById('orgs-content'),
            orgsErrorMessage: document.getElementById('orgs-error-message'),
            retryOrgsBtn: document.getElementById('retry-orgs-btn'),
            selectionCount: document.getElementById('selection-count'),
            selectAllOrgs: document.getElementById('select-all-orgs'),
            clearOrgs: document.getElementById('clear-orgs'),
            orgsList: document.getElementById('orgs-list'),
            validateOrgsBtn: document.getElementById('validate-orgs-btn'),
            proceedConfigBtn: document.getElementById('proceed-config-btn'),
            validationResults: document.getElementById('validation-results'),
            validationList: document.getElementById('validation-list'),
            
            // Config Creation
            configProgressTitle: document.getElementById('config-progress-title'),
            configProgressDetails: document.getElementById('config-progress-details'),
            configProgressFill: document.getElementById('config-progress-fill'),
            configProgressPercentage: document.getElementById('config-progress-percentage'),
            configProgressCommands: document.getElementById('config-progress-commands'),
            toggleSfdxLog: document.getElementById('toggle-sfdx-log'),
            sfdxLogContent: document.getElementById('sfdx-log-content'),
            configSuccess: document.getElementById('config-success'),
            configError: document.getElementById('config-error'),
            configErrorMessage: document.getElementById('config-error-message'),
            configFilename: document.getElementById('config-filename'),
            configOrgsCount: document.getElementById('config-orgs-count'),
            configCreatedTime: document.getElementById('config-created-time'),
            startObjectSelectionBtn: document.getElementById('start-object-selection-btn'),
            createAnotherConfigBtn: document.getElementById('create-another-config-btn'),
            retryConfigBtn: document.getElementById('retry-config-btn'),
            backToOrgsBtn: document.getElementById('back-to-orgs-btn')
        };

        this.init();
    }

    async init() {
        console.log(` ${this.appName} initializing...`);
        console.log(` In extension shell: ${this.isInExtensionShell}`);
        
        this.setupLogger();
        this.initializeLucideIcons();
        this.setupExtensionCommunication();
        this.bindEvents();
        this.notifyExtensionLoaded();
        this.setInitialState();
        
        // Start with org loading
        await this.loadOrganizations();
        
        this.logger.info('Configuration Generator initialized');
    }

    setupLogger() {
        // Browser-compatible logger that communicates with Extension Shell
        this.logger = {
            log: (level, message, data = null) => {
                const timestamp = new Date().toISOString();
                const formatted = `[${timestamp}] [${level.toUpperCase()}] [${this.appName}] ${message}`;
                
                // Console output with colors
                const colors = {
                    error: 'color: #ef4444; font-weight: bold;',
                    warn: 'color: #f59e0b; font-weight: bold;',
                    info: 'color: #3b82f6; font-weight: bold;',
                    debug: 'color: #8b5cf6; font-weight: bold;',
                    trace: 'color: #64748b; font-weight: bold;'
                };

                console.log(`%c${formatted}`, colors[level] || '');
                
                if (data) {
                    console.log('Data:', data);
                }

                // Send to Extension Shell
                this.postMessageToExtension({
                    type: 'ADD_LOG',
                    data: {
                        app: this.appName,
                        level: level,
                        message: data ? `${message} ${JSON.stringify(data)}` : message,
                        location: 'configGenerator/index.js',
                        timestamp: timestamp
                    }
                });
            },
            error: (message, data) => this.logger.log('error', message, data),
            warn: (message, data) => this.logger.log('warn', message, data),
            info: (message, data) => this.logger.log('info', message, data),
            debug: (message, data) => this.logger.log('debug', message, data),
            trace: (message, data) => this.logger.log('trace', message, data)
        };
    }

    initializeLucideIcons() {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
            this.logger.debug('Lucide icons initialized');
        } else {
            this.logger.warn('Lucide icons not available');
        }
    }

    setupExtensionCommunication() {
        if (!this.isInExtensionShell) {
            this.logger.warn('Not running in Extension Shell - standalone mode');
            return;
        }

        this.logger.info('Extension Shell communication established');

        // Listen for messages from Extension Shell
        window.addEventListener('message', (event) => {
            if (event.origin !== window.location.origin) {
                return;
            }

            const { type, theme, variables } = event.data;

            switch (type) {
                case 'THEME_CHANGED':
                    this.logger.info(`Theme changed to: ${theme}`);
                    this.updateTheme(theme, variables);
                    break;
                    
                case 'THEME_DATA':
                    this.logger.info(`Received theme data: ${theme}`, variables);
                    this.updateTheme(theme, variables);
                    this.themeReceived = true;
                    break;
                    
                default:
                    this.logger.trace('Received unknown message type', { type });
            }
        });

        // Request initial theme data
        this.requestThemeData();
    }

    requestThemeData() {
        this.postMessageToExtension({
            type: 'REQUEST_THEME'
        });
        this.logger.debug('Requested theme data from shell');
        
        // Fallback: if no theme received in 2 seconds, apply default
        setTimeout(() => {
            if (!this.themeReceived) {
                this.logger.warn('No theme data received from shell, applying default');
                this.updateTheme('light', {});
            }
        }, 2000);
    }

    updateTheme(theme, variables) {
        this.logger.info(`Applying theme: ${theme}`, variables);

        // Apply theme class to body
        document.body.setAttribute('data-theme', theme);
        
        // Apply theme variables if provided
        if (variables) {
            const root = document.documentElement;
            let appliedCount = 0;
            
            Object.entries(variables).forEach(([key, value]) => {
                if (value && value.trim()) {
                    root.style.setProperty(`--app-${key}`, value.trim());
                    appliedCount++;
                }
            });
            
            this.logger.debug(`Applied ${appliedCount} theme variables`);
        }

        // Force repaint
        document.body.style.display = 'none';
        document.body.offsetHeight; // Trigger reflow
        document.body.style.display = '';
        
        this.logger.info(`Theme ${theme} applied successfully`);
    }

    postMessageToExtension(message) {
        if (this.isInExtensionShell && window.parent) {
            window.parent.postMessage(message, '*');
        }
    }

    notifyExtensionLoaded() {
        this.postMessageToExtension({
            type: 'APP_LOADED',
            data: { 
                appName: this.appName,
                version: this.appVersion
            }
        });
        this.logger.info('Notified Extension Shell of app load');
    }

    setInitialState() {
        this.setAppState('loading', 'Initializing configuration generator');
        this.setState('org-selection');
        this.logger.debug('Initial state set');
    }

    setAppState(state, message = '') {
        this.postMessageToExtension({
            type: 'APP_STATE_CHANGED',
            data: { state, message: message || this.capitalizeFirst(state) }
        });
        this.logger.debug('App state changed', { state, message });
    }

    showLoader(text, progress = 0) {
        this.postMessageToExtension({
            type: 'SHOW_LOADER',
            data: { text, progress }
        });
    }

    updateLoader(progress, text = null) {
        this.postMessageToExtension({
            type: 'UPDATE_LOADER',
            data: { progress, text }
        });
    }

    hideLoader() {
        this.postMessageToExtension({
            type: 'HIDE_LOADER'
        });
    }

    bindEvents() {
        this.logger.debug('Binding event listeners');

        // Org Selection Events
        this.elements.retryOrgsBtn?.addEventListener('click', () => this.loadOrganizations());
        this.elements.selectAllOrgs?.addEventListener('click', () => this.selectAllOrganizations());
        this.elements.clearOrgs?.addEventListener('click', () => this.clearOrgSelection());
        this.elements.validateOrgsBtn?.addEventListener('click', () => this.validateOrganizations());
        this.elements.proceedConfigBtn?.addEventListener('click', () => this.proceedToConfigCreation());

        // Config Creation Events
        this.elements.toggleSfdxLog?.addEventListener('click', () => this.toggleSfdxLog());
        this.elements.startObjectSelectionBtn?.addEventListener('click', () => this.startObjectSelection());
        this.elements.createAnotherConfigBtn?.addEventListener('click', () => this.resetGenerator());
        this.elements.retryConfigBtn?.addEventListener('click', () => this.retryConfigGeneration());
        this.elements.backToOrgsBtn?.addEventListener('click', () => this.backToOrgSelection());

        // Org list delegation
        this.elements.orgsList?.addEventListener('click', (e) => this.handleOrgClick(e));
        this.elements.orgsList?.addEventListener('change', (e) => this.handleOrgChange(e));

        this.logger.debug('Event listeners bound');
    }

    // ========================================
    // STATE MANAGEMENT
    // ========================================

    setState(newState) {
        this.logger.info(`State transition: ${this.currentState}  ${newState}`);
        
        this.currentState = newState;
        
        // Update step indicators
        this.elements.stepOrgs?.classList.toggle('active', newState === 'org-selection');
        this.elements.stepOrgs?.classList.toggle('completed', newState === 'config-creation');
        this.elements.stepConfig?.classList.toggle('active', newState === 'config-creation');
        
        // Update state containers
        this.elements.orgSelectionState?.classList.toggle('active', newState === 'org-selection');
        this.elements.configCreationState?.classList.toggle('active', newState === 'config-creation');
        
        // Update app state in shell
        if (newState === 'org-selection') {
            this.setAppState('idle', 'Org Selection');
        } else if (newState === 'config-creation') {
            this.setAppState('loading', 'Generate Configuration');
        }
    }

    // ========================================
    // ORG SELECTION LOGIC
    // ========================================

    async loadOrganizations() {
        this.logger.info(' Loading organizations from SFDX');
        
        this.showOrgLoading(true);
        this.setAppState('loading', 'Loading organizations');
        this.showLoader('Loading authenticated organizations...', 10);

        try {
            const response = await fetch('/api/data-comparison/orgs');
            const data = await response.json();
            
            this.updateLoader(70, 'Processing organization data...');
            
            if (data.success && data.orgs) {
                this.organizations = data.orgs;
                this.showOrgLoading(false);
                this.renderOrganizations();
                this.setAppState('idle', 'Org Selection');
                this.hideLoader();
                
                this.logger.info('Organizations loaded successfully', { 
                    count: this.organizations.length 
                });
            } else {
                throw new Error(data.error || 'Failed to load organizations');
            }
            
        } catch (error) {
            this.logger.error('Failed to load organizations', { error: error.message });
            this.showOrgError(error.message);
            this.setAppState('error', 'Failed to load organizations');
            this.hideLoader();
        }
    }

    showOrgLoading(loading) {
        this.elements.orgsLoading?.classList.toggle('hidden', !loading);
        this.elements.orgsContent?.classList.toggle('hidden', loading);
        this.elements.orgsError?.classList.toggle('hidden', true);
    }

    showOrgError(message) {
        this.elements.orgsError?.classList.toggle('hidden', false);
        this.elements.orgsLoading?.classList.toggle('hidden', true);
        this.elements.orgsContent?.classList.toggle('hidden', true);
        
        if (this.elements.orgsErrorMessage) {
            this.elements.orgsErrorMessage.textContent = message;
        }
    }

    renderOrganizations() {
        if (!this.elements.orgsList) return;
        
        this.logger.debug('Rendering organizations list', { count: this.organizations.length });
        
        const html = this.organizations.map((org, index) => `
            <div class="org-item" data-org-index="${index}">
                <div class="org-checkbox">
                    <input type="checkbox" id="org-${index}" data-org-index="${index}">
                </div>
                <div class="org-info">
                    <div class="org-name">${org.alias || org.username}</div>
                    <div class="org-details">
                        <span class="org-username">${org.username}</span>
                        <span class="org-status ${org.connectedStatus === 'Connected' ? 'connected' : 'disconnected'}">
                            ${org.connectedStatus}
                        </span>
                    </div>
                </div>
                <div class="org-actions">
                    <span class="org-type">${org.orgType || 'Production'}</span>
                </div>
            </div>
        `).join('');
        
        this.elements.orgsList.innerHTML = html;
        this.initializeLucideIcons();
        this.updateSelectionCount();
    }

    handleOrgClick(event) {
        const orgItem = event.target.closest('.org-item');
        if (!orgItem || event.target.type === 'checkbox') return;
        
        const checkbox = orgItem.querySelector('input[type="checkbox"]');
        if (checkbox) {
            checkbox.checked = !checkbox.checked;
            this.handleOrgChange({ target: checkbox });
        }
    }

    handleOrgChange(event) {
        if (event.target.type !== 'checkbox') return;
        
        const orgIndex = parseInt(event.target.dataset.orgIndex);
        const isChecked = event.target.checked;
        const orgItem = event.target.closest('.org-item');
        
        orgItem?.classList.toggle('selected', isChecked);
        
        if (isChecked) {
            if (!this.selectedOrgs.some(org => org.username === this.organizations[orgIndex].username)) {
                this.selectedOrgs.push(this.organizations[orgIndex]);
            }
        } else {
            this.selectedOrgs = this.selectedOrgs.filter(
                org => org.username !== this.organizations[orgIndex].username
            );
        }
        
        this.updateSelectionCount();
        this.logger.debug('Org selection changed', { 
            selected: this.selectedOrgs.length,
            org: this.organizations[orgIndex].username,
            action: isChecked ? 'selected' : 'deselected'
        });
    }

    selectAllOrganizations() {
        this.logger.info('Selecting all organizations');
        
        const checkboxes = this.elements.orgsList?.querySelectorAll('input[type="checkbox"]');
        checkboxes?.forEach(checkbox => {
            checkbox.checked = true;
            const orgIndex = parseInt(checkbox.dataset.orgIndex);
            if (!this.selectedOrgs.some(org => org.username === this.organizations[orgIndex].username)) {
                this.selectedOrgs.push(this.organizations[orgIndex]);
            }
            checkbox.closest('.org-item')?.classList.add('selected');
        });
        
        this.updateSelectionCount();
    }

    clearOrgSelection() {
        this.logger.info('Clearing org selection');
        
        const checkboxes = this.elements.orgsList?.querySelectorAll('input[type="checkbox"]');
        checkboxes?.forEach(checkbox => {
            checkbox.checked = false;
            checkbox.closest('.org-item')?.classList.remove('selected');
        });
        
        this.selectedOrgs = [];
        this.updateSelectionCount();
        this.hideValidationResults();
    }

    updateSelectionCount() {
        const count = this.selectedOrgs.length;
        const hasMinimum = count >= 2;
        
        if (this.elements.selectionCount) {
            const text = count === 0 
                ? '0 organizations selected'
                : count === 1
                ? '1 organization selected'
                : `${count} organizations selected`;
            
            this.elements.selectionCount.textContent = text;
        }
        
        // Update button states
        if (this.elements.validateOrgsBtn) {
            this.elements.validateOrgsBtn.disabled = !hasMinimum;
        }
        if (this.elements.proceedConfigBtn) {
            this.elements.proceedConfigBtn.disabled = !hasMinimum;
        }
        
        this.logger.debug('Selection count updated', { count, hasMinimum });
    }

    async validateOrganizations() {
        this.logger.info(' Validating selected organizations', { count: this.selectedOrgs.length });
        
        this.setAppState('loading', 'Validating organizations');
        this.showLoader('Validating org connections...', 0);
        
        try {
            const response = await fetch('/api/data-comparison/orgs/validate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orgs: this.selectedOrgs })
            });
            
            this.updateLoader(70, 'Processing validation results...');
            
            const data = await response.json();
            
            if (data.success) {
                this.showValidationResults(data.validationResults);
                this.setAppState('success', `${data.validCount} orgs validated`);
                this.hideLoader();
                
                this.logger.info('Org validation completed', { 
                    valid: data.validCount,
                    invalid: data.invalidCount
                });
            } else {
                throw new Error(data.error || 'Validation failed');
            }
            
        } catch (error) {
            this.logger.error('Org validation failed', { error: error.message });
            this.setAppState('error', 'Validation failed');
            this.hideLoader();
        }
    }

    showValidationResults(results) {
        if (!this.elements.validationResults || !this.elements.validationList) return;
        
        const html = results.map(result => `
            <div class="validation-item ${result.isValid ? 'valid' : 'invalid'}">
                <i data-lucide="${result.isValid ? 'check-circle' : 'x-circle'}" class="validation-icon"></i>
                <span class="validation-org">${result.org}</span>
                <span class="validation-message">${result.message}</span>
            </div>
        `).join('');
        
        this.elements.validationList.innerHTML = html;
        this.elements.validationResults.classList.remove('hidden');
        this.initializeLucideIcons();
    }

    hideValidationResults() {
        this.elements.validationResults?.classList.add('hidden');
    }

    async proceedToConfigCreation() {
        this.logger.info(' Proceeding to configuration creation');
        
        this.setState('config-creation');
        
        // Start config generation
        await this.generateConfiguration();
    }

    // ========================================
    // CONFIG CREATION LOGIC
    // ========================================

    async generateConfiguration() {
        this.logger.info(' Generating configuration', { orgs: this.selectedOrgs.length });
        
        this.setAppState('loading', 'Generate Configuration');
        this.showConfigProgress('Initializing configuration generation...', 0, 0, 1);
        
        try {
            // Simulate SFDX progress
            this.updateSfdxProgress(1, 3, 'Starting configuration generator...');
            
            const response = await fetch('/api/data-comparison/config/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ selectedOrgs: this.selectedOrgs })
            });
            
            this.updateSfdxProgress(2, 3, 'Processing organization data...');
            
            const data = await response.json();
            
            if (data.success) {
                this.updateSfdxProgress(3, 3, 'Configuration file created successfully');
                this.configData = data;
                this.showConfigSuccess(data);
                this.setAppState('success', 'Configuration generated');
                
                this.logger.info('Configuration generated successfully', { 
                    filename: data.configFilename,
                    orgs: this.selectedOrgs.length
                });
            } else {
                throw new Error(data.error || 'Configuration generation failed');
            }
            
        } catch (error) {
            this.logger.error('Config generation failed', { error: error.message });
            this.showConfigError(error.message);
            this.setAppState('error', 'Configuration generation failed');
        }
    }

    updateSfdxProgress(current, total, message) {
        this.sfdxProgress.current = current;
        this.sfdxProgress.total = total;
        
        const percentage = total > 0 ? Math.round((current / total) * 100) : 0;
        
        this.showConfigProgress(message, percentage, current, total);
        this.addSfdxLogEntry(message);
        
        // Update shell loader
        this.updateLoader(percentage, message);
        
        this.logger.debug('SFDX progress updated', { current, total, percentage, message });
    }

    showConfigProgress(title, percentage, current, total) {
        if (this.elements.configProgressTitle) {
            this.elements.configProgressTitle.textContent = title;
        }
        if (this.elements.configProgressDetails) {
            this.elements.configProgressDetails.textContent = 'Executing SFDX commands and processing data';
        }
        if (this.elements.configProgressFill) {
            this.elements.configProgressFill.style.width = `${percentage}%`;
        }
        if (this.elements.configProgressPercentage) {
            this.elements.configProgressPercentage.textContent = `${percentage}%`;
        }
        if (this.elements.configProgressCommands) {
            this.elements.configProgressCommands.textContent = `${current} / ${total} commands`;
        }
    }

    addSfdxLogEntry(message) {
        if (!this.elements.sfdxLogContent) return;
        
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry info';
        logEntry.innerHTML = `
            <span class="log-timestamp">${timestamp}</span>
            <span class="log-message">${message}</span>
        `;
        
        this.elements.sfdxLogContent.appendChild(logEntry);
        
        // Auto-scroll to bottom
        this.elements.sfdxLogContent.scrollTop = this.elements.sfdxLogContent.scrollHeight;
    }

    toggleSfdxLog() {
        const isHidden = this.elements.sfdxLogContent?.classList.contains('hidden');
        
        this.elements.sfdxLogContent?.classList.toggle('hidden');
        
        const toggleButton = this.elements.toggleSfdxLog;
        if (toggleButton) {
            const icon = toggleButton.querySelector('i');
            const text = toggleButton.querySelector('span') || toggleButton;
            
            if (isHidden) {
                icon?.setAttribute('data-lucide', 'chevron-up');
                if (text.textContent) text.textContent = 'Hide Details';
            } else {
                icon?.setAttribute('data-lucide', 'chevron-down');
                if (text.textContent) text.textContent = 'Show Details';
            }
            
            this.initializeLucideIcons();
        }
    }

    showConfigSuccess(data) {
        this.elements.configSuccess?.classList.remove('hidden');
        this.elements.configError?.classList.add('hidden');
        
        if (this.elements.configFilename) {
            this.elements.configFilename.textContent = data.configFilename;
        }
        if (this.elements.configOrgsCount) {
            this.elements.configOrgsCount.textContent = this.selectedOrgs.length.toString();
        }
        if (this.elements.configCreatedTime) {
            this.elements.configCreatedTime.textContent = new Date(data.summary.created).toLocaleString();
        }
        
        this.hideLoader();
    }

    showConfigError(message) {
        this.elements.configError?.classList.remove('hidden');
        this.elements.configSuccess?.classList.add('hidden');
        
        if (this.elements.configErrorMessage) {
            this.elements.configErrorMessage.textContent = message;
        }
        
        this.hideLoader();
    }

    startObjectSelection() {
        this.logger.info(' Starting object selection phase');
        
        if (this.configData?.configFilename) {
            // Navigate to object selection with config
            const configParam = encodeURIComponent(JSON.stringify({
                filename: this.configData.configFilename,
                selectedOrgs: this.selectedOrgs
            }));
            
            window.location.href = `/api/data-comparison/objects?config=${configParam}`;
        } else {
            this.logger.error('No config data available for object selection');
        }
    }

    resetGenerator() {
        this.logger.info(' Resetting configuration generator');
        
        this.selectedOrgs = [];
        this.configData = null;
        this.sfdxProgress = { current: 0, total: 0, commands: [] };
        
        this.hideValidationResults();
        this.elements.configSuccess?.classList.add('hidden');
        this.elements.configError?.classList.add('hidden');
        this.elements.sfdxLogContent && (this.elements.sfdxLogContent.innerHTML = '');
        
        this.setState('org-selection');
        this.clearOrgSelection();
        this.setAppState('idle', 'Org Selection');
    }

    retryConfigGeneration() {
        this.logger.info(' Retrying configuration generation');
        
        this.elements.configError?.classList.add('hidden');
        this.generateConfiguration();
    }

    backToOrgSelection() {
        this.logger.info(' Returning to org selection');
        
        this.setState('org-selection');
        this.setAppState('idle', 'Org Selection');
    }

    capitalizeFirst(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    // Public API for external use
    getAppInfo() {
        return {
            name: this.appName,
            version: this.appVersion,
            state: this.currentState,
            isConnected: this.isInExtensionShell,
            themeReceived: this.themeReceived,
            selectedOrgs: this.selectedOrgs.length,
            configData: this.configData
        };
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log(' DOM loaded, initializing Configuration Generator...');
    window.configGenerator = new ConfigGenerator();
});

// Global API
window.ConfigGenerator = {
    getAppInfo: () => window.configGenerator?.getAppInfo(),
    setTheme: (theme, variables) => window.configGenerator?.updateTheme(theme, variables)
};

Dir: apps\data-comparison\components\modules\dataExtraction
Content:

Dir: apps\data-comparison\components\modules\serverExchange
Content:

Dir: apps\data-comparison\components\modules\sfdxRunner
Content:

### File: index.js

// apps/data-comparison/components/modules/sfdxRunner/index.js

const { exec } = require('child_process');
const { promisify } = require('util');
let vscode;
try {
    vscode = require('vscode');
} catch (error) {
    vscode = null;
}
const { createLogger } = require('../../../../../shared/utils/Logger');

const execAsync = promisify(exec);

/**
 * SFDX CLI Error Class
 */
class SFDXError extends Error {
    constructor(message, command, stderr, exitCode) {
        super(message);
        this.name = 'SFDXError';
        this.command = command;
        this.stderr = stderr;
        this.exitCode = exitCode;
    }
}

/**
 * Simple SFDX CLI Runner
 * Auto-detects SF CLI path or uses VS Code setting
 */
class SFDXRunner {
    constructor(options = {}) {
        this.logger = options.logger || createLogger({ 
            appName: 'SFDXRunner',
            location: 'sfdxRunner/index.js'
        });
        
        this.defaultMaxBuffer = 50 * 1024 * 1024; // 50MB
        this.sfdxPath = null;
        this.isInitialized = false;
    }

    /**
     * Auto-detect SFDX/SF CLI path
     */
    async detectSFPath() {
        this.logger.info(' Auto-detecting Salesforce CLI path...');
        
        // Try different detection commands based on platform
        const commands = process.platform === 'win32' 
            ? ['where sf', 'where sfdx', 'where sf.exe', 'where sfdx.exe'] 
            : ['which sf', 'which sfdx', 'command -v sf', 'command -v sfdx'];
        
        for (const cmd of commands) {
            try {
                this.logger.debug('Trying detection command', { command: cmd });
                const { stdout } = await execAsync(cmd, { 
                    maxBuffer: this.defaultMaxBuffer,
                    encoding: 'utf8',
                    timeout: 5000 // 5 second timeout
                });
                
                const path = stdout.trim().split('\n')[0]; // Take first result
                if (path && path.length > 0) {
                    this.logger.info(' SF CLI auto-detected', { path, command: cmd });
                    return path;
                }
            } catch (error) {
                this.logger.debug('Detection command failed', { 
                    command: cmd, 
                    error: error.message 
                });
                continue;
            }
        }
        
        this.logger.warn(' Auto-detection failed');
        return null;
    }

    /**
     * Get SFDX path from VS Code settings
     */
   getVSCodeSetting() {
        // Skip if vscode not available (server environment)
        if (!vscode) {
            this.logger.debug('VS Code not available - skipping settings check');
            return null;
        }
        
        try {
            const config = vscode.workspace.getConfiguration('cpq-toolset');
            const sfdxPath = config.get('salesforceCliPath');
            
            if (sfdxPath && sfdxPath.trim() !== '') {
                this.logger.info('Using SF CLI path from VS Code settings', { path: sfdxPath });
                return sfdxPath.trim();
            }
            
            this.logger.debug('No Salesforce CLI path configured in VS Code settings');
            return null;
        } catch (error) {
            this.logger.error('Failed to read VS Code settings', { error: error.message });
            return null;
        }
    }

    /**
     * Try common installation paths as final fallback
     */
    async tryCommonPaths() {
        this.logger.info(' Trying common installation paths...');
        
        const commonPaths = process.platform === 'win32' 
            ? [
                'C:\\Program Files\\Salesforce CLI\\bin\\sf.exe',
                'C:\\Program Files\\Salesforce CLI\\bin\\sfdx.exe',
                'sf.exe', 
                'sfdx.exe'
              ]
            : [
                '/usr/local/bin/sf',
                '/usr/local/bin/sfdx',
                '/opt/homebrew/bin/sf',
                '/opt/homebrew/bin/sfdx',
                'sf',
                'sfdx'
              ];
        
        for (const path of commonPaths) {
            try {
                this.logger.debug('Testing common path', { path });
                await execAsync(`"${path}" --version`, { 
                    maxBuffer: this.defaultMaxBuffer,
                    timeout: 5000
                });
                this.logger.info(' SF CLI found at common path', { path });
                return path;
            } catch (error) {
                continue;
            }
        }
        
        this.logger.error(' No SF CLI found in common paths');
        return null;
    }

    /**
     * Initialize and find SFDX CLI path
     */
    async initialize() {
        if (this.isInitialized && this.sfdxPath) {
            return this.sfdxPath;
        }

        this.logger.info(' Initializing SFDX CLI Runner...');

        // Step 1: Try auto-detection
        this.sfdxPath = await this.detectSFPath();
        
        // Step 2: Try VS Code settings
        if (!this.sfdxPath) {
            this.sfdxPath = this.getVSCodeSetting();
        }
        
        // Step 3: Try common paths
        if (!this.sfdxPath) {
            this.sfdxPath = await this.tryCommonPaths();
        }
        
        // Step 4: Give up and throw error
        if (!this.sfdxPath) {
            const errorMessage = `
 Salesforce CLI not found!

Please either:
1. Install Salesforce CLI: https://developer.salesforce.com/tools/cli
2. Set the CLI path in VS Code settings:
   - Open VS Code Settings (Ctrl+,)
   - Search for "cpq-toolset.salesforceCliPath"
   - Set the full path to your sf/sfdx executable

Examples:
- Windows: C:\\Program Files\\Salesforce CLI\\bin\\sf.exe
- macOS: /usr/local/bin/sf
- Linux: /usr/local/bin/sf
            `.trim();
            
            this.logger.error(errorMessage);
            throw new Error(errorMessage);
        }

        // Verify the path works
        try {
            await this.testCLI();
            this.isInitialized = true;
            this.logger.info(' SFDX CLI Runner initialized successfully', { path: this.sfdxPath });
            return this.sfdxPath;
        } catch (error) {
            this.logger.error(' SF CLI path verification failed', { 
                path: this.sfdxPath, 
                error: error.message 
            });
            throw new Error(`Salesforce CLI found but not working: ${error.message}`);
        }
    }

    /**
     * Test if CLI is working
     */
    async testCLI() {
        const command = `"${this.sfdxPath}" --version`;
        const { stdout } = await execAsync(command, { 
            maxBuffer: this.defaultMaxBuffer,
            timeout: 10000
        });
        
        this.logger.debug('CLI test successful', { version: stdout.trim() });
        return stdout.trim();
    }

    /**
     * Execute a CLI command
     */
    async run(command, options = {}) {
        await this.initialize();
        
        // Build full command
        const fullCommand = command.startsWith('sfdx') || command.startsWith('sf')
            ? command.replace(/^(sfdx|sf)/, `"${this.sfdxPath}"`)
            : `"${this.sfdxPath}" ${command}`;
        
        this.logger.info(' Executing SF command', { 
            command: fullCommand.length > 100 ? fullCommand.substring(0, 100) + '...' : fullCommand 
        });
        
        try {
            const execOptions = {
                encoding: 'utf8',
                maxBuffer: options.maxBuffer || this.defaultMaxBuffer,
                timeout: options.timeout || 120000, // 2 minutes default
                env: {
                    ...process.env,
                    SF_DISABLE_TELEMETRY: 'true',
                    SF_CONFIG_DIR: process.env.SF_CONFIG_DIR || `${process.env.HOME}/.sf`
                },
                cwd: options.cwd || process.env.HOME,
                ...options
            };

            const { stdout, stderr } = await execAsync(fullCommand, execOptions);

            if (stderr && stderr.trim()) {
                this.logger.warn('Command stderr output', { 
                    command: fullCommand.substring(0, 50) + '...', 
                    stderr: stderr.trim() 
                });
            }

            const result = stdout.trim();
            this.logger.debug(' Command completed', { 
                command: fullCommand.substring(0, 50) + '...',
                outputLength: result.length 
            });

            return result;
            
        } catch (error) {
            this.logger.error(' Command execution failed', { 
                command: fullCommand.substring(0, 50) + '...',
                error: error.message,
                stderr: error.stderr,
                exitCode: error.code
            });
            
            throw new SFDXError(
                `SF command failed: ${error.message}`,
                fullCommand,
                error.stderr,
                error.code
            );
        }
    }

    /**
     * Execute command and parse JSON output
     */
    async runWithJson(command) {
        // Auto-add --json flag if not present
        let finalCommand = command;
        if (!command.includes('--json') && !command.includes('-j')) {
            finalCommand = `${command} --json`;
        }

        const output = await this.run(finalCommand);
        
        try {
            const result = JSON.parse(output);
            this.logger.debug(' JSON parsing successful', { 
                command: finalCommand.substring(0, 50) + '...',
                hasResult: !!result
            });
            return result;
        } catch (parseError) {
            this.logger.error(' JSON parse failed', {
                command: finalCommand.substring(0, 50) + '...',
                parseError: parseError.message,
                rawOutput: output.substring(0, 200) + '...'
            });
            throw new Error(`Failed to parse SF output as JSON: ${parseError.message}`);
        }
    }

    /**
     * Build command with parameters
     */
    buildCommand(baseCommand, params = {}) {
        let command = baseCommand;
        
        Object.entries(params).forEach(([key, value]) => {
            if (value !== null && value !== undefined) {
                if (typeof value === 'boolean') {
                    if (value) command += ` --${key}`;
                } else {
                    command += ` --${key} ${value}`;
                }
            }
        });

        return command;
    }

    /**
     * Get current CLI path
     */
    getCliPath() {
        return this.sfdxPath;
    }

    /**
     * Check if runner is initialized
     */
    isReady() {
        return this.isInitialized && !!this.sfdxPath;
    }
}

// Singleton instance
let defaultRunner = null;

/**
 * Get default SFDX runner instance
 */
function getDefaultRunner() {
    if (!defaultRunner) {
        defaultRunner = new SFDXRunner();
    }
    return defaultRunner;
}

/**
 * Create new SFDX runner instance
 */
function createRunner(options = {}) {
    return new SFDXRunner(options);
}

module.exports = {
    SFDXRunner,
    SFDXError,
    getDefaultRunner,
    createRunner
};

Dir: apps\data-comparison\components\modules\validationHandler
Content:

Dir: apps\data-comparison\storage\config
Content:

Dir: apps\data-comparison\storage\data-extract
Content:

Dir: apps\data-comparison\storage\output
Content:

Dir: apps\upcoming-app\components
Content:

Dir: apps\upcoming-app\routes
Content:

### File: index.js

// apps/upcoming-app/routes/index.js
const express = require("express");
const path = require("path");
const fs = require("fs");

const router = express.Router();

// Get the project root and app paths
const projectRoot = process.cwd();
const baseUIPath = path.join(projectRoot, "shared", "UI");
const appViewPath = path.join(projectRoot, "apps", "upcoming-app", "components", "appView");

console.log(' Upcoming App routes loading...');
console.log(' App view path:', appViewPath);
console.log(' App view exists:', fs.existsSync(appViewPath));

// ========================================
// MAIN APP ROUTES (Shell Integration)
// ========================================

// Main upcoming-app route - serve shell with app loaded
router.get("/", (req, res) => {
    const shellPath = path.join(baseUIPath, "appView", "index.html");
    
    console.log(' Serving shell for upcoming-app:', shellPath);
    console.log(' Shell exists:', fs.existsSync(shellPath));
    
    if (fs.existsSync(shellPath)) {
        // Read shell HTML and modify iframe src to load upcoming-app
        let shellHtml = fs.readFileSync(shellPath, 'utf8');
        shellHtml = shellHtml.replace(
            'src="/"', 
            'src="/app/upcoming-app"'
        );
        res.send(shellHtml);
    } else {
        res.status(404).send('Extension shell not found');
    }
});

// ========================================
// APP CONTENT ROUTES (For iframe loading)
// ========================================

// App content for iframe (the actual app main page)
router.get("/app", (req, res) => {
    const appHtmlPath = path.join(appViewPath, "index.html");
    
    console.log(' Looking for upcoming-app content:', appHtmlPath);
    console.log(' File exists:', fs.existsSync(appHtmlPath));
    
    if (fs.existsSync(appHtmlPath)) {
        console.log(' Serving upcoming-app content');
        res.sendFile(appHtmlPath);
    } else {
        console.log(' Upcoming-app content not found');
        res.status(404).send(`
            <h1> Upcoming App Not Found</h1>
            <p>Looking for: ${appHtmlPath}</p>
            <p><strong>Status:</strong> In Development</p>
            <p><a href="/"> Back to Home</a></p>
        `);
    }
});

// ========================================
// FEATURE ROUTES (Future Development)
// ========================================

// Placeholder routes for upcoming features
router.get("/features", (req, res) => {
    res.json({
        app: "upcoming-app",
        features: [
            {
                name: "Advanced CPQ Analytics",
                status: "planned",
                description: "Deep analytics for CPQ configurations"
            },
            {
                name: "Automated Testing",
                status: "planned", 
                description: "Automated testing of CPQ rules and workflows"
            },
            {
                name: "Performance Optimization",
                status: "planned",
                description: "Performance analysis and optimization tools"
            }
        ],
        timestamp: new Date().toISOString()
    });
});

router.get("/roadmap", (req, res) => {
    res.send(`
        <h1> Upcoming App Roadmap</h1>
        <p>Next-generation CPQ tool features in development</p>
        <ul>
            <li> Advanced CPQ Analytics</li>
            <li> Automated Testing Framework</li>
            <li> Performance Optimization Tools</li>
            <li> AI-Powered Configuration Suggestions</li>
        </ul>
        <p><strong>Status:</strong> In Active Development</p>
        <p><a href="/upcoming-app"> Back to Upcoming App</a></p>
    `);
});

// ========================================
// API ENDPOINTS
// ========================================

router.get("/api/status", (req, res) => {
    res.json({
        app: "upcoming-app",
        status: "development",
        version: "1.0.0-beta",
        features: {
            analytics: false,
            testing: false,
            optimization: false,
            aiSuggestions: false
        },
        estimatedRelease: "Q3 2025",
        timestamp: new Date().toISOString()
    });
});

router.get("/api/health", (req, res) => {
    res.json({
        app: "upcoming-app",
        status: "healthy",
        version: "1.0.0-beta",
        components: {
            appView: fs.existsSync(appViewPath),
            routes: true,
            api: true
        },
        development: true,
        timestamp: new Date().toISOString()
    });
});

// ========================================
// STATIC ASSETS
// ========================================

// Serve static assets for upcoming-app
router.use("/", express.static(appViewPath));

console.log(' Upcoming App routes configured:');
console.log('   /upcoming-app/  Shell + App');
console.log('   /upcoming-app/app  App content only');
console.log('   /upcoming-app/features  Feature list');
console.log('   /upcoming-app/roadmap  Development roadmap');
console.log('   /upcoming-app/api/*  API endpoints');

module.exports = router;

Dir: apps\upcoming-app\state
Content:

### File: index.js

// apps/upcoming-app/state/index.js
const path = require('path');
const fs = require('fs');

class UpcomingAppStateManager {
    constructor() {
        this.currentState = {
            app: 'upcoming-app',
            component: 'welcome',
            data: {
                features: [
                    { id: 'analytics', progress: 25, status: 'active' },
                    { id: 'testing', progress: 15, status: 'active' },
                    { id: 'performance', progress: 10, status: 'planned' },
                    { id: 'ai', progress: 5, status: 'planned' }
                ]
            },
            timestamp: new Date().toISOString()
        };
    }

    setState(component, data = {}) {
        this.currentState = {
            app: 'upcoming-app',
            component: component,
            data: { ...this.currentState.data, ...data },
            timestamp: new Date().toISOString()
        };
        
        console.log(`[UpcomingApp] State set to: ${component}`);
        return this.currentState;
    }

    getState() {
        return this.currentState;
    }

    getDisplayName() {
        const names = {
            'welcome': 'Upcoming App - Preview',
            'features': 'Upcoming App - Features',
            'roadmap': 'Upcoming App - Roadmap',
            'analytics': 'Upcoming App - Analytics Preview',
            'testing': 'Upcoming App - Testing Framework'
        };
        return names[this.currentState.component] || `Upcoming App - ${this.currentState.component}`;
    }

    getStatus() {
        return 'development';
    }

    async generateAppView(component, data = {}) {
        const projectRoot = process.cwd();
        const componentPath = path.join(projectRoot, 'apps', 'upcoming-app', 'components', component);
        
        console.log(`[UpcomingApp] Generating appView for: ${component}`);
        
        // Read component files
        const htmlPath = path.join(componentPath, 'index.html');
        const cssPath = path.join(componentPath, 'index.css');
        const jsPath = path.join(componentPath, 'index.js');
        
        let componentHtml = '';
        let componentCss = '';
        let componentJs = '';
        
        if (fs.existsSync(htmlPath)) {
            const fullHtml = fs.readFileSync(htmlPath, 'utf8');
            const bodyMatch = fullHtml.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
            componentHtml = bodyMatch ? bodyMatch[1] : fullHtml;
        } else {
            componentHtml = `<div class="component-placeholder">
                <h2>Upcoming App - ${component}</h2>
                <p>This feature is in development.</p>
            </div>`;
        }
        
        if (fs.existsSync(cssPath)) {
            componentCss = fs.readFileSync(cssPath, 'utf8');
        }
        
        if (fs.existsSync(jsPath)) {
            componentJs = fs.readFileSync(jsPath, 'utf8');
            componentJs = componentJs.replace(/document\.addEventListener\(['"]DOMContentLoaded['"],.*?\}\);?/gs, '');
        }
        
        return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upcoming App - ${component}</title>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        ${this.getShellThemeCSS()}
        ${componentCss}
    </style>
</head>
<body data-component="${component}" data-app="upcoming-app">
    <div class="app-container">
        ${componentHtml}
    </div>
    
    <script>
        ${this.getShellCommunicationJS()}
        ${componentJs}
        
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Upcoming App component ${component} initialized');
            setupShellCommunication('${component}');
            
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
            
            if (typeof init${component.charAt(0).toUpperCase() + component.slice(1)} === 'function') {
                init${component.charAt(0).toUpperCase() + component.slice(1)}();
            }
            
            if (window.parent !== window) {
                window.parent.postMessage({
                    type: 'APP_LOADED',
                    data: { 
                        appName: 'Upcoming App - ${component}',
                        component: '${component}',
                        version: '1.0.0-beta'
                    }
                }, '*');
            }
        });
    </script>
</body>
</html>`;
    }

    getShellThemeCSS() {
        return `
            :root {
                --app-bg-primary: #ffffff;
                --app-bg-secondary: #f8fafc;
                --app-bg-tertiary: #f1f5f9;
                --app-text-primary: #1e293b;
                --app-text-secondary: #64748b;
                --app-text-tertiary: #94a3b8;
                --app-border: #e2e8f0;
                --app-border-hover: #cbd5e1;
                --app-accent: #3b82f6;
                --app-accent-hover: #2563eb;
                --app-success: #10b981;
                --app-warning: #f59e0b;
                --app-error: #ef4444;
                --app-transition: all 0.3s ease;
                --app-border-radius: 8px;
                --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
            }

            [data-theme="dark"] {
                --app-bg-primary: #0f172a;
                --app-bg-secondary: #1e293b;
                --app-bg-tertiary: #334155;
                --app-text-primary: #f8fafc;
                --app-text-secondary: #cbd5e1;
                --app-text-tertiary: #94a3b8;
                --app-border: #334155;
                --app-border-hover: #475569;
                --app-accent: #60a5fa;
                --app-accent-hover: #3b82f6;
                --app-success: #34d399;
                --app-warning: #fbbf24;
                --app-error: #f87171;
                --app-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
                --app-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.4);
            }

            * { margin: 0; padding: 0; box-sizing: border-box; }

            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
                background: var(--app-bg-primary);
                color: var(--app-text-primary);
                line-height: 1.6;
                transition: var(--app-transition);
            }

            .app-container {
                min-height: 100vh;
                background: var(--app-bg-primary);
                transition: var(--app-transition);
            }

            .feature-card, .action-card, .timeline-item {
                background: var(--app-bg-secondary) !important;
                border-color: var(--app-border) !important;
                color: var(--app-text-primary) !important;
            }

            .action-button, button {
                background: var(--app-accent) !important;
                color: white !important;
                transition: var(--app-transition) !important;
            }

            .action-button:hover, button:hover {
                background: var(--app-accent-hover) !important;
            }
        `;
    }

    getShellCommunicationJS() {
        return `
            function setupShellCommunication(componentName) {
                window.addEventListener('message', (event) => {
                    if (event.origin !== window.location.origin && !event.origin.startsWith('blob:')) return;
                    
                    const { type, theme, variables } = event.data;
                    
                    if (type === 'THEME_DATA' || type === 'THEME_CHANGED') {
                        applyTheme(theme, variables);
                    }
                });
                
                if (window.parent !== window) {
                    window.parent.postMessage({ type: 'REQUEST_THEME' }, '*');
                }
                
                window.logToShell = function(level, message) {
                    if (window.parent !== window) {
                        window.parent.postMessage({
                            type: 'ADD_LOG',
                            data: {
                                app: 'Upcoming App',
                                level: level,
                                message: message,
                                location: componentName,
                                timestamp: new Date().toISOString()
                            }
                        }, '*');
                    }
                };
                
                window.changeState = function(newComponent, data = {}) {
                    fetch('/upcoming-app/api/state/set', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ component: newComponent, data: data })
                    }).then(response => response.json())
                      .then(result => {
                          if (result.success) {
                              logToShell('info', \`State changed to \${newComponent}\`);
                              if (window.parent !== window) {
                                  window.parent.postMessage({
                                      type: 'REQUEST_APPVIEW_GENERATION',
                                      data: { app: 'upcoming-app', state: newComponent }
                                  }, '*');
                              }
                          }
                      });
                };
            }
            
            function applyTheme(theme, variables) {
                document.body.setAttribute('data-theme', theme);
                
                if (variables) {
                    const root = document.documentElement;
                    Object.entries(variables).forEach(([key, value]) => {
                        if (value && value.trim()) {
                            root.style.setProperty(\`--app-\${key}\`, value.trim());
                        }
                    });
                }
                
                document.body.style.display = 'none';
                document.body.offsetHeight;
                document.body.style.display = '';
            }
        `;
    }
}

module.exports = new UpcomingAppStateManager();

// apps/upcoming-app/routes/index.js - Complete routes
const express = require("express");
const path = require("path");
const fs = require("fs");
const stateManager = require("../state");

const router = express.Router();
const projectRoot = process.cwd();

// Main routes
router.get("/", async (req, res) => {
    stateManager.setState('welcome');
    const shellPath = path.join(projectRoot, "shared", "UI", "appView", "index.html");
    let shellHtml = fs.readFileSync(shellPath, 'utf8');
    shellHtml = shellHtml.replace('src="/"', 'src="/app/upcoming-app-welcome-ui"');
    res.send(shellHtml);
});

router.get("/features", async (req, res) => {
    stateManager.setState('features');
    const shellPath = path.join(projectRoot, "shared", "UI", "appView", "index.html");
    let shellHtml = fs.readFileSync(shellPath, 'utf8');
    shellHtml = shellHtml.replace('src="/"', 'src="/app/upcoming-app-features-ui"');
    res.send(shellHtml);
});

router.get("/roadmap", async (req, res) => {
    stateManager.setState('roadmap');
    const shellPath = path.join(projectRoot, "shared", "UI", "appView", "index.html");
    let shellHtml = fs.readFileSync(shellPath, 'utf8');
    shellHtml = shellHtml.replace('src="/"', 'src="/app/upcoming-app-roadmap-ui"');
    res.send(shellHtml);
});

// Dynamic appView generation
router.get("/app/:appStateUi", async (req, res) => {
    const { appStateUi } = req.params;
    const parts = appStateUi.split('-');
    
    if (parts.length !== 3 || parts[2] !== 'ui') {
        return res.status(404).send('Invalid format');
    }
    
    const [app, component] = parts;
    
    if (app !== 'upcoming') {
        return res.status(404).send('Invalid app');
    }
    
    try {
        const appViewHtml = await stateManager.generateAppView(component);
        res.setHeader('Content-Type', 'text/html');
        res.send(appViewHtml);
    } catch (error) {
        res.status(500).send(`Error: ${error.message}`);
    }
});

// State API
router.get("/api/state", (req, res) => {
    res.json({
        success: true,
        state: stateManager.getState(),
        displayName: stateManager.getDisplayName(),
        status: stateManager.getStatus()
    });
});

router.post("/api/state/set", (req, res) => {
    const { component, data } = req.body;
    const newState = stateManager.setState(component, data);
    res.json({ success: true, state: newState });
});

router.get("/health", (req, res) => {
    res.json({
        app: "upcoming-app", 
        status: "development",
        currentState: stateManager.getState(),
        timestamp: new Date().toISOString()
    });
});

module.exports = router;

Dir: apps\upcoming-app\storage
Content:

Dir: apps\upcoming-app\components\applogger
Content:

Dir: apps\upcoming-app\components\appView
Content:

### File: index.css

/* ========================================
   UPCOMING APP THEME INHERITANCE
   ======================================== */
:root {
    /* Inherit theme from shell */
    --app-bg-primary: var(--ext-bg-primary, #ffffff);
    --app-bg-secondary: var(--ext-bg-secondary, #f8fafc);
    --app-bg-tertiary: var(--ext-bg-tertiary, #f1f5f9);
    --app-text-primary: var(--ext-text-primary, #1e293b);
    --app-text-secondary: var(--ext-text-secondary, #64748b);
    --app-text-tertiary: var(--ext-text-tertiary, #94a3b8);
    --app-border: var(--ext-border, #e2e8f0);
    --app-border-hover: var(--ext-border-hover, #cbd5e1);
    --app-accent: var(--ext-accent, #3b82f6);
    --app-accent-hover: var(--ext-accent-hover, #2563eb);
    --app-success: var(--ext-success, #10b981);
    --app-warning: var(--ext-warning, #f59e0b);
    --app-error: var(--ext-error, #ef4444);
    --app-transition: var(--ext-transition, all 0.3s ease);
    --app-border-radius: var(--ext-border-radius, 8px);
    --app-shadow: var(--ext-shadow, 0 2px 8px rgba(0, 0, 0, 0.1));
    --app-shadow-lg: var(--ext-shadow-lg, 0 8px 25px rgba(0, 0, 0, 0.15));
    
    /* App-specific variables */
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    --spacing-2xl: 3rem;
    
    /* Feature-specific colors */
    --analytics-color: #8b5cf6;
    --testing-color: #06b6d4;
    --performance-color: #10b981;
    --ai-color: #f59e0b;
}

[data-theme="dark"] {
    --app-bg-primary: #0f172a;
    --app-bg-secondary: #1e293b;
    --app-bg-tertiary: #334155;
    --app-text-primary: #f8fafc;
    --app-text-secondary: #cbd5e1;
    --app-text-tertiary: #94a3b8;
    --app-border: #334155;
    --app-border-hover: #475569;
    --app-accent: #60a5fa;
    --app-accent-hover: #3b82f6;
    --app-success: #34d399;
    --app-warning: #fbbf24;
    --app-error: #f87171;
}

/* ========================================
   BASE STYLES
   ======================================== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    background: var(--app-bg-primary);
    color: var(--app-text-primary);
    line-height: 1.6;
    transition: var(--app-transition);
    margin: 0;
    padding: 0;
}

.app-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    padding: 0;
    margin: 0;
    background: var(--app-bg-primary);
}

.app-main {
    flex: 1;
    padding: var(--spacing-2xl) var(--spacing-xl);
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
}

/* ========================================
   UPCOMING SECTION
   ======================================== */
.upcoming-section {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2xl);
}

.upcoming-header {
    text-align: center;
    padding: var(--spacing-2xl) 0;
}

.upcoming-icon {
    width: 80px;
    height: 80px;
    background: linear-gradient(135deg, var(--app-accent), var(--app-accent-hover));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto var(--spacing-lg);
    color: white;
    box-shadow: var(--app-shadow-lg);
    animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.upcoming-icon .icon {
    width: 36px;
    height: 36px;
}

.upcoming-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-md);
}

.upcoming-description {
    font-size: 1.25rem;
    color: var(--app-text-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.7;
}

/* ========================================
   FEATURES SECTION
   ======================================== */
.features-title, .timeline-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-xl);
    text-align: center;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-xl);
    margin-bottom: var(--spacing-2xl);
}

.feature-card {
    background: var(--app-bg-secondary);
    border: 2px solid var(--app-border);
    border-radius: calc(var(--app-border-radius) * 1.5);
    padding: var(--spacing-xl);
    transition: var(--app-transition);
    position: relative;
    overflow: hidden;
}

.feature-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--app-shadow-lg);
    border-color: var(--app-border-hover);
}

.feature-icon {
    width: 56px;
    height: 56px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--spacing-lg);
    color: white;
}

.analytics-icon {
    background: linear-gradient(135deg, var(--analytics-color), #7c3aed);
}

.testing-icon {
    background: linear-gradient(135deg, var(--testing-color), #0891b2);
}

.performance-icon {
    background: linear-gradient(135deg, var(--performance-color), #059669);
}

.ai-icon {
    background: linear-gradient(135deg, var(--ai-color), #d97706);
}

.feature-icon .icon {
    width: 24px;
    height: 24px;
}

.feature-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.feature-description {
    color: var(--app-text-secondary);
    line-height: 1.6;
    margin-bottom: var(--spacing-lg);
}

.feature-progress {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
}

.progress-bar {
    flex: 1;
    height: 6px;
    background: var(--app-bg-tertiary);
    border-radius: 3px;
    overflow: hidden;
    border: 1px solid var(--app-border);
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--app-accent), var(--app-accent-hover));
    border-radius: 3px;
    transition: width 0.8s ease;
}

.progress-text {
    font-size: 0.875rem;
    color: var(--app-text-tertiary);
    font-weight: 500;
    min-width: 80px;
}

/* ========================================
   TIMELINE SECTION
   ======================================== */
.timeline-container {
    margin: var(--spacing-2xl) 0;
}

.timeline {
    position: relative;
    padding-left: var(--spacing-xl);
}

.timeline::before {
    content: '';
    position: absolute;
    left: 20px;
    top: 0;
    bottom: 0;
    width: 2px;
    background: var(--app-border);
}

.timeline-item {
    position: relative;
    margin-bottom: var(--spacing-xl);
    padding-left: var(--spacing-xl);
}

.timeline-marker {
    position: absolute;
    left: -28px;
    top: 8px;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    border: 3px solid var(--app-border);
    background: var(--app-bg-primary);
    transition: var(--app-transition);
}

.timeline-item.completed .timeline-marker {
    background: var(--app-success);
    border-color: var(--app-success);
}

.timeline-item.active .timeline-marker {
    background: var(--app-accent);
    border-color: var(--app-accent);
    animation: pulse-marker 2s ease-in-out infinite;
}

@keyframes pulse-marker {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
}

.timeline-phase {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-xs);
}

.timeline-description {
    color: var(--app-text-secondary);
    margin-bottom: var(--spacing-sm);
}

.timeline-status {
    font-size: 0.875rem;
    font-weight: 500;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    display: inline-block;
}

.timeline-item.completed .timeline-status {
    background: rgba(16, 185, 129, 0.1);
    color: var(--app-success);
}

.timeline-item.active .timeline-status {
    background: rgba(59, 130, 246, 0.1);
    color: var(--app-accent);
}

.timeline-item:not(.completed):not(.active) .timeline-status {
    background: var(--app-bg-tertiary);
    color: var(--app-text-tertiary);
}

/* ========================================
   ACTIONS SECTION
   ======================================== */
.actions-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--spacing-xl);
    margin-top: var(--spacing-2xl);
}

.action-card {
    background: var(--app-bg-secondary);
    border: 2px solid var(--app-border);
    border-radius: calc(var(--app-border-radius) * 1.5);
    padding: var(--spacing-xl);
    text-align: center;
    transition: var(--app-transition);
}

.action-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--app-shadow-lg);
    border-color: var(--app-border-hover);
}

.action-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--app-text-primary);
    margin-bottom: var(--spacing-sm);
}

.action-description {
    color: var(--app-text-secondary);
    margin-bottom: var(--spacing-lg);
    line-height: 1.6;
}

.action-button {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-md) var(--spacing-lg);
    border: none;
    border-radius: var(--app-border-radius);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: var(--app-transition);
    text-decoration: none;
}

.action-button.primary {
    background: linear-gradient(135deg, var(--app-accent), var(--app-accent-hover));
    color: white;
}

.action-button.secondary {
    background: var(--app-bg-tertiary);
    color: var(--app-text-primary);
    border: 1px solid var(--app-border);
}

.action-button:hover {
    transform: translateY(-2px);
    box-shadow: var(--app-shadow);
}

.action-button.primary:hover {
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.3);
}

.button-icon {
    width: 18px;
    height: 18px;
}

/* ========================================
   RESPONSIVE
   ======================================== */
@media (max-width: 768px) {
    .app-main {
        padding: var(--spacing-xl) var(--spacing-md);
    }
    
    .upcoming-title {
        font-size: 2rem;
    }
    
    .upcoming-description {
        font-size: 1rem;
    }
    
    .features-grid {
        grid-template-columns: 1fr;
        gap: var(--spacing-lg);
    }
    
    .timeline {
        padding-left: var(--spacing-lg);
    }
    
    .timeline-item {
        padding-left: var(--spacing-md);
    }
    
    .actions-container {
        grid-template-columns: 1fr;
        gap: var(--spacing-lg);
    }
}

@media (max-width: 480px) {
    .upcoming-icon {
        width: 64px;
        height: 64px;
    }
    
    .upcoming-icon .icon {
        width: 28px;
        height: 28px;
    }
    
    .feature-icon {
        width: 48px;
        height: 48px;
    }
    
    .feature-icon .icon {
        width: 20px;
        height: 20px;
    }
}

### File: index.html

<!-- apps/upcoming-app/components/appView/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upcoming App</title>
    <link rel="stylesheet" href="/upcoming-app/appView/index.css">
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
    <!-- Same loader structure as data-comparison -->
    <div id="app-loader" class="app-loader">
        <div class="loader-content">
            <div class="loader-spinner"></div>
            <div class="loader-text">Loading component...</div>
            <div class="loader-progress">
                <div class="progress-bar">
                    <div id="loader-progress-fill" class="progress-fill"></div>
                </div>
                <div class="progress-text">0%</div>
            </div>
        </div>
    </div>

    <div id="component-container" class="component-container">
        <!-- Components load here -->
    </div>

    <div id="error-container" class="error-container hidden">
        <div class="error-content">
            <div class="error-icon">
                <i data-lucide="x-circle"></i>
            </div>
            <h3 class="error-title">Component Load Failed</h3>
            <p class="error-message" id="error-message">Failed to load component.</p>
            <button id="retry-button" class="retry-button">
                <i data-lucide="refresh-cw"></i>
                Retry
            </button>
        </div>
    </div>

    <script>
        // Reuse DataComparisonAppView with app-specific changes
        class UpcomingAppView extends DataComparisonAppView {
            constructor() {
                super();
                this.appName = 'Upcoming App';
                this.basePath = '/upcoming-app';
            }
            
            async loadComponent(componentName, stateData = {}) {
                try {
                    this.showLoader(`Loading ${componentName}...`);
                    this.hideError();
                    
                    this.updateLoaderProgress(25, 'Fetching component...');
                    
                    const response = await fetch(`${this.basePath}/components/${componentName}/index.html`);
                    if (!response.ok) {
                        throw new Error(`Component ${componentName} not found`);
                    }
                    
                    const componentHtml = await response.text();
                    this.updateLoaderProgress(50, 'Component fetched...');
                    
                    this.elements.componentContainer.innerHTML = componentHtml;
                    this.updateLoaderProgress(75, 'Rendering...');
                    
                    await this.loadComponentAssets(componentName);
                    this.updateLoaderProgress(100, 'Ready!');
                    
                    setTimeout(() => {
                        this.elements.componentContainer.classList.add('loaded');
                        this.hideLoader();
                        this.currentComponent = componentName;
                        this.initializeLucideIcons();
                        this.sendLogToShell('info', `${this.appName} component ${componentName} loaded`);
                    }, 300);
                    
                } catch (error) {
                    this.showError(error.message);
                    this.sendLogToShell('error', `Failed to load ${componentName}: ${error.message}`);
                }
            }
            
            async loadComponentAssets(componentName) {
                const promises = [
                    this.loadCSS(`${this.basePath}/components/${componentName}/index.css`),
                    this.loadJS(`${this.basePath}/components/${componentName}/index.js`)
                ];
                await Promise.allSettled(promises);
            }
            
            notifyStateChange(component, data) {
                fetch(`${this.basePath}/api/state`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ component, data })
                }).then(response => response.json())
                  .then(result => {
                      if (result.success) {
                          this.sendLogToShell('info', `${this.appName} state changed to ${component}`);
                      }
                  })
                  .catch(err => {
                      this.sendLogToShell('error', `State change failed: ${err.message}`);
                  });
            }
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            window.upcomingAppView = new UpcomingAppView();
        });
    </script>
    <script src="/data-comparison/appView/index.js"></script>
    <script src="/upcoming-app/appView/index.js"></script>
</body>
</html>

### File: index.js

// apps/upcoming-app/state/index.js - Upcoming App State Manager
class UpcomingAppState {
    constructor() {
        this.currentComponent = 'welcome';
        this.appData = {
            features: [
                { id: 'analytics', progress: 25, status: 'active' },
                { id: 'testing', progress: 15, status: 'active' },
                { id: 'performance', progress: 10, status: 'planned' },
                { id: 'ai', progress: 5, status: 'planned' }
            ],
            developmentPhase: 'core-development'
        };
        this.listeners = [];
    }

    setState(component, data = {}) {
        const previousComponent = this.currentComponent;
        this.currentComponent = component;
        this.appData = { ...this.appData, ...data };
        
        this.notifyShell(component, data);
        
        this.listeners.forEach(listener => {
            listener({
                component,
                data,
                previousComponent,
                appData: this.appData
            });
        });
        
        console.log(`[UpcomingApp] State: ${previousComponent}  ${component}`);
    }

    notifyShell(component, data) {
        fetch('/api/shell/update-iframe', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app: 'upcoming-app',
                component: component,
                data: data,
                timestamp: new Date().toISOString()
            })
        }).catch(err => console.error('Failed to notify shell:', err));
    }

    getCurrentState() {
        return {
            component: this.currentComponent,
            data: this.appData,
            displayName: this.getDisplayName(),
            status: this.getStatus()
        };
    }

    getDisplayName() {
        const names = {
            'welcome': 'Upcoming App - Preview',
            'features': 'Upcoming App - Features',
            'roadmap': 'Upcoming App - Roadmap',
            'analytics': 'Upcoming App - Analytics Preview',
            'testing': 'Upcoming App - Testing Framework'
        };
        return names[this.currentComponent] || 'Upcoming App';
    }

    getStatus() {
        return 'development'; // Always in development
    }

    // State transitions
    goToWelcome() {
        this.setState('welcome');
    }

    goToFeatures() {
        this.setState('features');
    }

    goToRoadmap() {
        this.setState('roadmap');
    }

    goToAnalytics() {
        this.setState('analytics');
    }

    goToTesting() {
        this.setState('testing');
    }

    updateFeatureProgress(featureId, progress) {
        const features = [...this.appData.features];
        const feature = features.find(f => f.id === featureId);
        if (feature) {
            feature.progress = progress;
            this.setState(this.currentComponent, { features });
        }
    }

    subscribe(listener) {
        this.listeners.push(listener);
        return () => {
            const index = this.listeners.indexOf(listener);
            if (index > -1) this.listeners.splice(index, 1);
        };
    }
}

const upcomingAppState = new UpcomingAppState();
module.exports = upcomingAppState;

// apps/upcoming-app/routes/index.js - UPDATED with state integration
const express = require("express");
const path = require("path");
const fs = require("fs");
const upcomingAppState = require("../state");

const router = express.Router();
const projectRoot = process.cwd();
const appViewPath = path.join(projectRoot, "apps", "upcoming-app", "components", "appView");

// ========================================
// STATE MANAGEMENT ROUTES
// ========================================

router.get("/api/state", (req, res) => {
    const state = upcomingAppState.getCurrentState();
    res.json({
        success: true,
        state: state,
        timestamp: new Date().toISOString()
    });
});

router.post("/api/state", (req, res) => {
    const { component, data } = req.body;
    
    try {
        upcomingAppState.setState(component, data);
        res.json({
            success: true,
            state: upcomingAppState.getCurrentState(),
            message: `State updated to ${component}`
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Specific transitions
router.post("/api/state/welcome", (req, res) => {
    upcomingAppState.goToWelcome();
    res.json({ success: true, state: upcomingAppState.getCurrentState() });
});

router.post("/api/state/features", (req, res) => {
    upcomingAppState.goToFeatures();
    res.json({ success: true, state: upcomingAppState.getCurrentState() });
});

router.post("/api/state/roadmap", (req, res) => {
    upcomingAppState.goToRoadmap();
    res.json({ success: true, state: upcomingAppState.getCurrentState() });
});

// ========================================
// DYNAMIC APPVIEW ROUTES
// ========================================

router.get("/", (req, res) => {
    const shellPath = path.join(projectRoot, "shared", "UI", "appView", "index.html");
    
    if (fs.existsSync(shellPath)) {
        let shellHtml = fs.readFileSync(shellPath, 'utf8');
        
        const currentState = upcomingAppState.getCurrentState();
        const iframeSrc = `/app/upcoming-app?component=${currentState.component}`;
        
        shellHtml = shellHtml.replace(
            'src="/"', 
            `src="${iframeSrc}"`
        );
        
        console.log(` Serving upcoming-app shell with iframe: ${iframeSrc}`);
        res.send(shellHtml);
    } else {
        res.status(404).send('Extension shell not found');
    }
});

router.get("/app", (req, res) => {
    const component = req.query.component || 'welcome';
    const appViewPath = path.join(projectRoot, "apps", "upcoming-app", "components", "appView", "index.html");
    
    if (fs.existsSync(appViewPath)) {
        let appViewHtml = fs.readFileSync(appViewPath, 'utf8');
        
        const currentState = upcomingAppState.getCurrentState();
        const stateScript = `
            <script>
                window.APP_STATE = ${JSON.stringify(currentState)};
                window.INITIAL_COMPONENT = '${component}';
            </script>
        `;
        
        appViewHtml = appViewHtml.replace('</head>', `${stateScript}</head>`);
        
        console.log(` Serving upcoming-app appView for: ${component}`);
        res.send(appViewHtml);
    } else {
        res.status(404).send(`AppView not found for component: ${component}`);
    }
});

router.get("/health", (req, res) => {
    const currentState = upcomingAppState.getCurrentState();
    res.json({
        app: "upcoming-app",
        status: "development",
        currentState: currentState,
        timestamp: new Date().toISOString(),
        version: "1.0.0-beta"
    });
});

module.exports = router;

Dir: apps\upcoming-app\components\modules
Content:

Dir: apps\upcoming-app\components\welcome
Content:

Dir: apps\upcoming-app\storage\config
Content:

Dir: apps\upcoming-app\storage\data-extract
Content:

Dir: apps\upcoming-app\storage\output
Content:

Dir: shared\modules
Content:

Dir: shared\routes
Content:

### File: index.js

// shared/routes/index.js - Simplified routing without complex shell coordination
const express = require("express");
const path = require("path");
const fs = require("fs");
const router = express.Router();

const projectRoot = process.cwd();
const baseUIPath = path.join(projectRoot, "shared", "UI");

console.log(' Shared routes initializing...');
console.log(' Project root:', projectRoot);
console.log(' Base UI path:', baseUIPath);

// ========================================
// STATIC ASSETS FOR SHELL
// ========================================

// Serve shell assets (CSS, JS for extension shell)
router.use("/shared/appView", express.static(path.join(baseUIPath, "appView")));

// Serve welcome page static assets
router.use("/shared/welcomePage", express.static(path.join(baseUIPath, "welcomePage")));

console.log(' Static assets configured:');
console.log('  /shared/appView -> Shell assets');
console.log('  /shared/welcomePage -> Welcome page assets');

// ========================================
// WELCOME PAGE ROUTES (Standalone - No Shell)
// ========================================

router.get(["/", "/home"], (req, res) => {
    const welcomePagePath = path.join(baseUIPath, "welcomePage", "index.html");
    
    console.log(` Serving welcome page: ${welcomePagePath}`);
    
    if (fs.existsSync(welcomePagePath)) {
        res.sendFile(welcomePagePath);
    } else {
        console.error(' Welcome page not found:', welcomePagePath);
        res.status(404).send(`
            <html>
                <body style="font-family: system-ui; padding: 2rem; text-align: center;">
                    <h1>Welcome Page Not Found</h1>
                    <p>Expected location: ${welcomePagePath}</p>
                    <p><a href="/health">Check System Health</a></p>
                </body>
            </html>
        `);
    }
});

// ========================================
// APP ROUTES (Delegate to app-specific routes)
// ========================================

// Data Comparison App Routes
router.use("/data-comparison", (req, res, next) => {
    console.log(` Delegating to data-comparison: ${req.method} ${req.path}`);
    next();
}, require("../../apps/data-comparison/routes"));

// Upcoming App Routes  
router.use("/upcoming-app", (req, res, next) => {
    console.log(` Delegating to upcoming-app: ${req.method} ${req.path}`);
    next();
}, require("../../apps/upcoming-app/routes"));

// ========================================
// API ENDPOINTS
// ========================================

// Get available apps
// Add this route to match what the welcome page expects
router.get("/utils/get-apps", (req, res) => {
    console.log(' Legacy API: Getting available apps (utils endpoint)');
    
    const apps = [];
    const appsDir = path.join(projectRoot, "apps");
    
    if (fs.existsSync(appsDir)) {
        const appDirs = fs.readdirSync(appsDir, { withFileTypes: true })
            .filter(dirent => dirent.isDirectory())
            .map(dirent => dirent.name);
        
        for (const appName of appDirs) {
            apps.push({
                name: appName,
                title: appName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
                description: `${appName.replace(/-/g, ' ')} application for Salesforce CPQ`,
                path: `/${appName}`,
                version: "2.0.0",
                status: "ready"
            });
        }
    }
    
    res.json(apps); // Return just the array for compatibility
});
// System health check
router.get("/health", (req, res) => {
    console.log(' Health check requested');
    
    const health = {
        status: "healthy",
        timestamp: new Date().toISOString(),
        version: "2.0.0",
        components: {
            sharedUI: fs.existsSync(baseUIPath),
            welcomePage: fs.existsSync(path.join(baseUIPath, "welcomePage", "index.html")),
            shellAssets: fs.existsSync(path.join(baseUIPath, "appView", "index.html")),
            apps: {}
        }
    };
    
    // Check app health
    const appsDir = path.join(projectRoot, "apps");
    if (fs.existsSync(appsDir)) {
        const appDirs = fs.readdirSync(appsDir, { withFileTypes: true })
            .filter(dirent => dirent.isDirectory())
            .map(dirent => dirent.name);
        
        for (const appName of appDirs) {
            health.components.apps[appName] = {
                exists: true,
                routes: fs.existsSync(path.join(appsDir, appName, "routes", "index.js")),
                state: fs.existsSync(path.join(appsDir, appName, "state", "index.js"))
            };
        }
    }
    
    console.log(' Health check complete:', health.status);
    res.json(health);
});

// Debug info endpoint
router.get("/debug", (req, res) => {
    console.log(' Debug info requested');
    
    const debugInfo = {
        projectRoot: projectRoot,
        baseUIPath: baseUIPath,
        timestamp: new Date().toISOString(),
        environment: {
            nodeVersion: process.version,
            platform: process.platform,
            cwd: process.cwd()
        },
        directories: {
            shared: fs.existsSync(path.join(projectRoot, "shared")),
            apps: fs.existsSync(path.join(projectRoot, "apps")),
            sharedUI: fs.existsSync(baseUIPath)
        }
    };
    
    res.json(debugInfo);
});

// ========================================
// ERROR HANDLING
// ========================================

// 404 handler for unmatched routes
router.use((req, res) => {
    console.log(` 404 - Route not found: ${req.method} ${req.path}`);
    
    res.status(404).json({
        error: "Route not found",
        method: req.method,
        path: req.path,
        timestamp: new Date().toISOString(),
        availableRoutes: [
            "/",
            "/home", 
            "/data-comparison",
            "/upcoming-app",
            "/utils/get-apps",
            "/health",
            "/debug"
        ]
    });
});

console.log(' Shared routes configured successfully');
console.log(' Available routes:');
console.log('  GET  / -> Welcome page');
console.log('  GET  /home -> Welcome page');
console.log('  USE  /data-comparison/* -> Data comparison app');
console.log('  USE  /upcoming-app/* -> Upcoming app');
console.log('  GET  /utils/get-apps -> Available apps');
console.log('  GET  /health -> System health');
console.log('  GET  /debug -> Debug information');

module.exports = router;

Dir: shared\UI
Content:

Dir: shared\utils
Content:

### File: utilties.js

const path = require('path');
const fs = require('fs');

// Simple logger fallback if Logger directory doesn't exist yet
let logger;
try {
    const { createLogger } = require('./Logger');
    logger = createLogger({
        logLevel: 'debug',
        appName: 'Extension : Utilities',
        location: 'utilities.js'
    });
} catch (error) {
    // Fallback logger
    logger = {
        info: (msg, data) => console.log(`[INFO] [Extension : Utilities] ${msg}`, data || ''),
        warn: (msg, data) => console.warn(`[WARN] [Extension : Utilities] ${msg}`, data || ''),
        error: (msg, data) => console.error(`[ERROR] [Extension : Utilities] ${msg}`, data || '')
    };
}

function getApps() {
    const appsDir = path.join(__dirname, '../../apps');
    const discoveredApps = [];
    
    if (fs.existsSync(appsDir)) {
        const appDirs = fs.readdirSync(appsDir, { withFileTypes: true })
            .filter(dirent => dirent.isDirectory())
            .map(dirent => dirent.name);
            
        for (const appName of appDirs) {
            const appIndexPath = path.join(appsDir, appName, 'index.js');
            if (fs.existsSync(appIndexPath)) {
                try {
                    const appConfig = require(appIndexPath);
                    discoveredApps.push({
                        name: appName,
                        title: appConfig.title || appName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
                        description: appConfig.description || `${appName} application`,
                        path: `/${appName}`,
                        version: appConfig.version || '1.0.0'
                    });
                    logger.info('App discovered', { appName, title: appConfig.title });
                } catch (error) {
                    logger.warn('Error loading app config', { appName, error: error.message });
                }
            } else {
                // Add apps without index.js (like your current setup)
                discoveredApps.push({
                    name: appName,
                    title: appName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
                    description: `${appName} application`,
                    path: `/${appName}`,
                    version: '1.0.0'
                });
                logger.info('App discovered (no config)', { appName });
            }
        }
    } else {
        logger.warn('Apps directory not found', { appsDir });
    }
    
    return discoveredApps;
}

module.exports = { 
    getApps 
};

Dir: shared\modules\node
Content:

### File: dependencies.txt

express
open

Dir: shared\modules\python
Content:

Dir: shared\UI\appView
Content:

### File: index.css

/* ========================================
   EXTENSION LEVEL THEME SYSTEM
   ======================================== */
:root {
    /* Base Properties */
    --ext-transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --ext-border-radius: 8px;
    --ext-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --ext-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
    
    /* Light Theme (Default) */
    --ext-bg-primary: #ffffff;
    --ext-bg-secondary: #f8fafc;
    --ext-bg-tertiary: #f1f5f9;
    --ext-text-primary: #1e293b;
    --ext-text-secondary: #64748b;
    --ext-text-tertiary: #94a3b8;
    --ext-border: #e2e8f0;
    --ext-border-hover: #cbd5e1;
    --ext-accent: #3b82f6;
    --ext-accent-hover: #2563eb;
    --ext-success: #10b981;
    --ext-warning: #f59e0b;
    --ext-error: #ef4444;
    
    /* Component Heights */
    --ext-header-height: 56px;
    --ext-footer-height: 40px;
    --ext-log-panel-height: 0px;
    --ext-log-panel-max-height: 200px;
    
    /* App Shared Variables - Apps can inherit these */
    --app-bg-primary: var(--ext-bg-primary);
    --app-bg-secondary: var(--ext-bg-secondary);
    --app-bg-tertiary: var(--ext-bg-tertiary);
    --app-text-primary: var(--ext-text-primary);
    --app-text-secondary: var(--ext-text-secondary);
    --app-text-tertiary: var(--ext-text-tertiary);
    --app-border: var(--ext-border);
    --app-border-hover: var(--ext-border-hover);
    --app-accent: var(--ext-accent);
    --app-accent-hover: var(--ext-accent-hover);
    --app-success: var(--ext-success);
    --app-warning: var(--ext-warning);
    --app-error: var(--ext-error);
    --app-transition: var(--ext-transition);
    --app-border-radius: var(--ext-border-radius);
    --app-shadow: var(--ext-shadow);
    --app-shadow-lg: var(--ext-shadow-lg);
}

[data-theme="dark"] {
    /* Dark Theme Colors */
    --ext-bg-primary: #0f172a;
    --ext-bg-secondary: #1e293b;
    --ext-bg-tertiary: #334155;
    --ext-text-primary: #f8fafc;
    --ext-text-secondary: #cbd5e1;
    --ext-text-tertiary: #94a3b8;
    --ext-border: #334155;
    --ext-border-hover: #475569;
    --ext-accent: #60a5fa;
    --ext-accent-hover: #3b82f6;
    --ext-success: #34d399;
    --ext-warning: #fbbf24;
    --ext-error: #f87171;
    --ext-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    --ext-shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.4);
    
    /* Update App Variables for Dark Theme */
    --app-bg-primary: var(--ext-bg-primary);
    --app-bg-secondary: var(--ext-bg-secondary);
    --app-bg-tertiary: var(--ext-bg-tertiary);
    --app-text-primary: var(--ext-text-primary);
    --app-text-secondary: var(--ext-text-secondary);
    --app-text-tertiary: var(--ext-text-tertiary);
    --app-border: var(--ext-border);
    --app-border-hover: var(--ext-border-hover);
    --app-accent: var(--ext-accent);
    --app-accent-hover: var(--ext-accent-hover);
    --app-success: var(--ext-success);
    --app-warning: var(--ext-warning);
    --app-error: var(--ext-error);
}

/* ========================================
   EXTENSION SHELL LAYOUT
   ======================================== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    background: var(--ext-bg-primary);
    color: var(--ext-text-primary);
    height: 100vh;
    display: flex;
    flex-direction: column;
    transition: var(--ext-transition);
    overflow: hidden;
}

/* ========================================
   HEADER - Extension Controls
   ======================================== */
.extension-header {
    height: var(--ext-header-height);
    background: var(--ext-bg-secondary);
    border-bottom: 1px solid var(--ext-border);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 1rem;
    position: relative;
    z-index: 100;
}

.header-left {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.active-app-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--ext-text-secondary);
}

.app-icon {
    width: 16px;
    height: 16px;
}

.active-app-label {
    color: var(--ext-text-tertiary);
}

.active-app-name {
    font-weight: 600;
    color: var(--ext-text-primary);
}

.app-state {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    background: var(--ext-bg-tertiary);
    border-radius: 6px;
    font-size: 0.75rem;
    border: 1px solid transparent;
    transition: var(--ext-transition);
}

.app-state .state-icon {
    width: 8px;
    height: 8px;
}

.app-state.idle {
    color: var(--ext-text-tertiary);
    border-color: var(--ext-border);
}

.app-state.loading {
    color: var(--ext-warning);
    border-color: var(--ext-warning);
    background: rgba(245, 158, 11, 0.1);
}

.app-state.success {
    color: var(--ext-success);
    border-color: var(--ext-success);
    background: rgba(16, 185, 129, 0.1);
}

.app-state.error {
    color: var(--ext-error);
    border-color: var(--ext-error);
    background: rgba(239, 68, 68, 0.1);
}

.header-right {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    background: none;
    border: 1px solid var(--ext-border);
    border-radius: var(--ext-border-radius);
    color: var(--ext-text-secondary);
    cursor: pointer;
    transition: var(--ext-transition);
}

.theme-toggle:hover {
    background: var(--ext-bg-tertiary);
    border-color: var(--ext-border-hover);
    color: var(--ext-text-primary);
}

.theme-toggle .theme-icon {
    width: 18px;
    height: 18px;
}

/* ========================================
   MAIN CONTENT AREA
   ======================================== */
.app-container {
    flex: 1;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.app-frame {
    width: 100%;
    height: 100%;
    border: none;
    background: var(--ext-bg-primary);
    flex: 1;
}

/* ========================================
   FOOTER - Logs & Loader
   ======================================== */
.extension-footer {
    background: var(--ext-bg-secondary);
    border-top: 1px solid var(--ext-border);
    position: relative;
    z-index: 100;
}

.footer-controls {
    height: var(--ext-footer-height);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 1rem;
}

.log-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    color: var(--ext-text-secondary);
    cursor: pointer;
    font-size: 0.875rem;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    transition: var(--ext-transition);
}

.log-toggle:hover {
    background: var(--ext-bg-tertiary);
    color: var(--ext-text-primary);
}

.log-toggle.active {
    color: var(--ext-accent);
    background: rgba(59, 130, 246, 0.1);
}

.log-toggle .log-icon,
.log-toggle .chevron-icon {
    width: 16px;
    height: 16px;
}

.log-toggle .chevron-icon {
    transition: transform 0.3s ease;
}

.log-toggle.active .chevron-icon {
    transform: rotate(180deg);
}

.loader-section {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    opacity: 0;
    visibility: hidden;
    transition: var(--ext-transition);
}

.loader-section.visible {
    opacity: 1;
    visibility: visible;
}

.loader-text {
    font-size: 0.875rem;
    color: var(--ext-text-secondary);
    white-space: nowrap;
}

.loader-bar {
    width: 120px;
    height: 3px;
    background: var(--ext-bg-tertiary);
    border-radius: 2px;
    overflow: hidden;
    border: 1px solid var(--ext-border);
}

.loader-progress {
    height: 100%;
    background: var(--ext-accent);
    border-radius: 2px;
    width: 0%;
    transition: width 0.3s ease;
    animation: pulse 1.5s ease-in-out infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

/* ========================================
   LOG PANEL
   ======================================== */
.log-panel {
    height: var(--ext-log-panel-height);
    max-height: var(--ext-log-panel-max-height);
    background: var(--ext-bg-primary);
    border-top: 1px solid var(--ext-border);
    overflow: hidden;
    transition: height 0.3s ease;
}

.log-panel.expanded {
    height: var(--ext-log-panel-max-height);
}

.log-content {
    height: 100%;
    display: flex;
    flex-direction: column;
}

.log-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem 0.5rem;
    border-bottom: 1px solid var(--ext-border);
}

.log-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--ext-text-primary);
}

.clear-logs-btn {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    background: none;
    border: none;
    color: var(--ext-text-tertiary);
    cursor: pointer;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    transition: var(--ext-transition);
}

.clear-logs-btn:hover {
    color: var(--ext-error);
    background: rgba(239, 68, 68, 0.1);
}

.clear-logs-btn i {
    width: 12px;
    height: 12px;
}

.log-entries {
    flex: 1;
    padding: 0.5rem 1rem;
    overflow-y: auto;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Consolas', monospace;
    font-size: 0.8125rem;
    line-height: 1.4;
}

.log-entry {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 0.25rem;
    padding: 0.25rem 0;
    align-items: baseline;
}

.log-timestamp {
    color: var(--ext-text-tertiary);
    font-weight: 500;
    min-width: 70px;
}

.log-level {
    font-weight: 600;
    min-width: 50px;
}

.log-app {
    color: var(--ext-accent);
    font-weight: 500;
    min-width: 80px;
}

.log-message {
    color: var(--ext-text-secondary);
    flex: 1;
}

.log-entry.info .log-level {
    color: var(--ext-accent);
}

.log-entry.success .log-level {
    color: var(--ext-success);
}

.log-entry.warning .log-level {
    color: var(--ext-warning);
}

.log-entry.error .log-level {
    color: var(--ext-error);
}

/* ========================================
   RESPONSIVE
   ======================================== */
@media (max-width: 768px) {
    .extension-header {
        padding: 0 0.75rem;
    }
    
    .header-left {
        gap: 0.75rem;
    }
    
    .active-app-info {
        font-size: 0.8125rem;
    }
    
    .footer-controls {
        padding: 0 0.75rem;
        gap: 0.5rem;
    }
    
    .loader-section {
        flex-direction: column;
        align-items: flex-end;
        gap: 0.375rem;
    }
    
    .loader-bar {
        width: 100px;
    }
}

### File: index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CPQ Toolset Extension</title>
    <link rel="stylesheet" href="/shared/appView/index.css">
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body data-theme="light">
    <!-- Extension Header -->
    <header class="extension-header">
        <div class="header-left">
            <div class="active-app-info">
                <i data-lucide="box" class="app-icon"></i>
                <span class="active-app-label">App:</span>
                <span id="active-app-name" class="active-app-name">Loading...</span>
            </div>
            <div id="app-state" class="app-state loading">
                <i data-lucide="loader" class="state-icon"></i>
                <span id="app-state-text">Loading...</span>
            </div>
        </div>
        <div class="header-right">
            <button id="theme-toggle" class="theme-toggle">
                <i data-lucide="sun" class="theme-icon"></i>
            </button>
        </div>
    </header>

    <!-- Main App Container -->
    <div class="app-container">
        <iframe id="app-frame" class="app-frame" src="/"></iframe>
    </div>

    <!-- Extension Footer -->
    <footer class="extension-footer">
        <div class="footer-controls">
            <button id="log-toggle" class="log-toggle">
                <i data-lucide="file-text" class="log-icon"></i>
                <span>Logs</span>
                <i data-lucide="chevron-up" class="chevron-icon"></i>
            </button>
            
            <div id="loader-section" class="loader-section">
                <span id="loader-text" class="loader-text">Loading...</span>
                <div class="loader-bar">
                    <div id="loader-progress" class="loader-progress"></div>
                </div>
            </div>
        </div>
        
        <!-- Log Panel -->
        <div id="log-panel" class="log-panel">
            <div class="log-content">
                <div class="log-header">
                    <h4 class="log-title">Extension Logs</h4>
                    <button id="clear-logs" class="clear-logs-btn">
                        <i data-lucide="trash-2"></i>
                        Clear
                    </button>
                </div>
                <div id="log-entries" class="log-entries">
                    <!-- Log entries will be added here -->
                </div>
            </div>
        </div>
    </footer>

    <script src="/shared/appView/index.js"></script>
</body>
</html>

### File: index.js

// shared/UI/appView/index.js - Extension Shell with State-Driven Dynamic UI
class ExtensionShell {
    constructor() {
        this.currentTheme = 'light';
        this.currentApp = 'Loading...';
        this.currentState = 'loading';
        this.logEntries = [];
        this.isLogPanelOpen = false;
        
        this.elements = {
            body: document.body,
            themeToggle: document.getElementById('theme-toggle'),
            themeIcon: document.querySelector('.theme-icon'),
            activeAppName: document.getElementById('active-app-name'),
            appState: document.getElementById('app-state'),
            appStateText: document.getElementById('app-state-text'),
            stateIcon: document.querySelector('.state-icon'),
            appFrame: document.getElementById('app-frame'),
            logToggle: document.getElementById('log-toggle'),
            logPanel: document.getElementById('log-panel'),
            logEntries: document.getElementById('log-entries'),
            clearLogs: document.getElementById('clear-logs'),
            loaderSection: document.getElementById('loader-section'),
            loaderText: document.getElementById('loader-text'),
            loaderProgress: document.getElementById('loader-progress')
        };

        this.init();
    }

    init() {
        console.log(' Extension Shell initializing...');
        this.loadTheme();
        this.bindEvents();
        this.setupIFrameCommunication();
        this.initializeLucideIcons();
        this.addInitialLog();
        this.setInitialState();
        //this.autoDetectAndCoordinate();
    }

    // Auto-detect app from URL and coordinate
    autoDetectAndCoordinate() {
        const path = window.location.pathname;
        console.log(` Auto-detecting app from path: ${path}`);
        
        if (path.startsWith('/data-comparison')) {
            this.coordinateAppViewGeneration('data-comparison', 'welcome');
        } else if (path.startsWith('/upcoming-app')) {
            this.coordinateAppViewGeneration('upcoming-app', 'welcome');
        } else {
            // Default to loading welcome page
            this.setAppState('idle', 'Ready');
            this.setActiveApp('Welcome');
        }
    }

    async coordinateAppViewGeneration(app, state) {
        console.log(` Coordinating appView generation for ${app}:${state}`);
        
        this.showLoader(`Generating ${app} ${state} interface...`, 0);
        this.setAppState('loading', `Loading ${state}...`);
        this.setActiveApp(`${app} - ${state}`);
        
        try {
            this.updateLoader(25, 'Requesting dynamic UI...');
            
            // Request app state API first to sync state
            const stateResponse = await fetch(`/${app}/api/state`);
            const stateData = await stateResponse.json();
            
            this.updateLoader(50, 'Generating component...');
            
            // Set iframe to load the dynamic UI endpoint
            const dynamicUrl = `/${app}/${state}-ui`;
            console.log(` Setting iframe src to: ${dynamicUrl}`);
            
            this.elements.appFrame.src = dynamicUrl;
            
            this.updateLoader(75, 'Loading into iframe...');
            
            // Wait for iframe to load
            this.elements.appFrame.onload = () => {
                this.updateLoader(100, 'Complete!');
                
                setTimeout(() => {
                    this.hideLoader();
                    this.setAppState('idle', 'Ready');
                    this.addLog('Shell', 'info', `Dynamic appView loaded for ${app}:${state}`);
                    
                    // Send theme to newly loaded iframe
                    setTimeout(() => this.sendThemeToApp(this.currentTheme, this.getThemeVariables()), 500);
                }, 800);
            };
            
            this.elements.appFrame.onerror = () => {
                throw new Error('Failed to load iframe content');
            };
            
        } catch (error) {
            console.error(' AppView coordination failed:', error);
            this.hideLoader();
            this.setAppState('error', 'Failed to load');
            this.addLog('Shell', 'error', `AppView generation failed: ${error.message}`);
            
            // Show error in iframe
            const errorHtml = this.generateErrorHTML(app, state, error.message);
            const blob = new Blob([errorHtml], { type: 'text/html' });
            this.elements.appFrame.src = URL.createObjectURL(blob);
        }
    }

    generateErrorHTML(app, state, errorMessage) {
        return `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Error Loading ${app}</title>
                <style>
                    body { 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                        padding: 2rem; 
                        text-align: center; 
                        background: var(--app-bg-primary, #f8fafc);
                        color: var(--app-text-primary, #1e293b);
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                        min-height: 100vh;
                        margin: 0;
                    }
                    .error-icon { 
                        color: #ef4444; 
                        font-size: 3rem; 
                        margin-bottom: 1rem; 
                    }
                    .error-title { 
                        font-size: 1.5rem; 
                        margin-bottom: 0.5rem; 
                        color: #1e293b;
                    }
                    .error-message { 
                        color: #ef4444; 
                        margin: 1rem 0; 
                        max-width: 500px;
                    }
                    .retry-btn { 
                        padding: 0.75rem 1.5rem; 
                        background: #3b82f6; 
                        color: white; 
                        border: none; 
                        border-radius: 6px; 
                        cursor: pointer; 
                        font-size: 1rem;
                        margin-top: 1rem;
                        transition: background 0.2s;
                    }
                    .retry-btn:hover {
                        background: #2563eb;
                    }
                </style>
            </head>
            <body>
                <div class="error-icon"></div>
                <h2 class="error-title">Failed to Load ${app.charAt(0).toUpperCase() + app.slice(1)} - ${state}</h2>
                <div class="error-message">${errorMessage}</div>
                <button class="retry-btn" onclick="window.parent.location.reload()"> Retry</button>
            </body>
            </html>
        `;
    }

    // Theme Management
    setTheme(theme) {
        console.log(` Setting theme to: ${theme}`);
        this.currentTheme = theme;
        this.elements.body.setAttribute('data-theme', theme);
        localStorage.setItem('ext-theme', theme);
        
        const iconName = theme === 'dark' ? 'moon' : 'sun';
        this.elements.themeIcon.setAttribute('data-lucide', iconName);
        this.initializeLucideIcons();
        
        // Send theme to iframe
        const variables = this.getThemeVariables();
        this.sendThemeToApp(theme, variables);

        this.addLog('Extension', 'info', `Theme switched to ${theme} mode`);
    }

    getThemeVariables() {
        const computedStyle = getComputedStyle(document.documentElement);
        const variables = {};
        
        const variableNames = [
            'bg-primary', 'bg-secondary', 'bg-tertiary',
            'text-primary', 'text-secondary', 'text-tertiary', 
            'border', 'border-hover', 'accent', 'accent-hover',
            'success', 'warning', 'error', 'transition',
            'border-radius', 'shadow', 'shadow-lg'
        ];
        
        variableNames.forEach(name => {
            const value = computedStyle.getPropertyValue(`--app-${name}`);
            if (value && value.trim()) {
                variables[name] = value.trim();
            }
        });
        
        return variables;
    }

    sendThemeToApp(theme, variables) {
        const message = {
            type: 'THEME_DATA',
            theme: theme,
            variables: variables
        };
        
        if (this.elements.appFrame.contentWindow) {
            try {
                this.elements.appFrame.contentWindow.postMessage(message, '*');
                console.log(` Sent theme to app:`, theme);
            } catch (error) {
                console.warn('Failed to send theme to app:', error);
            }
        }
    }

    // iframe Communication
    setupIFrameCommunication() {
        window.addEventListener('message', (event) => {
            // Accept messages from iframe (blob URLs) and same origin
            if (event.origin !== window.location.origin && !event.origin.startsWith('blob:')) {
                return;
            }

            const { type, data } = event.data;
            console.log(` Received message: ${type}`, data);

            switch (type) {
                case 'APP_LOADED':
                    this.setActiveApp(data.appName || 'Unknown App');
                    this.setAppState('idle', 'Ready');
                    this.addLog(data.appName || 'App', 'info', 'App loaded successfully');
                    break;
                    
                case 'APP_STATE_CHANGED':
                    this.setAppState(data.state, data.message);
                    break;
                    
                case 'SHOW_LOADER':
                    this.showLoader(data.text, data.progress);
                    break;
                    
                case 'UPDATE_LOADER':
                    this.updateLoader(data.progress, data.text);
                    break;
                    
                case 'HIDE_LOADER':
                    this.hideLoader();
                    break;
                    
                case 'ADD_LOG':
                    this.addLog(data.app, data.level, data.message);
                    break;
                    
                case 'REQUEST_THEME':
                    this.sendThemeToApp(this.currentTheme, this.getThemeVariables());
                    break;
                    
                case 'REQUEST_APPVIEW_GENERATION':
                    const { app, state } = data;
                    this.coordinateAppViewGeneration(app, state);
                    break;
                    
                default:
                    console.log(' Unknown message type:', type);
            }
        });
    }

    // Loader Management
    showLoader(text = 'Loading...', progress = 0) {
        this.elements.loaderText.textContent = text;
        this.elements.loaderProgress.style.width = `${progress}%`;
        this.elements.loaderSection.classList.add('visible');
    }

    updateLoader(progress, text = null) {
        if (text) this.elements.loaderText.textContent = text;
        this.elements.loaderProgress.style.width = `${progress}%`;
    }

    hideLoader() {
        this.elements.loaderSection.classList.remove('visible');
        setTimeout(() => this.elements.loaderProgress.style.width = '0%', 300);
    }

    // State Management
    setAppState(state, message = '') {
        this.currentState = state;
        this.elements.appState.classList.remove('idle', 'loading', 'success', 'error');
        this.elements.appState.classList.add(state);
        this.elements.appStateText.textContent = message || this.capitalizeFirst(state);
        
        const iconMap = {
            idle: 'circle',
            loading: 'loader', 
            success: 'check-circle',
            error: 'x-circle'
        };
        
        this.elements.stateIcon.setAttribute('data-lucide', iconMap[state] || 'circle');
        this.initializeLucideIcons();
    }

    setActiveApp(appName) {
        this.currentApp = appName;
        this.elements.activeAppName.textContent = appName;
    }

    // Logging System
    addLog(appName, level, message) {
        const timestamp = new Date().toLocaleTimeString('en-US', { hour12: false });
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${level}`;
        logEntry.innerHTML = `
            <span class="log-timestamp">[${timestamp}]</span>
            <span class="log-level">[${level.toUpperCase()}]</span>
            <span class="log-app">[${appName}]</span>
            <span class="log-message">${message}</span>
        `;
        
        this.elements.logEntries.appendChild(logEntry);
        this.elements.logEntries.scrollTop = this.elements.logEntries.scrollHeight;
        
        // Keep only last 100 log entries
        const logs = this.elements.logEntries.children;
        if (logs.length > 100) {
            logs[0].remove();
        }
    }

    // Utility Methods
    setInitialState() {
        this.setAppState('loading', 'Loading app...');
    }

    loadTheme() {
        const savedTheme = localStorage.getItem('ext-theme') || 'light';
        this.setTheme(savedTheme);
    }

    toggleTheme() {
        const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        this.setTheme(newTheme);
    }

    toggleLogPanel() {
        this.isLogPanelOpen = !this.isLogPanelOpen;
        
        if (this.isLogPanelOpen) {
            this.elements.logPanel.classList.add('expanded');
            this.elements.logToggle.classList.add('active');
        } else {
            this.elements.logPanel.classList.remove('expanded');
            this.elements.logToggle.classList.remove('active');
        }
    }

    clearLogs() {
        this.elements.logEntries.innerHTML = '';
        this.addLog('Extension', 'info', 'Logs cleared');
    }

    initializeLucideIcons() {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }

    addInitialLog() {
        this.addLog('Extension', 'info', 'CPQ Toolset Extension Shell initialized');
    }

    bindEvents() {
        this.elements.themeToggle?.addEventListener('click', () => this.toggleTheme());
        this.elements.logToggle?.addEventListener('click', () => this.toggleLogPanel());
        this.elements.clearLogs?.addEventListener('click', () => this.clearLogs());
    }

    capitalizeFirst(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
}

// Initialize Extension Shell
document.addEventListener('DOMContentLoaded', () => {
    console.log(' Initializing Extension Shell...');
    window.extensionShell = new ExtensionShell();
});

Dir: shared\UI\state
Content:

Dir: shared\UI\welcomePage
Content:

### File: index.css

:root {
    --bg-primary: #ffffff;
    --bg-secondary: #f8fafc;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --accent: #3b82f6;
    --accent-hover: #2563eb;
    --success: #10b981;
    --border-color: #e2e8f0;
    --radius: 8px;
    --shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s ease;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    background: var(--bg-primary);
    color: var(--text-primary);
    line-height: 1.6;
}

.welcome-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.welcome-header {
    background: var(--bg-secondary);
    border-bottom: 1px solid var(--border-color);
    padding: 1.5rem 2rem;
}

.header-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.brand-section {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.brand-icon {
    width: 56px;
    height: 56px;
    background: linear-gradient(135deg, var(--accent), var(--accent-hover));
    border-radius: var(--radius);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    box-shadow: var(--shadow);
}

.brand-logo {
    width: 28px;
    height: 28px;
}

.brand-title {
    font-size: 1.875rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
}

.brand-subtitle {
    font-size: 1rem;
    color: var(--text-secondary);
    font-weight: 500;
}

.status-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    background: rgba(16, 185, 129, 0.1);
    border: 1px solid var(--success);
    color: var(--success);
}

.status-icon {
    width: 16px;
    height: 16px;
}

.welcome-main {
    flex: 1;
    padding: 3rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
}

.welcome-hero {
    text-align: center;
    margin-bottom: 3rem;
}

.hero-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
}

.hero-description {
    font-size: 1.25rem;
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
}

.apps-section {
    margin-top: 2rem;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
}

.section-title {
    font-size: 1.5rem;
    font-weight: 600;
}

.app-count {
    background: var(--bg-secondary);
    color: var(--text-secondary);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    border: 1px solid var(--border-color);
}

.apps-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
}

.app-card {
    background: var(--bg-secondary);
    border: 2px solid var(--border-color);
    border-radius: calc(var(--radius) * 1.5);
    padding: 2rem;
    cursor: pointer;
    transition: var(--transition);
    position: relative;
    overflow: hidden;
}

.app-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    border-color: var(--accent);
}

.app-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.app-icon {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    background: linear-gradient(135deg, var(--accent), var(--accent-hover));
    box-shadow: var(--shadow);
}

.app-icon i {
    width: 28px;
    height: 28px;
}

.app-title {
    font-size: 1.375rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.app-path {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-family: monospace;
}

.app-description {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1.5rem;
}

.app-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.app-version {
    font-size: 0.75rem;
    color: var(--text-secondary);
    background: var(--bg-primary);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-family: monospace;
    border: 1px solid var(--border-color);
}

.app-status {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    color: var(--success);
    font-weight: 500;
}

.app-status i {
    width: 14px;
    height: 14px;
}

.welcome-footer {
    background: var(--bg-secondary);
    border-top: 1px solid var(--border-color);
    padding: 1.5rem 2rem;
    margin-top: auto;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.footer-text {
    color: var(--text-secondary);
    font-size: 0.875rem;
}

.footer-links {
    display: flex;
    gap: 1rem;
}

.footer-link {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    transition: var(--transition);
}

.footer-link:hover {
    color: var(--accent);
    background: var(--bg-primary);
}

.link-icon {
    width: 14px;
    height: 14px;
}

@media (max-width: 768px) {
    .header-content,
    .footer-content {
        flex-direction: column;
        gap: 1rem;
    }
    
    .welcome-main {
        padding: 2rem 1rem;
    }
    
    .hero-title {
        font-size: 2rem;
    }
    
    .apps-grid {
        grid-template-columns: 1fr;
    }
}

### File: index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CPQ Toolset - Welcome</title>
    <link rel="stylesheet" href="/shared/welcomePage/index.css">
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
    <div class="welcome-container">
        <header class="welcome-header">
            <div class="header-content">
                <div class="brand-section">
                    <div class="brand-icon">
                        <i data-lucide="settings" class="brand-logo"></i>
                    </div>
                    <div class="brand-info">
                        <h1 class="brand-title">CPQ Toolset Extension</h1>
                        <p class="brand-subtitle">Salesforce CPQ Development Suite</p>
                    </div>
                </div>
                <div class="header-status">
                    <div class="status-badge ready">
                        <i data-lucide="check-circle" class="status-icon"></i>
                        <span class="status-text">Ready</span>
                    </div>
                </div>
            </div>
        </header>

        <main class="welcome-main">
            <div class="welcome-hero">
                <h2 class="hero-title">Choose Your Tool</h2>
                <p class="hero-description">
                    Select from our suite of powerful Salesforce CPQ development tools.
                </p>
            </div>

            <div id="apps-section" class="apps-section">
                <div class="section-header">
                    <h3 class="section-title">Available Tools</h3>
                    <div id="app-count" class="app-count">Loading...</div>
                </div>
                <div id="apps-grid" class="apps-grid">
                    <!-- Apps will be populated here -->
                </div>
            </div>
        </main>

        <footer class="welcome-footer">
            <div class="footer-content">
                <div class="footer-left">
                    <p class="footer-text">&copy; 2025 CPQ Toolset Extension</p>
                </div>
                <div class="footer-right">
                    <div class="footer-links">
                        <a href="/health" class="footer-link">
                            <i data-lucide="activity" class="link-icon"></i>
                            Health
                        </a>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script src="/shared/welcomePage/index.js"></script>
</body>
</html>

### File: index.js

// shared/UI/welcomePage/index.js - Standalone welcome (no shell communication)
class WelcomeApp {
    constructor() {
        this.apps = [];
        this.init();
    }

    async init() {
        console.log(' Welcome App initializing (standalone mode)...');
        this.initializeLucideIcons();
        await this.loadApps();
        this.bindEvents();
    }

    initializeLucideIcons() {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
            console.log(' Lucide icons initialized');
        } else {
            console.warn(' Lucide icons not available');
        }
    }

    async loadApps() {
        try {
            console.log(' Loading apps...');
            const response = await fetch('/utils/get-apps');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            this.apps = await response.json();
            console.log(' Apps loaded:', this.apps);
            this.displayApps();
        } catch (error) {
            console.error(' Error loading apps:', error);
            this.showError();
        }
    }

    displayApps() {
        const appCount = document.getElementById('app-count');
        const appsGrid = document.getElementById('apps-grid');
        
        if (!appCount || !appsGrid) {
            console.error(' Required elements not found');
            return;
        }

        appCount.textContent = `${this.apps.length} tool${this.apps.length !== 1 ? 's' : ''}`;
        appsGrid.innerHTML = '';

        this.apps.forEach((app, index) => {
            const card = this.createAppCard(app);
            appsGrid.appendChild(card);
            
            // Add staggered animation
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });

        this.initializeLucideIcons();
        console.log(' Apps displayed');
    }

    createAppCard(app) {
        const card = document.createElement('div');
        card.className = 'app-card';
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        card.style.transition = 'all 0.3s ease';
        
        const iconName = this.getAppIcon(app.name);
        const description = this.getAppDescription(app.name);

        card.innerHTML = `
            <div class="app-header">
                <div class="app-icon">
                    <i data-lucide="${iconName}"></i>
                </div>
                <div class="app-info">
                    <h3 class="app-title">${app.title}</h3>
                    <div class="app-path">${app.path}</div>
                </div>
            </div>
            <div class="app-description">${description}</div>
            <div class="app-footer">
                <div class="app-version">v${app.version}</div>
                <div class="app-status">
                    <i data-lucide="check-circle"></i>
                    <span>Ready</span>
                </div>
            </div>
        `;

        card.addEventListener('click', () => this.launchApp(app));
        
        // Add hover effects
        card.addEventListener('mouseenter', () => {
            console.log(` Hovering over ${app.title}`);
        });

        return card;
    }

    getAppIcon(name) {
        const icons = {
            'data-comparison': 'git-compare',
            'upcoming-app': 'zap',
            'config-generator': 'settings',
            'org-sync': 'cloud',
            'default': 'box'
        };
        return icons[name] || icons.default;
    }

    getAppDescription(name) {
        const descriptions = {
            'data-comparison': 'Compare Salesforce CPQ configurations across multiple orgs with advanced filtering and visualization.',
            'upcoming-app': 'Next-generation CPQ tool in development with enhanced functionality for configuration management.',
            'config-generator': 'Generate CPQ configurations automatically based on templates and best practices.',
            'org-sync': 'Synchronize configurations between different Salesforce orgs seamlessly.',
            'default': 'Powerful Salesforce CPQ development and analysis tool.'
        };
        return descriptions[name] || descriptions.default;
    }

    // UPDATED: Direct navigation (no shell communication needed)
    launchApp(app) {
        console.log(` Launching ${app.title} (${app.name})`);
        
        // Add visual feedback
        const card = event.currentTarget;
        card.style.transform = 'scale(0.95)';
        
        setTimeout(() => {
            card.style.transform = '';
            
            // Direct navigation to app route (will load shell + app)
            window.location.href = app.path;
            console.log(` Navigating to: ${app.path}`);
        }, 150);
    }

    showError() {
        const appCount = document.getElementById('app-count');
        const appsGrid = document.getElementById('apps-grid');
        
        if (appCount) appCount.textContent = 'Error loading';
        if (appsGrid) {
            appsGrid.innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; padding: 2rem; color: #ef4444;">
                    <p> Failed to load applications</p>
                    <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;">
                         Try Again
                    </button>
                </div>
            `;
        }
    }

    bindEvents() {
        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'r' && (e.ctrlKey || e.metaKey)) {
                e.preventDefault();
                location.reload();
            }

            // Quick app launch shortcuts
            if (e.key >= '1' && e.key <= '9') {
                const appIndex = parseInt(e.key) - 1;
                if (this.apps[appIndex]) {
                    this.launchApp(this.apps[appIndex]);
                }
            }
        });
        
        console.log(' Event listeners bound (standalone mode)');
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log(' DOM loaded, initializing Welcome App (standalone)...');
    window.welcomeApp = new WelcomeApp();
});

// Global API
window.WelcomeApp = {
    refresh: () => window.welcomeApp?.loadApps(),
    getApps: () => window.welcomeApp?.apps || []
};

Dir: shared\utils\Logger
Content:

### File: browser.js

/**
 * CPQ Toolset Extension Logger - Browser Version
 * Provides centralized logging for browser-based app components
 */

const LOG_LEVELS = {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3,
    trace: 4
};

const LOG_COLORS = {
    error: 'color: #ef4444; font-weight: bold;',
    warn: 'color: #f59e0b; font-weight: bold;',
    info: 'color: #3b82f6; font-weight: bold;',
    debug: 'color: #8b5cf6; font-weight: bold;',
    trace: 'color: #64748b; font-weight: bold;'
};

class BrowserLogger {
    constructor(options = {}) {
        this.appName = options.appName || 'Unknown App';
        this.location = options.location || 'unknown.js';
        this.logLevel = options.logLevel || 'info';
        this.enableColors = options.enableColors !== false;
        this.enableTimestamp = options.enableTimestamp !== false;
        this.currentLevel = LOG_LEVELS[this.logLevel] || LOG_LEVELS.info;
        this.isInExtensionShell = window.parent !== window;
    }

    formatMessage(level, message, data = null) {
        const timestamp = this.enableTimestamp ? new Date().toISOString() : '';
        let formatted = `[${timestamp}] [${level.toUpperCase()}] [${this.appName}] [${this.location}] ${message}`;
        
        return {
            formatted,
            data,
            timestamp,
            level,
            app: this.appName,
            location: this.location,
            message
        };
    }

    shouldLog(level) {
        return LOG_LEVELS[level] <= this.currentLevel;
    }

    log(level, message, data = null) {
        if (!this.shouldLog(level)) {
            return;
        }

        const logData = this.formatMessage(level, message, data);
        
        // Console output with colors
        const color = this.enableColors ? LOG_COLORS[level] : '';
        if (color) {
            console.log(`%c${logData.formatted}`, color);
        } else {
            console.log(logData.formatted);
        }
        
        if (data) {
            console.log('Data:', data);
        }

        // Send to Extension Shell if available
        this.sendToExtensionShell(logData);
    }

    sendToExtensionShell(logData) {
        if (!this.isInExtensionShell) {
            return;
        }

        try {
            window.parent.postMessage({
                type: 'ADD_LOG',
                data: {
                    app: logData.app,
                    level: logData.level,
                    message: logData.data ? `${logData.message} ${JSON.stringify(logData.data)}` : logData.message,
                    location: logData.location,
                    timestamp: logData.timestamp
                }
            }, '*');
        } catch (error) {
            console.warn('Failed to send log to Extension Shell:', error);
        }
    }

    error(message, data = null) {
        this.log('error', message, data);
    }

    warn(message, data = null) {
        this.log('warn', message, data);
    }

    info(message, data = null) {
        this.log('info', message, data);
    }

    debug(message, data = null) {
        this.log('debug', message, data);
    }

    trace(message, data = null) {
        this.log('trace', message, data);
    }

    // Utility methods for browser context
    setLogLevel(level) {
        this.logLevel = level;
        this.currentLevel = LOG_LEVELS[level] || LOG_LEVELS.info;
        this.info(`Log level changed to ${level}`);
    }

    getLogLevel() {
        return this.logLevel;
    }

    isExtensionConnected() {
        return this.isInExtensionShell;
    }
}

/**
 * Factory function to create browser logger instances
 * @param {Object} options - Logger configuration
 * @param {string} options.logLevel - Log level (error, warn, info, debug, trace)
 * @param {string} options.appName - Application name
 * @param {string} options.location - File/module location
 * @param {boolean} options.enableColors - Enable color output
 * @param {boolean} options.enableTimestamp - Enable timestamp
 * @returns {BrowserLogger} Logger instance
 */
function createLogger(options = {}) {
    return new BrowserLogger(options);
}

// Global export for browser use
if (typeof window !== 'undefined') {
    window.CPQLogger = {
        createLogger,
        BrowserLogger,
        LOG_LEVELS,
        LOG_COLORS
    };
}

// Module export for compatibility
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        createLogger,
        BrowserLogger,
        LOG_LEVELS,
        LOG_COLORS
    };
}

### File: index.js

const path = require('path');

/**
 * CPQ Toolset Extension Logger
 * Provides centralized logging with level-based formatting
 */

const LOG_LEVELS = {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3,
    trace: 4
};

const LOG_COLORS = {
    error: '\x1b[31m',   // Red
    warn: '\x1b[33m',    // Yellow
    info: '\x1b[36m',    // Cyan
    debug: '\x1b[35m',   // Magenta
    trace: '\x1b[37m',   // White
    reset: '\x1b[0m'     // Reset
};

class Logger {
    constructor(options = {}) {
        this.appName = options.appName || 'Unknown';
        this.location = options.location || 'Unknown';
        this.logLevel = options.logLevel || 'info';
        this.enableColors = options.enableColors !== false;
        this.enableTimestamp = options.enableTimestamp !== false;
        this.currentLevel = LOG_LEVELS[this.logLevel] || LOG_LEVELS.info;
    }

    formatMessage(level, message, data = null) {
        const timestamp = this.enableTimestamp ? new Date().toISOString() : '';
        const color = this.enableColors ? LOG_COLORS[level] : '';
        const reset = this.enableColors ? LOG_COLORS.reset : '';
        
        let formatted = `${color}[${timestamp}] [${level.toUpperCase()}] [${this.appName}] [${this.location}]${reset} ${message}`;
        
        if (data) {
            formatted += `\n${color}Data:${reset} ${JSON.stringify(data, null, 2)}`;
        }
        
        return formatted;
    }

    shouldLog(level) {
        return LOG_LEVELS[level] <= this.currentLevel;
    }

    log(level, message, data = null) {
        if (!this.shouldLog(level)) {
            return;
        }

        const formatted = this.formatMessage(level, message, data);
        
        // Send to console based on level
        switch (level) {
            case 'error':
                console.error(formatted);
                break;
            case 'warn':
                console.warn(formatted);
                break;
            case 'debug':
            case 'trace':
                console.debug(formatted);
                break;
            default:
                console.log(formatted);
        }

        // Send to Extension UI if available (browser context)
        if (typeof window !== 'undefined' && window.parent && window.parent !== window) {
            window.parent.postMessage({
                type: 'ADD_LOG',
                data: {
                    app: this.appName,
                    level: level,
                    message: data ? `${message} ${JSON.stringify(data)}` : message,
                    location: this.location,
                    timestamp: new Date().toISOString()
                }
            }, '*');
        }
    }

    error(message, data = null) {
        this.log('error', message, data);
    }

    warn(message, data = null) {
        this.log('warn', message, data);
    }

    info(message, data = null) {
        this.log('info', message, data);
    }

    debug(message, data = null) {
        this.log('debug', message, data);
    }

    trace(message, data = null) {
        this.log('trace', message, data);
    }
}

/**
 * Factory function to create logger instances
 * @param {Object} options - Logger configuration
 * @param {string} options.logLevel - Log level (error, warn, info, debug, trace)
 * @param {string} options.appName - Application name
 * @param {string} options.location - File/module location
 * @param {boolean} options.enableColors - Enable color output
 * @param {boolean} options.enableTimestamp - Enable timestamp
 * @returns {Logger} Logger instance
 */
function createLogger(options = {}) {
    return new Logger(options);
}

module.exports = {
    createLogger,
    Logger,
    LOG_LEVELS,
    LOG_COLORS
};
